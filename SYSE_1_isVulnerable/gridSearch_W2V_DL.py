import os, sys

import pandas as pd
import numpy as np
from sklearn.model_selection import GridSearchCV
from sklearn.pipeline import Pipeline

from utils.Word2VecModel import Word2VecModel
from utils.BGRUCustomModel import BGRUModel


#### Setting variables
vType = "ALL"
randomSeed = 1099
numSamples = 420627 # 1386 locally
slicePath = './data/slicesSource/'
tokenPath = './data/token/SARD/'
multiclasspath = './data/CVE/SARD_CVE_to_groups.csv'
vectorTrainPath = './data/DLvectors/train/'
vectorTestPath = './data/DLvectors/test/'
VUL_PATH = os.environ.get('VUL_PATH') 
sys.path.insert(1, VUL_PATH)


#### Preprocessing
print('TOKENIZING SLICES...')
from SYSE_1_isVulnerable.slicesToTokens import tokenizeSlices_Multiclass
testcase_ids, testcase_ids_per_group = tokenizeSlices_Multiclass(slicePath, tokenPath, multiclasspath, numSamples)

print('\nSPLITTING INTO TRAINING/TESTING SETS...')
from SYSE_1_isVulnerable.splitTrainTest import splitTrainTest
splitTrainTest(vType, tokenPath, vectorTrainPath, vectorTestPath, randomSeed, split = 0.8 )

#### Hot encode categorical labels
from SYSE_1_isVulnerable.saveKeyData import saveKeyDataMulticlass
saveKeyDataMulticlass(vectorTrainPath)
saveKeyDataMulticlass(vectorTestPath)


#### Grid Search for best parameters on W2V & BGRU models
pipe = Pipeline([('word2vec', Word2VecModel()), ('bgru', BGRUModel())])
param_grid = {'word2vec__alpha': [0.025, 0.05, 0.1],
              'word2vec__negative': [5, 10, 15],
              'word2vec__window': [3],
              'word2vec__epochs': [5],
              'word2vec__vector_size': [50],
              'bgru__n_neighbors': [3],
              'bgru__weights': ['distance'],
              'bgru__p': [2], # 2 = euclidean distance
}
grid = GridSearchCV(pipe, 
            param_grid=param_grid,
            scoring='accuracy',
            return_train_score=True,
            verbose=1)

print('\nGRID SEARCH ON TRAINING DATASET COMMENCING...')
from SYSE_2_vulnerabilityType.MLMethods import getDataset
data = getDataset(vectorTrainPath, False, randomSeed)
x_train = data[0]
y_train = [d[0] for d in data[-2]]

fitted = grid.fit(x_train, y_train)

print('\nGRID SEARCH ON TRAINING DATASET COMPLETE. RESULTS:\n')
print("Best Parameters: {}\n".format(grid.best_params_))
print("Best accuracy: {}\n".format(grid.best_score_))
print("Finished.")
