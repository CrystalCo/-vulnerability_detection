import os, sys

VUL_PATH = os.environ.get('VUL_PATH')
sys.path.insert(1, VUL_PATH)

from utils.CrossValidation import CrossValidation
from utils.PreProcess import PreProcess
from utils.DLCustomModels import create_bgru_model
from utils.utils import SaveData

# Preprocess the data
vectorsALLdir='ALL_vulnerable_vectors_sysevr'
min_number = 100

P = PreProcess(vectorsALLdir, min_number)
P.preprocess_all()

# Grid search params
VUL_TYPE = 'SYSE'
OPT = ['ADAM', 'RMSProp']
DROP = [0.2, 0.5]
ACT_FNS = [('sigmoid', 'hard_sigmoid'), ('tanh', 'sigmoid')]
UNITS = [256, 512]
k = 2

gs_combo = []
avg_metrics = []

for o in OPT:
    for d in DROP:
        for af in ACT_FNS:
            for u in UNITS:
                # reset
                # P.VC.reset_checkpoint_and_weights(P.VC.weightpath)
                P.init_vc(d, u, o, af[0], af[1], create_bgru_model)
                CV = CrossValidation(P.VC, k)
                avg_metrics.append(CV.main())


print(gs_combo)
print(avg_metrics)
data = [gs_combo, avg_metrics]
output_path = 'GS_metrics.pkl'
SaveData(output_path, data)
