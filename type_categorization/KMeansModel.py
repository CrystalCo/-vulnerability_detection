import os
import pickle
import numpy as np
from sklearn.cluster import KMeans

# from main.preprocess_dl_Input_version5 import multi_labels_to_two
# copying the code slice since having issues importing
def multi_labels_to_two(label):
    if 1 == label:
        return 1
    else:
        return 0

def getTrainingData(traindataSet_path, RANDOMSEED):
    
    print("Getting Balanced Training dataset...")
    dataset = []
    labels = []
    testcases = []
    vtypes = []
    for filename in os.listdir(traindataSet_path):
        if not filename.endswith(".DS_Store"):
            print(filename)
            f = open(os.path.join(traindataSet_path, filename),"rb")
            dataset_file,labels_file,funcs_file,filenames_file,vtype_file, testcases_file = pickle.load(f)
            f.close()
            dataset += dataset_file
            labels += labels_file
            testcases += testcases_file
            vtypes += vtype_file
    print(len(dataset), len(labels))

    bin_labels = []
    for label in labels:
        bin_labels.append(multi_labels_to_two(label))
    labels = bin_labels

    # Flatten the data from 3D to 2D
    dataset = np.array(dataset)
    _dataset = np.zeros(dataset.size).reshape((dataset.shape[0], dataset.shape[1] * dataset.shape[2]))
    for i in range(dataset.shape[0]):
        _dataset[i] = dataset[i].flatten()

    if dataset.shape[0] != len(labels):
        raise('Dataset row count does not match labels count.')

    np.random.seed(RANDOMSEED)
    np.random.shuffle(_dataset)
    np.random.seed(RANDOMSEED)
    np.random.shuffle(labels)
   
    return _dataset, labels, testcases, vtypes


dlInputsTrainPath = './data/DLinputs/train/'
randomSeed = 1099

kmeans = KMeans(n_clusters=4, max_iter=500, verbose=1)
dataset, labels, testcases, vtypes = getTrainingData(dlInputsTrainPath, randomSeed)
kmeans.fit(dataset)
