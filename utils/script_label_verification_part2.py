import os
import ast

from pprint import pprint

from get_CWE_methods import get_flawed_lines_by_parser


# Write a script that cross checks the vulnerability label and line 

#  2 phases:
    # Phase 1: parse all SARD test cases that only contain 1 file
    # See the list of files that contain >2 files
    # look into those
    # Part 1 of Phase 1 is parsing by line number
    # Part 2 of Phase 1 is parsing by delim
# Pull SARD IDs
# Using CWE_IDs.txt because SARD_IDs.txt contains duplicates

flawed_urls = os.path.join( '..', 'data', '_temporaries', 'flawed_urls.txt')
with open(flawed_urls, 'r') as f:
    data = f.read()

urls_to_check = ast.literal_eval(data)
print(urls_to_check)

sard_nodes_path = os.path.join( '..', 'data', '_temporaries', 'sard_vulnerabilities.txt')
with open(sard_nodes_path, 'r') as f:
    data = f.read()
SARD_IDs = ast.literal_eval(data)    

for sard in urls_to_check:
    urls = urls_to_check[sard]
    get_flawed_lines_by_parser(urls, SARD_IDs[sard])

print(SARD_IDs)

extended_sard_nodes_path = os.path.join( '..', 'data', '_temporaries', 'sard_vulnerabilities2.txt')
pprint(SARD_IDs, stream=open(extended_sard_nodes_path, 'w'), width=300)

