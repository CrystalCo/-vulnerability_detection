import os, pickle
import numpy as np

def init_nested_arrays(num):
    arr = []
    for i in range(num):
        arr.append([])
    return arr

def get_category(arr):
    """
        Flattens groupid array for all samples into the assigned groupids only.
        Example: [[664, 664], [703, 555]] --> [664, 703]
    """
    result = [x[0] for x in arr]
    return result

def getAvgLength(arr):
    totalSamples = len(arr)
    totalVectorLen = 0

    for a in arr:
        totalVectorLen += len(a)

    meanLen = int(totalVectorLen/totalSamples)
    print("Mean Vector Length" ,  meanLen)
    return meanLen


def transformVLength(X, maxlen, vector_dim=30):
    cut_count = 0
    fill_0_count = 0
    no_change_count = 0
    fill_0 = [0]*vector_dim
    totallen = 0
    threshold = maxlen * vector_dim
    print ("threshold: " ,threshold)
    if (maxlen != 0):
        new_X = []
        for x in X:  
             #len(x) is how many symbols in 1 program. ex. 79 
            if len(x) <  maxlen:
                x = x + [fill_0] * (maxlen - len(x))
                new_X.append(x)
                fill_0_count += 1

            elif len(x) == maxlen:
                new_X.append(x)
                no_change_count += 1
                    
            else:
                startpoint = int(threshold - round(maxlen / 2.0))
                endpoint =  int(startpoint + maxlen)
                if startpoint < 0:
                    startpoint = 0
                    endpoint = maxlen
                if endpoint >= len(x):
                    startpoint = -maxlen
                    endpoint = None
                new_X.append(x[startpoint:endpoint])
                cut_count += 1
            totallen = totallen + len(x)
    X = new_X
    print ("New Vector Length: ", len(X[0]))
    return X

def num_classes(datapath):
    """
        Gets the total number of unique classes that exist.
    """
    for filename in os.listdir(datapath):
        if filename.endswith(".pkl"):
            f = open(os.path.join(datapath, filename),"rb")
            data = pickle.load(f)
            categories = get_category(data[-2])
            return np.unique(categories)
