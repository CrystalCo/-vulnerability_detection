#!/usr/bin/env python
# coding: utf-8
import sys, os

VUL_PATH = os.environ.get('VUL_PATH')
sys.path.insert(1, VUL_PATH)

import numpy as np
import pandas as pd
import matplotlib
from matplotlib import pyplot as plt
from sklearn.manifold import TSNE

from utils import drop_classes_by_type, getDatasetSectionByIndex, getDatasetXY, get_class_indices_by_index


# vType = 'API'
# get our stats to compare labels to indices with later
# vector_path = os.path.join('data', 'DLvectors', f'{vType}_vectors_vul')
# y = getDatasetSectionByIndex(vector_path, getBalanced=False, index=-2)
# ids = getDatasetSectionByIndex(vector_path, getBalanced=False, index=-1)
# df = pd.DataFrame({'cwe': y, 'id': ids})
# vector_path = os.path.join('data', 'vectors', f'{vType}_index_to_id_map.xlsx')
# df.to_excel(vector_path)

# # output vectors to tsv file to upload in projector.tensorflow.com
# vector_path = os.path.join('data', 'DLvectors', f'{vType}_vectors_vul')
# X = getDatasetSectionByIndex(vector_path, getBalanced=False, index=0)
# X = np.array(X)
# df = pd.DataFrame(X)
# vector_path = os.path.join('data', 'vectors', f'{vType}_vectors.tsv')
# df.to_csv(vector_path, sep='\t', header=True, index=False)
# output vectors to tsv file to upload in projector.tensorflow.com
# X = getDatasetSectionByIndex(vector_path, getBalanced=True, index=0)
# X = np.array(X)
# df = pd.DataFrame(X)
# vector_path = os.path.join('data', 'vectors', f'{vType}_vectors.tsv')
# df.to_csv(vector_path, sep='\t', header=False, index=False)

def get_X_of_1_class(X, Y, class_label):
    data = [X, Y]
    classes, class_counts, class_indices = get_class_indices_by_index(data, index=1)
    classes, class_counts, class_indices = drop_classes_by_type(class_label, classes, class_counts, class_indices)
    new_set = [[], []]
    for indices in class_indices:
        for i in indices:
            for group_index in range(len(data)):
                new_set[group_index].append(data[group_index][i])
    return np.array(new_set[0])

def get_labels_transformed_by_class(class_label, X, Y, num_iter, p, lr='auto'):
    """
        class_label:    [ints]
        num_iter:      int; number of iterations; default 1000 in scikit-learn
        X:     Vectors
        y:              
        p:      int; Perplexity; Kind of like number of neighbors 
        lr:     int; Learning Rate; default is ‘auto’ option - sets the lr to max(N / early_exaggeration / 4, 50) where N is the sample size
    """
    # Transform just the CWE labels we want to highlight
    new_x = get_X_of_1_class(X, Y, class_label)

    # retrain model on only these samples
    tsne_model = TSNE(perplexity=p, n_components=2, learning_rate=lr, init='pca', n_iter=num_iter, random_state=1099, verbose=1)
    values = tsne_model.fit_transform(new_x)
    # return their coordinates on a 2D plot (hence the n_components=2)
    x1 = []
    y1 = []
    for value in values:
        x1.append(value[0])
        y1.append(value[1])
    return x1,y1


# PTR & ALL datasets too large for t-SNE projector, so will only use test set
# output vectors to tsv file to upload in projector.tensorflow.com
vector_path = os.path.join('data', 'DLvectors', f'test')
getAll = False
getB = not getAll
X, Y = getDatasetXY(vector_path, getBalanced=getB, y_index=-2)
X = np.array(X)


# Transform entire test set of vectors
lr='auto'       # lr=100
num_iter=1000
p=3
tsne_model = TSNE(perplexity=p, n_components=2, learning_rate=lr, init='pca', n_iter=num_iter, random_state=1099, n_jobs=4, verbose=2)
values = tsne_model.fit_transform(X)

# plot their coordinates
x0 = []
y0 = []
for value in values:
    x0.append(value[0])
    y0.append(value[1])

# format our plots to be bigger for visibility
font = {'size'   : 22}
matplotlib.rc('font', **font)
plt.figure(figsize=(22, 22))
print(f"Beginning plotting for perplexity {p} and default LR & iterations...")
for i in range(len(x0)):
    line1 = plt.scatter(x0[i],y0[i], color='royalblue', label='ALL')  # original set

outfile= os.path.join('data', 'plots', f'tsne_plot_ALL_vul_testset_p_{p}.png')
plt.legend(handles=[line1])
plt.title('t-SNE Results')
plt.savefig(outfile, format="png")
plt.close()
plt.clf()




# Test Set of All Vulnerable Classes vs the Top 2 Worst Performing Classes
plt.figure(figsize=(22, 22))
print("\nBeginning plotting...")
# original set
for i in range(len(x0)):        
    line1 = plt.scatter(x0[i],y0[i], color='royalblue', label='ALL')

# Transform just the CWE labels we want to highlight
print("\n\nDone plotting original set. Moving on to individual classes...")
class_label = 191
x1, y1 = get_labels_transformed_by_class(class_label, X, Y, num_iter, p, lr)
for i in range(len(x1)):
    line2 = plt.scatter(x1[i],y1[i], color='r', label=f'CWE-{class_label}')

class_label = 617
x1, y1 = get_labels_transformed_by_class(class_label, X, Y, num_iter, p, lr)
for i in range(len(x1)):
    line3 = plt.scatter(x1[i],y1[i], color='g', label=f'CWE-{class_label}')

outfile= os.path.join('data', 'plots', f'tsne_plot_ALL_vul_testset_p_{p}_vs_191_and_617.png')
plt.legend(handles=[line1, line2, line3])
plt.title('t-SNE Results')
plt.savefig(outfile, format="png")
plt.close()
plt.clf()

