import os

from MLMethods import get_metrics_from_logs, plot_loss_vs_X_per_epoch

logs_path = os.path.join('logs')
plot_path = os.path.join('data', 'plots')
plot_loss_path = os.path.join(plot_path, 'losses_vs___per_epoch')

# Loss vs Categorical Accuracies over epochs figure
model_names, loss_scores = get_metrics_from_logs(logs_path, 'loss')
_, accuracy_scores = get_metrics_from_logs(logs_path, 'categorical_accuracy')
# Plot Loss and Recall over epochs figure
model_names, recall_scores = get_metrics_from_logs(logs_path, 'recall')

def run_on_all_logs(model_names):
    # Plot Loss and Catgeorical Accuracy over epochs figure
    for i in range(len(model_names)):
        plot_loss_vs_X_per_epoch(model_names[i], loss_scores[i], accuracy_scores[i], 'Categorical Accuracy', plot_loss_path)

    for i in range(len(model_names)):
        plot_loss_vs_X_per_epoch(model_names[i], loss_scores[i], recall_scores[i], 'Recall', plot_loss_path)

def run_on_one_log(model_name):
    model_index = model_names.index(model_name)
    print(f'\nPlotting model {model_name}, index {model_index}')
    plot_loss_vs_X_per_epoch(model_names[model_index], loss_scores[model_index], accuracy_scores[model_index], 'Categorical Accuracy', plot_loss_path)
    plot_loss_vs_X_per_epoch(model_names[model_index], loss_scores[model_index], recall_scores[model_index], 'Recall', plot_loss_path)

name = 'BGRU_W2V_batch=64_seed=1099_epochs=60_Group_PCA'
run_on_one_log(name)
