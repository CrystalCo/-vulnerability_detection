#!/usr/bin/env python
# coding: utf-8

import os

VUL_PATH = os.environ.get('VUL_PATH')
sys.path.insert(1, VUL_PATH)

from utils.utils import get_sentences


# walk through the parsed, raw files,
slicepath = os.path.join('data', 'slicesSource')
nonvulnerable_filepath = os.path.join('data', 'slicesByLabel', 'nonvulnerable_slices.txt')
vulnerable_filepath = os.path.join('data', 'slicesByLabel', 'vulnerable_slices.txt')
splitter = '------------------------------\n'

for filename in os.listdir(slicepath):
    if(filename.endswith('.txt') is False):
        continue
    print('Slice File To be Processed: ', filename)
    f1 = open(os.path.join(slicepath, filename), 'r')
    slices = f1.read().split(splitter)# split each slice 
    f1.close()

    # Remove whitespace buffers in first and last lines of slice
    if slices[0] == '':
        del slices[0]
    if slices[-1] == '' or slices[-1] == '\n' or slices[-1] == '\r\n':
        del slices[-1]

    # Iterate each data sample
    for vul_slice in slices:
        sentences = get_sentences(vul_slice)

        # get vulnerable label (for stats)
        label_from_slice = int(sentences[-1].strip())
    
        # piece sentences back together as a slice
        sentences.append(splitter)
        new_slice = '\n'.join(sentences)

        if label_from_slice == 1:
            # Put the slices that contain vulnerabilities in one file
            with open(vulnerable_filepath, 'a') as f:
                f.write(new_slice)
        else:
            # place other slices in separate file
            with open(nonvulnerable_filepath, 'a') as f:
                f.write(new_slice)



