#!/usr/bin/env python
# coding: utf-8

# Dropping with classes <100 samples from only vulnerable samples dataset.

import sys, os, pickle, gc

VUL_PATH = os.environ.get('VUL_PATH')
sys.path.insert(1, VUL_PATH)

import numpy as np

from utils.utils import getDataset, drop_classes_by_count, get_class_indices_by_index


def downsample_main(filepath, min_num):
    data = getDataset(filepath, getBalanced=False)
    print("Number of samples in our original vulnerable dataset: ", len(data[-1]))

    # Get ratios
    # return the indices of the unique array that can be used to reconstruct the array.
    classes, class_counts, class_indices = get_class_indices_by_index(data, index=-2)
    print(f'Classes: {classes}.\nClass Counts:{class_counts}.\n')
    classes, class_counts, class_indices = drop_classes_by_count(classes, class_counts, class_indices, min_num)
    print(f'Final Class: {classes}.\tClass Count:{class_counts}.')

    # Since the numpy functions to upsample didn't work, we'll do it the classic simple python way
    final_set = [[], [], [], [], [],[], []]

    for indices in class_indices:
        for i in indices:
            for group_index in range(len(data)):
                final_set[group_index].append(data[group_index][i])
    
    return final_set

#vector_path = os.path.join('data', 'DLvectors', 'ALL_vectors_granular_vulnerable_only') # doing on vectors and not inputs because vectors have our original CWE label while inputs has the hot-encoded labels
vector_path = os.path.join('data', 'DLvectors', 'SubSample_ALL_vulnerable_only') # doing on vectors and not inputs because vectors have our original CWE label while inputs has the hot-encoded labels
final_set = downsample_main(vector_path, 2)

print("Samples in new set: ", len(final_set[-1]))
classes, y_indices = np.unique(final_set[-2], return_inverse=True)
class_counts = np.bincount(y_indices)
class_indices = np.split(np.argsort(y_indices, kind='mergesort'), np.cumsum(class_counts)[:-1])
print(f'Classes: {classes}.\n\nClass Counts:{class_counts}.\n')


newpath = os.path.join('data', 'DLvectors', 'SubSample_ALL_vulnerable_only', 'ALL_vectors_test_output.pkl')
f = open(newpath, 'wb')
pickle.dump(final_set, f, protocol=pickle.HIGHEST_PROTOCOL)
f.close()
del final_set
gc.collect()
print(f'set saved in {newpath}\n\n')




