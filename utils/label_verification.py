import os

from get_CWE_methods import get_ID_dict, get_vul_line_num_from_SARD


# Write a script that cross checks the vulnerability label and line number

# How are we going to verify if a slice is labeled correctly?
# 2 Cases:
#   Case 1) SARD
#       - We already have a script that extracts info from the SARD website.
#       - That confirms the type of vulnerability.
#       - We already have a list of SARD test case IDs we can use to scrape again.
#

#   Case 2) CVE
#       - More complicated
#
#



# Pull SARD IDs
# Using CWE_IDs.txt because SARD_IDs.txt contains duplicates
cwe_ids_file = os.path.join('data', 'CWE', 'CWE_IDs.txt')
#SARD_IDs = get_ID_dict(cwe_ids_file)

# Connect to SARD website:
get_vul_line_num_from_SARD(['120623', '94200'])

    

# Make sure CWE-IDs match
# Parse "flaw_line_number" for line with vulnerable lines

# Optional: Open File(s) with vul code
# All we really need is the line number, but in case we'd like to validate any of them without having to go back to the website, 
# we could also save the vulnerable line of code (& maybe the lines before it too since most of them have comments)
#   Parse: File(s)
#   Can ignore: io.c,std_testcase.h, std_testcase_io.h files
#   So, just get the files that have the CWEID in them (may contain >1)...
#   Parse <a target="_blank" href='testcases/000/120/623/CWE78_OS_Command_Injection__wchar_t_connect_socket_w32_execvp_68a.c'>
#   <a target="_blank" href='testcases/000/120/623/CWE78_OS_Command_Injection__wchar_t_connect_socket_w32_execvp_68b.c'>
#   Prepend 'https://samate.nist.gov/SARD/' 
#   Redirect for each https://samate.nist.gov/SARD/testcases/000/120/623/CWE78_OS_Command_Injection__wchar_t_connect_socket_w32_execvp_68b.c  ||  view-source:https://samate.nist.gov/SARD/testcases/000/120/623/CWE78_OS_Command_Injection__wchar_t_connect_socket_w32_execvp_68b.c
#   Go to line number
#   Parse/save/write line
get_vul_line_num_from_SARD()



# Next step, once we have all the vul line numbers per SARD,
# walk through the parsed, raw files,
# Put the slices that contain vulnerabilities in one file
# place other slices in separate file
# Optional: validate vulnerable syntax in there







