
def getAvgLength(arr):
    """
        Return avg length of the inner arrays within an array,
        and the list of all the lengths in case you want to pick a value other than the avg.
    """
    totalSamples = len(arr)
    totalVectorLen = 0
    vectorLengths = []

    for a in arr:
        v_length = len(a) 
        totalVectorLen += v_length
        vectorLengths.append(v_length)

    vectorLengths.sort()

    meanLen = int(totalVectorLen/totalSamples)
    return meanLen, vectorLengths


def tranformVectorLen_array(X, maxlen, vector_dim=30):
    """
        Transforms the length of inner arrays within an array 
        to 
    """
    fill_0 = [0] * vector_dim
    if (maxlen != 0):
        new_X = []
        for x in X:  
            # len(x) is how many symbols in 1 program.
            if len(x) <  maxlen:
                x = x + [fill_0] * (maxlen - len(x))
                new_X.append(x)
            else:
                # length of vector is > maxlen
                new_X.append(x[:maxlen])
    print ("New Vector Length: ", len(new_X[0]))
    return new_X

def tranformVectorLen_file(raw_traindataSet_path, raw_testdataSet_path, traindataSet_path, testdataSet_path, maxLen, vector_dim, vType='balanced'):
    
    print("Loading data...")
    print("Train set")
    for filename in os.listdir(raw_traindataSet_path):
        if not filename.endswith(".pkl"):
            continue
        if vType not in filename:
            continue
        dataPath = os.path.join(raw_traindataSet_path, filename)
        data = load_data_binary(dataPath, maxLen, vector_dim)
        dataPath = os.path.join(traindataSet_path, "DL_Final_" + filename)
        f_train = open(dataPath, 'wb')
        pickle.dump(data, f_train)
        f_train.close()
    
    print("\nTest set")
    for filename in os.listdir(raw_testdataSet_path):
        if not (vType in filename):
            continue
        if not (filename.endswith(".pkl")):
            continue
        dataPath = os.path.join(raw_testdataSet_path, filename)
        data = load_data_binary(dataPath, maxLen, vector_dim)
        dataPath = os.path.join(testdataSet_path, "DL_Final_" + filename)
        f_test = open(dataPath, 'wb')
        pickle.dump(data, f_test)
        f_test.close()


def load_data_binary(dataSetpath, maxlen, vector_dim):   
    f1 = open(dataSetpath, 'rb')
    print(dataSetpath)
    data = pickle.load(f1)
    X = data[0]
    f1.close()
    cut_count = 0
    fill_0_count = 0
    no_change_count = 0
    fill_0 = [0]*vector_dim
    totallen = 0
    threshold = maxlen * vector_dim
    print ("threshold: " ,threshold)
    if (maxlen != 0):
        new_X = []
        for x in X:  
             #len(x) is how many symbols in 1 program. ex. 79 
            if len(x) <  maxlen:
                x = x + [fill_0] * (maxlen - len(x))
                new_X.append(x)
                fill_0_count += 1

            elif len(x) == maxlen:
                new_X.append(x)
                no_change_count += 1
                    
            else:
                startpoint = int(threshold - round(maxlen / 2.0))
                endpoint =  int(startpoint + maxlen)
                if startpoint < 0:
                    startpoint = 0
                    endpoint = maxlen
                if endpoint >= len(x):
                    startpoint = -maxlen
                    endpoint = None
                new_X.append(x[startpoint:endpoint])
                cut_count += 1
            totallen = totallen + len(x)
    X = new_X
    print ("New Vector Length: ", len(X[0]))
    data[0] = X
    return data
