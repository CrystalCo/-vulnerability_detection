
"""
    The W2V data was transformed from 2D to 1D in file transform_W2V_data_for_DL_Granular.py.
    See that file for details on how data was transformed, and to see an example of the 
    DetectVulType class being used.
"""

import gc, os, sys

VUL_PATH = os.environ.get('VUL_PATH')
sys.path.insert(1, VUL_PATH)

from SYSE_2_vulnerabilityType.DetectVulType import DetectVulType
from utils.DLCustomModels import create_bgru_model, create_blstm_model
from utils.utils import getDataset

RANDOMSEED = 1099
CLASS_TYPE = 'Granular_162'
MODEL_TYPE = 'bgru'
VECTOR_TRANSFORMER='w2v'
LAYERS = 2
DROPOUT = 0.2
BATCHSIZE = 64
EPOCHS = 60

vectorRootPath = os.path.join('data','DLvectors')
vectorTrainPath_flat = os.path.join(vectorRootPath,'train_162classes_flattened')
vectorTestPath_flat = os.path.join(vectorRootPath,'test_162classes_flattened')
inputRootPath = os.path.join('data', 'DLinputs')
dlInputsTrainPath_flat = os.path.join(inputRootPath,'train_162classes_flattened')
dlInputsTestPath_flat = os.path.join(inputRootPath,'test_162classes_flattened')
w2vmodelPath = os.path.join('w2vModel','model','w2vModel_ALL')

checkpoint_dir = './ckpt_%s_%s_%s_%s' % (VECTOR_TRANSFORMER, MODEL_TYPE, str(BATCHSIZE), CLASS_TYPE)
model_name = '%s_%s_batch=%s_seed=%s_epochs=%s_%s' % (MODEL_TYPE.upper(), VECTOR_TRANSFORMER.upper(), BATCHSIZE, RANDOMSEED, EPOCHS, CLASS_TYPE)
metrics_path = os.path.join(f'{VECTOR_TRANSFORMER}Model', 'metrics', MODEL_TYPE)
weights_path = os.path.join('model', model_name + 'weights')

dvt = DetectVulType(build_model=create_bgru_model, metricsPath=metrics_path,
                    randomSeed=RANDOMSEED, layers=LAYERS, weightpath=weights_path,
                    batch_size=BATCHSIZE, m_epochs=EPOCHS, modelName=model_name, 
                    vectorTrainPath=vectorTrainPath_flat, vectorTestPath=vectorTestPath_flat,
                    inputsTrainPath=dlInputsTrainPath_flat, inputsTestPath=dlInputsTestPath_flat,
                    checkpoint_dir=checkpoint_dir)

data = getDataset(dvt.vectorTrainPath)
VECTOR_SIZE = len(data[0][0])
del data
gc.collect()

dvt.vector_size = VECTOR_SIZE
dvt.avg = 1
print(f'Avg: {dvt.avg} Vector: {dvt.vector_size}')
dvt.reset_model(weights_path)
dvt.encodeLabels()
dvt.saveKeyData(dvt.vectorTrainPath, dvt.inputsTrainPath)
dvt.saveKeyData(dvt.vectorTestPath, dvt.inputsTestPath)
print(f'Density units: {dvt.density_units}. Vector size: {dvt.vector_size}')
dvt.build_and_fit()
dvt.predict_and_score()



############# BLSTM on Granular Samples #############
MODEL_TYPE = 'blstm'
checkpoint_dir = './ckpt_%s_%s_%s_%s' % (VECTOR_TRANSFORMER, MODEL_TYPE, str(BATCHSIZE), CLASS_TYPE)
model_name = '%s_%s_batch=%s_seed=%s_epochs=%s_%s' % (MODEL_TYPE.upper(), VECTOR_TRANSFORMER.upper(), BATCHSIZE, RANDOMSEED, EPOCHS, CLASS_TYPE)
metrics_path = os.path.join(f'{VECTOR_TRANSFORMER}Model', 'metrics', MODEL_TYPE)
weights_path = os.path.join('model', model_name + 'weights')

dvt = DetectVulType(build_model=create_blstm_model,
                    metricsPath=metrics_path,
                    randomSeed=RANDOMSEED, m_epochs=EPOCHS,
                    batch_size=BATCHSIZE, modelName=model_name, 
                    vectorTrainPath=vectorTrainPath_flat, vectorTestPath=vectorTestPath_flat, 
                    inputsTrainPath=dlInputsTrainPath_flat, inputsTestPath=dlInputsTestPath_flat,
                    checkpoint_dir=checkpoint_dir, weightpath=weights_path)

# Uncomment following lines if running BLSTM only to get the needed variables:
# data = getDataset(dvt.vectorTrainPath)
# dvt.vector_size = len(data[0][0])
# del data
# gc.collect()

dvt.avg = 1
dvt.vector_size = VECTOR_SIZE
dvt.reset_check_weights(weights_path)
dvt.encodeLabels()
print(f'Density units: {dvt.density_units}. Vector size: {dvt.vector_size}')
dvt.build_and_fit()
dvt.predict_and_score()
