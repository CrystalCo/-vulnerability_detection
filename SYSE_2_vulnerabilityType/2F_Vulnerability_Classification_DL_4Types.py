"""
    The W2V data was transformed from 2D to 1D in file transform_W2V_data_for_DL_Granular.py.
    See that file for details on how data was transformed, and to see an example of the 
    DetectVulType class being used.
"""

import gc, os, sys

VUL_PATH = os.environ.get('VUL_PATH')
sys.path.insert(1, VUL_PATH)

from SYSE_2_vulnerabilityType.DetectVulType import DetectVulType
from utils.Word2VecModel import Word2VecModel
from utils.DLCustomModels import create_bgru_model, create_blstm_model
from utils.utils import getDataset

VUL_TYPE = 'AE'
RANDOMSEED = 1099
CLASS_TYPE = '162_%s' % VUL_TYPE
MODEL_TYPE = 'bgru'
VECTOR_TRANSFORMER='w2v'
LAYERS = 2
DROPOUT = 0.2
BATCHSIZE = 64
EPOCHS = 60

vectorRootPath = os.path.join('data','DLvectors')
vectorsALLPath = os.path.join(vectorRootPath, f'{VUL_TYPE}_vectors')
vectorTrainPath = os.path.join(vectorRootPath, f'train_162_{VUL_TYPE}')
vectorTestPath = os.path.join(vectorRootPath, f'test_162_{VUL_TYPE}')
# vectorTrainPath_flat = os.path.join(vectorRootPath, f'train_162_{VUL_TYPE}_flattened')
# vectorTestPath_flat = os.path.join(vectorRootPath, f'test_162_{VUL_TYPE}_flattened')
inputsRootPath = os.path.join('data', 'DLinputs')
dlInputsTrainPath = os.path.join(inputsRootPath, f'train_162_{VUL_TYPE}')
dlInputsTestPath = os.path.join(inputsRootPath, f'test_162_{VUL_TYPE}')
# dlInputsTrainPath_flat = os.path.join(inputsRootPath, f'train_162_{VUL_TYPE}_flattened')
# dlInputsTestPath_flat = os.path.join(inputsRootPath, f'test_162_{VUL_TYPE}_flattened')
# w2vmodelPath = os.path.join('w2vModel','model','w2vModel_ALL')

checkpoint_dir = './ckpt_%s_%s_%s_%s' % (VECTOR_TRANSFORMER, MODEL_TYPE, str(BATCHSIZE), CLASS_TYPE)
model_name = '%s_%s_batch=%s_seed=%s_epochs=%s_%s' % (MODEL_TYPE.upper(), VECTOR_TRANSFORMER.upper(), BATCHSIZE, RANDOMSEED, EPOCHS, CLASS_TYPE)
metrics_path = os.path.join(f'metrics', MODEL_TYPE)
weights_path = os.path.join('model', model_name + 'weights')
w2vmodelPath = os.path.join('w2vModel','model', f'w2vModel_{VUL_TYPE}')
tokens_path = os.path.join('data', 'token', VUL_TYPE)

dvt = DetectVulType(build_model=create_bgru_model, useGenerator=True, 
    transformer_model=Word2VecModel, transformerPath=w2vmodelPath, 
    metricsPath=metrics_path, randomSeed=RANDOMSEED, window=3, m_epochs=EPOCHS, 
    modelName=model_name, batch_size=BATCHSIZE, mask=False, dropout=DROPOUT, layers=LAYERS,
    tokensPath=tokens_path, vectorsALLPath=vectorsALLPath, vectorRootPath=vectorRootPath, 
    vectorTrainPath=vectorTrainPath, vectorTestPath=vectorTestPath, 
    inputsTrainPath=dlInputsTrainPath, inputsTestPath=dlInputsTestPath,
    checkpoint_dir=checkpoint_dir, weightpath=weights_path)


print('Starting %s & BGRU' % VUL_TYPE)

# Reset if need be
dvt.reset_checkpoint_and_weights(dvt.weightpath)

# scrape data only from file
# all_data = [ [], [], [], [], [], [], [] ]
# slicefile = 'Arithmetic expression.txt'
# all_tokensPath = os.path.join(dvt.tokensPath, 'ALL_tokens.pkl') # save to data/token/vul_type/
# dvt.tokenizeSlicesPerFile(slicefile, all_tokensPath)

# train W2V model
dvt.init_transformer()
# Fit transformer & transform our data
dvt.fit_transform(dvt.transformerPath, dvt.tokensPath, dvt.vectorsALLPath, getBalanced=False)

# Flatten 3D vectors to 2D
newALLpath = os.path.join('data', 'DLvectors', 'AE_vectors_flattened')
dvt.flatten_vectors(newALLpath, pcaTransformVulType=None)
dvt.avg = 1

# Split data into training and test set
dvt.splitTrainTest(dvt.vectorsALLPath, None)
# Average out the row length per sample based on focuspointer
dvt.tranformDimsByFocus()

# Build dl model & predict results
dvt.run_starting_from_saveKeyData(dvt.inputsTrainPath, dvt.inputsTestPath)



# transformer_path = os.path.join('w2vModel', 'model', 'API')
# transformer_path = os.path.join('w2vModel', 'model', 'AU')
# transformer_path = os.path.join('w2vModel', 'model', 'PTR')
