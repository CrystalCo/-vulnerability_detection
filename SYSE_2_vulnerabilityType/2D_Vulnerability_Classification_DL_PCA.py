#!/usr/bin/env python
# coding: utf-8

import gc, os, sys

VUL_PATH = os.environ.get('VUL_PATH')
sys.path.insert(1, VUL_PATH)

from SYSE_2_vulnerabilityType.DetectVulType import DetectVulType
from utils.DLCustomModels import create_bgru_model, create_blstm_model
from utils.utils import getDataset

### W2V + BGRU Granular on PCA transformed data
print('Starting PCA script for W2V & BGRU granular ids for 60 epochs...')
RANDOMSEED = 1099
CLASS_TYPE = 'Granular_PCA_162'
MODEL_TYPE = 'bgru'
VECTOR_TRANSFORMER='w2v'
OPTIMIZER = 'adam'
LAYERS = 2
DROPOUT = 0.2
BATCHSIZE = 64
EPOCHS = 60

vectorRootPath = os.path.join('data','DLvectors')
vectorTrainPath = os.path.join(vectorRootPath, 'train_162classes')
vectorTestPath = os.path.join(vectorRootPath, 'test_162classes')
inputsRootPath = os.path.join('data', 'DLinputs')
pca_vector_train_path = os.path.join(vectorRootPath, 'PCA_train_162classes')
pca_vector_test_path = os.path.join(vectorRootPath, 'PCA_test_162classes')
pca_inputs_train_path= os.path.join(inputsRootPath, 'PCA_train_162classes')
pca_inputs_test_path= os.path.join(inputsRootPath, 'PCA_test_162classes')

checkpoint_dir = './ckpt_%s_%s_%s_%s' % (VECTOR_TRANSFORMER, MODEL_TYPE, str(BATCHSIZE), CLASS_TYPE)
model_name = '%s_%s_batch=%s_seed=%s_epochs=%s_%s' % (MODEL_TYPE.upper(), VECTOR_TRANSFORMER.upper(), BATCHSIZE, RANDOMSEED, EPOCHS, CLASS_TYPE)
metrics_path = os.path.join(f'metrics', MODEL_TYPE)
weights_path = os.path.join('model', model_name + 'weights')

dvt = DetectVulType(build_model=create_bgru_model, useGenerator=True,
                    metricsPath=metrics_path, randomSeed=RANDOMSEED,
                    m_epochs=EPOCHS, batch_size=BATCHSIZE, modelName=model_name,
                    mask=False, dropout=DROPOUT, optimizer=OPTIMIZER,
                    vectorTrainPath=pca_vector_train_path,
                    inputsTrainPath=pca_inputs_train_path, inputsTestPath=pca_inputs_test_path, 
                    checkpoint_dir=checkpoint_dir, weightpath=weights_path)

data = getDataset(dvt.vectorTrainPath)
VECTOR_SIZE = len(data[0][0])
dvt.vector_size = VECTOR_SIZE
del data
gc.collect()

dvt.avg = 1
dvt.hotEncodeLabels()
print(f'Density units: {dvt.density_units}. Vector size: {dvt.vector_size}')
dvt.reset_checkpoint_and_weights(weights_path)
dvt.build_and_fit()
dvt.predict_and_score()






# ## W2V + BLSTM Granular
print('Starting PCA script for W2V & BLSTM granular ids for 60 epochs...')
RANDOMSEED = 1099
CLASS_TYPE = '157Granular_PCA'
MODEL_TYPE = 'blstm'
VECTOR_TRANSFORMER='w2v'
OPTIMIZER = 'adam' 
LAYERS = 2
DROPOUT = 0.2 
BATCHSIZE = 64
EPOCHS = 60
vectorRootPath = os.path.join('data','DLvectors')
pca_vectors_train_path = os.path.join(vectorRootPath, 'PCA_train_157classes')
pca_vectors_test_path = os.path.join(vectorRootPath, 'PCA_test_157classes')
dlInputs = os.path.join('data', 'DLinputs')
pca_inputs_train_path = os.path.join(dlInputs,'PCA_train_157classes')
pca_inputs_test_path = os.path.join(dlInputs,'PCA_test_157classes')

checkpoint_dir = './ckpt_%s_%s_%s_%s' % (VECTOR_TRANSFORMER, MODEL_TYPE, str(BATCHSIZE), CLASS_TYPE)
model_name = '%s_%s_batch=%s_seed=%s_epochs=%s_%s' % (MODEL_TYPE.upper(), VECTOR_TRANSFORMER.upper(), BATCHSIZE, RANDOMSEED, EPOCHS, CLASS_TYPE)
metrics_path = os.path.join(f'metrics', MODEL_TYPE)
weights_path = os.path.join('model', model_name + OPTIMIZER + str(RANDOMSEED))

dvt = DetectVulType(build_model=create_blstm_model, useGenerator=True, layers=LAYERS,
                    metricsPath=metrics_path, randomSeed=RANDOMSEED,
                    m_epochs=EPOCHS, batch_size=BATCHSIZE, modelName=model_name,
                    mask=False, dropout=DROPOUT, optimizer=OPTIMIZER,
                    vectorTrainPath=pca_vectors_train_path, vectorTestPath=pca_vectors_test_path, 
                    inputsTrainPath=pca_inputs_train_path, inputsTestPath=pca_inputs_test_path, 
                    checkpoint_dir=checkpoint_dir, weightpath=weights_path)
dvt.avg = 1
dvt.vector_size = VECTOR_SIZE
dvt.encodeLabels() # requires vectorTrainPath
print(f'Density units: {dvt.density_units}. Vector size: {dvt.vector_size}')
dvt.reset_checkpoint_and_weights(weights_path)
dvt.build_and_fit() # requires inputsTrainPath
dvt.predict_and_score()

