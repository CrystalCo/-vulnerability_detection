import os, sys

import pandas as pd
import numpy as np
from sklearn.model_selection import GridSearchCV
from sklearn.neighbors import KNeighborsClassifier
from sklearn.pipeline import Pipeline

#### Setting variables
vType = "ALL"
randomSeed = 1099
numSamples = 420627
slicePath = './data/slicesSource/'
tokenPath = './data/tokenD2V/SARD/'
multiclasspath = './data/CVE/SARD_CVE_to_groups.csv'
# Training & testing split, where training is balanced & testing is not
vectorTrainPath = './data/MLvectors/train/'
vectorTestPath = './data/MLvectors/test/'
# Updating path
VUL_PATH = os.environ.get('VUL_PATH') # Must insert path to directory above in order to access files in other folders
sys.path.insert(1, VUL_PATH)

#### Preprocessing
print('TOKENIZING SLICES...')
from SYSE_1_isVulnerable.slicesToTokens import tokenizeSlices_Multiclass
testcase_ids, testcase_ids_per_group = tokenizeSlices_Multiclass(slicePath, tokenPath, multiclasspath, numSamples)

print('\nSPLITTING INTO TRAINING/TESTING SETS...')
from SYSE_1_isVulnerable.splitTrainTest import splitTrainTest
splitTrainTest(vType, tokenPath, vectorTrainPath, vectorTestPath, randomSeed, split = 0.8 )


#### Grid Search for best parameters on D2V & KNN models
from SYSE_2_vulnerabilityType.Doc2VecModel import Doc2VecModel
pipe = Pipeline([('doc2vec', Doc2VecModel()), ('knn', KNeighborsClassifier())])
param_grid = {'doc2vec__window': np.arange(1, 5),
              'doc2vec__epochs': [5, 10],
              'doc2vec__vector_size': [30, 50, 60],
              'knn__n_neighbors': np.arange(1, 6),
              'knn__weights': ['distance'],
              'knn__p': [2], # 2 = euclidean distance
}
grid = GridSearchCV(pipe, 
                        param_grid=param_grid,
                        scoring='accuracy',
                        return_train_score=True,
                        verbose=1)

print('\nGRID SEARCH ON TRAINING DATASET COMMENCING...')
from SYSE_2_vulnerabilityType.MLMethods import getDataset
data = getDataset(vectorTrainPath, False, randomSeed)
x_train, y_train = data[0], [d[0] for d in data[-2]]
fitted = grid.fit(x_train, y_train)

print('\nGRID SEARCH ON TRAINING DATASET COMPLETE. RESULTS:\n')
print("Best Parameters: {}\n".format(grid.best_params_))
print("Best accuracy: {}\n".format(grid.best_score_))
print("Finished.")
