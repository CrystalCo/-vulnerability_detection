import os, sys

import pandas as pd
import numpy as np
from sklearn.model_selection import GridSearchCV
from sklearn.neighbors import KNeighborsClassifier
from sklearn.pipeline import Pipeline


vType = "ALL"
randomSeed = 1099
numSamples = 10
vectorDim = 100 #num of vector cols
slicePath = './data/slicesSource/'
tokenPath = './data/tokenD2V/SARD/'
d2vmodelPath = './d2vModel/model/d2vModel_ALL'
vectorPath =  './data/vectorD2V/'
multiclasspath = './data/CVE/SARD_CVE_to_groups.csv'
# Training & testing split, where training is balanced & testing is not
vectorTrainPath = './data/MLvectors/train/'
vectorTestPath = './data/MLvectors/test/'

# ### Updating path
# Must insert path to directory above in order to access files in other folders
VUL_PATH = os.environ.get('VUL_PATH')
sys.path.insert(1, VUL_PATH)

# ### A. slicesToTokens.py
# from SYSE_1_isVulnerable.slicesToTokens import tokenizeSlices_Multiclass
# testcase_ids, testcase_ids_per_group = tokenizeSlices_Multiclass(slicePath, tokenPath, multiclasspath, numSamples)

# ### B. splitTrainTest.py
# from SYSE_1_isVulnerable.splitTrainTest import splitTrainTest
# splitTrainTest(vType, tokenPath, vectorTrainPath, vectorTestPath, randomSeed, split = 0.8 )

# ### C. get data
from MLMethods import getDataset
data = getDataset(vectorTrainPath, False, randomSeed)


param_grid = {'doc2vec__window': [1],
              'doc2vec__epochs': [1],
              'doc2vec__vector_size': [10, 100],
              # 'knn__n_neighbors': np.arange(1, 9, 1),
              'knn__n_neighbors': [4],
              'knn__weights': ['distance'],
              'knn__p': [2], # 1 = manhattan distance, 2 = euclidean distance
}

from SYSE_2_vulnerabilityType.Doc2VecModel import Doc2VecModel
pipe_log = Pipeline([('doc2vec', Doc2VecModel()), ('knn', KNeighborsClassifier())])

log_grid = GridSearchCV(pipe_log, 
                        param_grid=param_grid,
                        scoring='accuracy',
                        return_train_score=True,
                        verbose=1)

# does this need to be in x,y format?
fitted = log_grid.fit(data[0], data[-2])

# Best parameters
print("Best Parameters: {}\n".format(log_grid.best_params_))
print("Best accuracy: {}\n".format(log_grid.best_score_))
print("Finished.")
