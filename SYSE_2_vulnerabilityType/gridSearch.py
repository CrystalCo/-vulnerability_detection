import os, sys

import pandas as pd
import numpy as np
from sklearn.model_selection import GridSearchCV
from sklearn.neighbors import KNeighborsClassifier
from sklearn.pipeline import Pipeline


vType = "ALL"
randomSeed = 1099
numSamples = 200
slicePath = './data/slicesSource/'
tokenPath = './data/tokenD2V/SARD/'
d2vmodelPath = './d2vModel/model/d2vModel_ALL'
vectorPath =  './data/vectorD2V/'
multiclasspath = './data/CVE/SARD_CVE_to_groups.csv'
# Training & testing split, where training is balanced & testing is not
vectorTrainPath = './data/MLvectors/train/'
vectorTestPath = './data/MLvectors/test/'

# ### Updating path
# Must insert path to directory above in order to access files in other folders
VUL_PATH = os.environ.get('VUL_PATH')
sys.path.insert(1, VUL_PATH)

# ### A. slicesToTokens.py
# from SYSE_1_isVulnerable.slicesToTokens import tokenizeSlices_Multiclass
# testcase_ids, testcase_ids_per_group = tokenizeSlices_Multiclass(slicePath, tokenPath, multiclasspath, numSamples)

# ### B. splitTrainTest.py
# from SYSE_1_isVulnerable.splitTrainTest import splitTrainTest
# splitTrainTest(vType, tokenPath, vectorTrainPath, vectorTestPath, randomSeed, split = 0.8 )

# ### C. Get Data
from SYSE_2_vulnerabilityType.MLMethods import getDataset
data = getDataset(vectorTrainPath, False, randomSeed)

# ### D. 
param_grid = {'doc2vec__window': np.arange(1, 15, 2),
              'doc2vec__epochs': [1, 2, 3, 4, 5],
              'doc2vec__vector_size': [10, 50, 100, 200],
              'knn__n_neighbors': np.arange(1, 9, 1),
              'knn__weights': ['distance', 'uniform'],
              'knn__p': [1, 2], # 1 = manhattan distance, 2 = euclidean distance
}

from SYSE_2_vulnerabilityType.Doc2VecModel import Doc2VecModel
pipe = Pipeline([('doc2vec', Doc2VecModel()), ('knn', KNeighborsClassifier())])

grid = GridSearchCV(pipe, 
                        param_grid=param_grid,
                        scoring='accuracy',
                        return_train_score=True,
                        verbose=1)

# does this need to be in x,y format?
x_train, y_train = data[0], [d[0] for d in data[-2]]
fitted = grid.fit(x_train, y_train)

# Best parameters
print("Best Parameters: {}\n".format(grid.best_params_))
print("Best accuracy: {}\n".format(grid.best_score_))
print("Finished.")
