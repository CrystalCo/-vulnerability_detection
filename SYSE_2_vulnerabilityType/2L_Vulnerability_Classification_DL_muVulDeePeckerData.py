"""
    Testing our model on muVulDeePecker's dataset, compromised of:
     181,641 pieces of code, 138,522 are non-vulnerable and the other 
     43,119 are vulnerable and contain 40 types of vulnerabilities in total. 
     This dataset is available at https://github.com/muVulDeePecker/muVulDeePecker.

     We're only using their vulnerable samples and mapping to our IDs here.
"""

import os, sys

VUL_PATH = os.environ.get('VUL_PATH')
sys.path.insert(1, VUL_PATH)

from SYSE_2_vulnerabilityType.VulnerabilityClassification import VulnerabilityClassification
from utils.Word2VecModel import Word2VecModel
from utils.DLCustomModels import create_bgru_model, create_blstm_model
from utils.utils import drop_non_vulnerable_samples, getDatasetSectionByIndex, print_samples_avg_len_per_class, set_newdataset


def main(VUL_TYPE, slicefile, vectorsALLdir='ALL_vectors', MODEL_TYPE='bgru', model_fn=create_bgru_model, min_num=None):
    RANDOMSEED = 1099
    CLASS_TYPE = f'{VUL_TYPE}_muVDP'
    VECTOR_TRANSFORMER='w2v'
    BATCHSIZE = 64
    LAYERS = 1
    DROPOUT = 0.5
    EPOCHS = 10
    OPTIMIZER = 'RMSProp'
    ACTIVATION_FN = 'tanh'
    RECURRENT_ACTIVATION = 'sigmoid'
    DENSE_ACT_FN = 'softmax'
    UNITS = 500
    METRICS = ['CategoricalAccuracy', 'Recall']

    inputsRootPath = os.path.join('data', 'DLinputs')
    vectorRootPath = os.path.join('data','DLvectors')
    vectorsALLPath = os.path.join(vectorRootPath, vectorsALLdir)
    # Rather than taking up memory by creating separate folders for each type, 
    # we can overwrite each one since the upsampled collection is < the fullset.
    vectorTrainPath = os.path.join(vectorRootPath, f'train')
    vectorTestPath = os.path.join(vectorRootPath, f'test')
    dlInputsTrainPath = os.path.join(inputsRootPath, f'train')
    dlInputsTestPath = os.path.join(inputsRootPath, f'test')

    checkpoint_dir = './ckpt_%s_%s_%s_%s' % (VECTOR_TRANSFORMER, MODEL_TYPE, str(BATCHSIZE), CLASS_TYPE)
    model_name = '%s_%s_epochs_%s_opt_%s_%s_%s_%sunits_%s' % (MODEL_TYPE.upper(), VECTOR_TRANSFORMER.upper(), EPOCHS, OPTIMIZER, ACTIVATION_FN, DENSE_ACT_FN, UNITS, CLASS_TYPE)
    metrics_path = os.path.join(f'metrics', MODEL_TYPE)
    weights_path = os.path.join('model', model_name + 'weights')
    w2vmodelPath = os.path.join('w2vModel','model', f'w2vModel_{VUL_TYPE}')
    all_tokens_path = os.path.join('data', 'tokens_muVDP')

    dvt = VulnerabilityClassification(build_model=model_fn, useGenerator=True,
        transformer_model=Word2VecModel, transformerPath=w2vmodelPath,
        metricsPath=metrics_path, randomSeed=RANDOMSEED, window=3, m_epochs=EPOCHS,
        modelName=model_name, batch_size=BATCHSIZE, mask=True, dropout=DROPOUT, layers=LAYERS,
        tokensPath=all_tokens_path, vectorsALLPath=vectorsALLPath,
        vectorTrainPath=vectorTrainPath, vectorTestPath=vectorTestPath,
        inputsTrainPath=dlInputsTrainPath, inputsTestPath=dlInputsTestPath,
        checkpoint_dir=checkpoint_dir, weightpath=weights_path, optimizer=OPTIMIZER,
        activation_fn=ACTIVATION_FN, recurrent_activation=RECURRENT_ACTIVATION, dense_activation_fn=DENSE_ACT_FN,
        units=UNITS, metrics=METRICS)

    print('Starting %s & %s' % (CLASS_TYPE, MODEL_TYPE))

    # Reset if need be
    print('Resetting checkpoint and weights...')
    dvt.reset_checkpoint_and_weights(dvt.weightpath)

    # tokenize the vulnerable samples
    # print('\nTokenizing slices...')
    # dvt.tokenizeSlicesPerFile(slicefile, dvt.tokensPath, focusPointerIndex=-1)

    # Fit W2V transformer & transform our data
    # print('\nTraining W2V model...')
    # dvt.init_transformer()
    # dvt.fit_transform(dvt.transformerPath, dvt.tokensPath, dvt.vectorsALLPath, getBalanced=False)

    # Drop non-vulnerable samples
    # outputpath = os.path.join(vectorRootPath, 'ALL_vulnerable_vectors_muVDP')
    # drop_non_vulnerable_samples(dvt.vectorsALLPath, outputpath)
    # dvt.vectorsALLPath = outputpath

    # Get the mapping of labels
    # import pandas as pd
    # labelspath = os.path.join('data', 'CWE', 'label2CWE_muVDP.txt')
    # labels = pd.read_csv(labelspath, sep='\t', header=0)

    # Update the labels, keeping only the labels that match ours
    # set_newdataset(dvt.vectorsALLPath, labels)

    ## Split data into training and test set
    # print('\nSplitting train/test...')
    # dvt.splitTrainTest(dvt.vectorsALLPath, min_num=min_num, vType=VUL_TYPE, dropOtherVtypes=False)

    # To flatten dataset, we must average out the dimension of the dataset which contains the tokens. Averages out the row length per sample based on focuspointer.
    # print('\nAdjusting Vector Length...')
    # dvt.get_avg_length(dvt.vectorsALLPath, False)
    # print_samples_avg_len_per_class(dvt.avg, dvt.vectorsALLPath, get_balanced=False)
    # dvt.adjustVectorLength() # outputs to data/DLinput

    # Flatten 3D vectors to 2D
    # dvt.flatten_vectors(dvt.inputsTrainPath, pcaTransformVulType=False)
    # dvt.flatten_vectors(dvt.inputsTestPath, pcaTransformVulType=False)

    # Don't adjust the row length since they're already flattened. Manually set the new vector length & avg.
    dvt.vector_size = len(getDatasetSectionByIndex(dvt.inputsTrainPath, True, index=0)[0])
    dvt.avg = 1
    dvt.density_units = 41
    print(f'Avg: {dvt.avg}\tVector length: {dvt.vector_size}\n')

    # Build dl model & predict results
    # dvt.hotEncodeLabels()
    # dvt.saveKeyData(dvt.inputsTrainPath)
    # dvt.saveKeyData(dvt.inputsTestPath)
    print('\nBuilding/fitting DL model...')
    dvt.build_and_fit() # output_signature_shape_y=41)
    print('\nPredicting & Scoring...')
    dvt.predict_and_score()

    print('\n\n\n\n\n\n')


VUL_TYPE = 'ALL'
sourcefile = 'mvd.txt'
# vectorsALLdir='subsample_mu'
vectorsALLdir='ALL_vectors_muVDP'
min_number = None

### BLSTM ###
main(VUL_TYPE, sourcefile, vectorsALLdir=vectorsALLdir, MODEL_TYPE='blstm', model_fn=create_blstm_model, min_num=min_number)

### BGRU ###
# main(VUL_TYPE, sourcefile, vectorsALLdir=vectorsALLdir, MODEL_TYPE='bgru', min_num=min_number)
