import os, sys
from shutil import rmtree

VUL_PATH = os.environ.get('VUL_PATH')
sys.path.insert(1, VUL_PATH)

import keras
import numpy as np
import tensorflow as tf

from SYSE_1_isVulnerable.slicesToTokens import tokenizeSlices_Multiclass
from SYSE_1_isVulnerable.splitTrainTest import splitTrainTestCategorical
from SYSE_1_isVulnerable.adjustVectorLen import meanLen
from SYSE_1_isVulnerable.saveKeyData import saveKeyDataMulticlass
from SYSE_1_isVulnerable.DLModel import buildBGRU2, fitModel2
from SYSE_1_isVulnerable.ConfusionMatrix import getConfusionMatrix_Multiclass
from SYSE_1_isVulnerable.DLPrediction import predictMulticlassLabel
from SYSE_1_isVulnerable.evaluateModels import roc_auc_score_multiclass
from utils.Doc2VecModel import Doc2VecModel
from utils.Word2VecModel import Word2VecModel
from utils.DLCustomModels import make_or_restore_model
from utils.transformDataDimensions import tranformDimsByFocus
from utils.utils import downsample, flatten_categories, getDataset, encode_target, save_data_to_file

vType = "ALL"
tokenPath = os.path.join('data', 'tokenD2V') # files in here replaced the functions index with focus pointer index; ALL_tokens.pkl
vectorPath = os.path.join('data','vector')
vectorTypePath = os.path.join('data','DLvectors')
vectorBalancedPath = os.path.join(vectorTypePath, 'ALL_balanced')
vectorTrainPath = os.path.join(vectorTypePath,'train')
vectorTestPath = os.path.join(vectorTypePath,'test')
dlInputsTrainPath = os.path.join('data','DLinputs','train')
dlInputsTestPath  = os.path.join('data','DLinputs','test')
w2vmetricPath = os.path.join('w2vModel','metrics')
w2vmodelPath = os.path.join('w2vModel','model','w2vModel_ALL')
d2vmetricPath = os.path.join('d2vModel','metrics')
d2vmodelPath = os.path.join('d2vModel','model','d2vModel_ALL')
metrics = ['CategoricalAccuracy', 'Recall', 'TruePositives', 'TrueNegatives', 'FalsePositives', 'FalseNegatives']

class DetectVulType():
    
    def __init__(self, build_model, transformer_model=None, transformerPath=w2vmodelPath,  metricsPath=w2vmetricPath, vector_size=30, randomSeed=109, alpha=0.05, t_epochs=15, sample=0.001, workers=-1, negative=10, window=3, m_epochs=10, modelName='BGRU_ALL', metrics=['CategoricalAccuracy', 'Recall'], tokenPath=tokenPath, vectorBalancedPath=vectorBalancedPath, vectorTypePath=vectorTypePath, vectorTrainPath=vectorTrainPath, vectorTestPath=vectorTestPath, inputsTrainPath=dlInputsTrainPath, inputsTestPath=dlInputsTestPath,checkpoint_dir='./ckpt'):
        # Transformer variables
        self.transformer_model = transformer_model
        self.transformerPath = transformerPath
        self.transformer = None
        self.avg = 0
        self.randomSeed = randomSeed
        self.tokenPath = tokenPath 
        self.vector_size = vector_size
        self.alpha = alpha
        self.t_epochs = t_epochs
        self.sample = sample
        self.workers = workers
        self.negative = negative
        self.window = window
        # Estimator Variables
        self.build_model = build_model
        self.modelName = modelName
        self.model = None
        self.optimizer = 'adam' #can be changed to ‘adamax’
        self.layers = 2
        self.dropout = 0.2 
        self.batch_size = 32
        self.m_epochs = m_epochs
        self.activation_fn = 'softmax'
        self.weightpath = os.path.join('model', modelName + self.optimizer + str(self.randomSeed))
        self.metrics = metrics
        self.metricsPath = metricsPath
        self.vectorTypePath = vectorTypePath
        self.vectorBalancedPath = vectorBalancedPath
        self.vectorTrainPath = vectorTrainPath
        self.vectorTestPath = vectorTestPath
        self.inputsTrainPath = inputsTrainPath
        self.inputsTestPath = inputsTestPath
        self.transformerPath = transformerPath
        self.checkpoint_dir = checkpoint_dir
        
    def tokenizeSlices(self, numSamples=420627):
        """  
            Initializes the dataset by turning the source code slices into tokens. 
            numSamples := int; Max Num of slice samples from each file
        """
        slicePath = os.path.join('data','slicesSource')
        tPath = os.path.join(self.tokenPath,'SARD')
        multiclasspath = os.path.join('data','CVE','SARD_CVE_to_groups.csv')
        if os.path.exists(tPath) and os.listdir(tPath):
            rmtree(tPath)
            os.mkdir(tPath)
        tokenizeSlices_Multiclass(slicePath, tPath, multiclasspath, numSamples)

    def downsample(self):        
        print('\nDOWNSAMPLING THE DATA...')
        all_data = getDataset(self.tokenPath, False, self.randomSeed)
        downsampled_data = downsample(all_data, 664, 1000)
        downsampled_data = downsample(downsampled_data, 710, 1000)
        downsampled_data = downsample(downsampled_data, 707, 1000)
        downsampled_data = downsample(downsampled_data, 682, 1000)

        print('SAVING BALANCED, DOWNSAMPLES DATA TO FILE...')
        save_data_to_file(self.vectorTypePath, 'balanced_vectors.pkl', downsampled_data)

    def flatten_categories(self, dirname, filename):
        """
            Since we are not merging any classes, we'll replace the group id section with the flattened version containing the original label
            Flattens groupid array for all samples into the assigned groupids only.
            Example: [[664, 664], [703, 555]] --> [664, 703]
        """
        all_data = getDataset(dirname, False, self.randomSeed)
        all_data[-2] = flatten_categories(all_data[-2])
        save_data_to_file(dirname, filename, all_data)

    def init_transformer(self):
        print(f'Fitting transformer with paramaters: Seed: {self.randomSeed}, Alpha: {self.alpha}, Epochs: {self.t_epochs}, Sample: {self.sample}, Negative: {self.negative}, Window: {self.window}, Vector length: {self.vector_size}.')
        self.transformer = self.transformer_model(vector_size=self.vector_size, alpha=self.alpha, negative=self.negative, sample=self.sample, epochs=self.t_epochs, seed=self.randomSeed, window=self.window, workers=self.workers)

    def fit_transform(self, modelPath, dataset_path, getBalanced=True, savePath=vectorBalancedPath):
        # Fit on all the data & transform to vectors
        data = getDataset(dataset_path=dataset_path, getBalanced=getBalanced)
        X = data[0]
        self.transformer.fit(X)
        print(f'Transformer fit complete. Transforming tokens to vectors next...')
        self.transformer.save_model(modelPath)
        X = self.transformer.transform(X)
        data[0] = X
        self.savePath = savePath
        print(f'Tokens to vectors complete.  Saving to {self.savePath} as balanced_vectors.pkl')
        save_data_to_file(self.savePath, 'balanced_vectors.pkl', data)
        
    def splitTrainTest(self, savePath):
        # Split into train/test
        splitTrainTestCategorical('balanced', savePath, self.vectorTrainPath, self.vectorTestPath, randomSeed=self.randomSeed)

    def get_avg_length(self):
        self.avg = meanLen(self.vectorTrainPath)

    def adjustVectorLength(self):
        # Adjust vector length TODO: Why do we do the avg instead of all the lines? Will our models perform worse if too many zero-padded vectors?
        self.get_avg_length()
        tranformDimsByFocus(self.vectorTrainPath, self.vectorTestPath, self.inputsTrainPath, self.inputsTestPath, self.avg, self.vector_size)
        print(f'New Vector Length (rows x cols): {self.avg} x {self.vector_size}\n')

    def encodeLabels(self):
        """ Get number of unique classes for density value. """
        train_data = getDataset(self.vectorTrainPath, getBalanced=True)
        categories = np.unique(train_data[-2])
        self.labelEncoder = encode_target(categories)[1]
        self.density_units = categories.shape[0]

    def saveKeyData(self):
        saveKeyDataMulticlass(self.inputsTrainPath, self.labelEncoder)
        saveKeyDataMulticlass(self.inputsTestPath, self.labelEncoder)

    def build_and_fit(self):
        """ builds & fits the estimator """
        # Prepare a directory to store all the checkpoints.
        if not os.path.exists(self.checkpoint_dir):
            os.makedirs(self.checkpoint_dir)

        # Open a strategy scope
        strategy = tf.distribute.MirroredStrategy()
        print('Number of devices: {}'.format(strategy.num_replicas_in_sync))
        with strategy.scope():
            didRestore, myKerasModel = make_or_restore_model(self.checkpoint_dir, self.get_compiled_model)

        if didRestore:
            self.model = myKerasModel
        else:
            # Fit BGRU Model with trained data and save the model for later use
            callbacks = [
                # This callback saves a SavedModel every epoch
                # We include the current epoch in the folder name.
                keras.callbacks.ModelCheckpoint(
                    filepath=self.checkpoint_dir + "/ckpt-{epoch}", save_freq="epoch"
                    )
            ]
            self.model = fitModel2(myKerasModel, self.weightpath, self.inputsTrainPath, self.batch_size, self.avg, self.vector_size, self.randomSeed, self.m_epochs, useGenerator=True, callbacks=callbacks)

    def get_compiled_model(self):
        return self.build_model(self.avg, self.vector_size, self.layers, self.dropout, self.optimizer, self.density_units, activation_fn=self.activation_fn, metrics=self.metrics)

    def predict_and_score(self):
        # Prediction
        self.model.load_weights(self.weightpath)
        _, mypredicted_labels, myreallabels, _ = predictMulticlassLabel(self.model, self.inputsTestPath, self.avg, self.vector_size, self.optimizer, self.modelName, self.randomSeed, self.labelEncoder, saveOutput=True)

        # Confusion Matrix
        getConfusionMatrix_Multiclass(mypredicted_labels, myreallabels, saveFig=False, path=self.metricsPath)

        # ROC
        roc_auc_dict = roc_auc_score_multiclass(myreallabels, mypredicted_labels)
        print(f'\n{self.modelName} ROC AUC Score\n{roc_auc_dict}\n')

    def reset_checkpoint(self):
        """Resets saved DL model and their weights"""
        if os.path.exists(self.checkpoint_dir):
            rmtree(self.checkpoint_dir)

    def reset_model(self, filename):
        for f in os.listdir('model'):
            if filename in f:
                os.remove(f)

    def reset(self, filename):
        self.reset_checkpoint()
        self.reset_model(filename)
    
    def reset_all(self):
        self.reset_checkpoint()
        if len(os.listdir('model')) > 0:
            rmtree('model')
            os.makedirs('model')

    def run_all(self, numSamples=1000):
        """  Runs all the functions in order for initial run. """
        # Delete saved DL models so we don't load in old ones
        self.reset_all()

        # Initializes the dataset
        self.tokenizeSlices(numSamples=numSamples) 
        self.flatten_categories(self.tokenPath, 'ALL_tokens.pkl')

        # Init transformer
        self.init_transformer()

        # Fit transformer & transform our data
        self.fit_transform(self.transformerPath, dataset_path=self.tokenPath, getBalanced=False, savePath=self.vectorBalancedPath)

        # Split data into training and test set
        self.splitTrainTest(self.vectorBalancedPath)

        # Average out the row length per sample based on focuspointer
        self.adjustVectorLength()
        
        # Hot encode labels
        self.encodeLabels()
        self.saveKeyData()

        # Build & fit the model
        self.build_and_fit()

        # Predict and score on test set
        self.predict_and_score()

    def run_starting_from_transformer(self, dataPath, getBalanced=False, savePath=vectorBalancedPath):
        self.init_transformer()
        self.fit_transform(self.transformerPath, dataset_path=dataPath, getBalanced=getBalanced, savePath=savePath)
        self.splitTrainTest(savePath)
        self.adjustVectorLength()
        self.encodeLabels()
        self.saveKeyData()
        self.build_and_fit()
        self.predict_and_score()

    def run_starting_from_model(self):
        self.get_avg_length()
        self.encodeLabels()
        self.saveKeyData()
        self.build_and_fit()
        self.predict_and_score()


def w2v_bgru():
    print("BASE MODEL FOR W2V + BGRU")
    modelName = 'BGRU_W2V_'    
    dvt = DetectVulType(build_model=buildBGRU2, transformer_model=Word2VecModel, metricsPath=w2vmetricPath, metrics=metrics,  
                        transformerPath=w2vmodelPath, vector_size=30, modelName=modelName, vectorBalancedPath=vectorBalancedPath, checkpoint_dir='./ckpt_w2v')
    # dvt.reset(modelName)
    # dvt.run_starting_from_transformer(dataPath=dvt.tokenPath, getBalanced=False, savePath=dvt.vectorBalancedPath)
    dvt.flatten_categories(vectorBalancedPath, 'balanced_vectors.pkl')
    dvt.splitTrainTest(vectorBalancedPath)
    dvt.adjustVectorLength()
    dvt.encodeLabels()
    dvt.saveKeyData()
    dvt.build_and_fit()
    dvt.predict_and_score()
w2v_bgru()

def d2v_bgru():
    print("BASE MODEL FOR D2V + BGRU")
    modelName = 'BGRU_D2V_'
    vectorD2VPath = os.path.join('data','vectorD2V')
    dvt = DetectVulType(build_model=buildBGRU2, transformer_model=Doc2VecModel, metricsPath=d2vmetricPath, metrics=metrics, 
                        transformerPath=d2vmodelPath, vector_size=100, modelName=modelName, vectorBalancedPath=vectorTypePath, checkpoint_dir='./ckpt_d2v')
    dvt.run_starting_from_transformer(dataPath=dvt.vectorTypePath, getBalanced=True, savePath=vectorD2VPath)
# TODO: Work on custom DL Models to account for different dimensions
# d2v_bgru()
