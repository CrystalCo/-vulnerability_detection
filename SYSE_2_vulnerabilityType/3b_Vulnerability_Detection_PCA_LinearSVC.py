#!/usr/bin/env python
# coding: utf-8

### Vulnerability Type Classification using Linear Support Vector Classifer (LinearSVC) for speed optimization ###

import gc, os, sys

from sklearn.svm import LinearSVC

sys.path.insert(1, os.environ.get('VUL_PATH'))

from SYSE_1_isVulnerable.ConfusionMatrix import getConfusionMatrix_Multiclass
from utils.MLMethods import predict_and_score
from utils.utils import getDataset

vectorRootPath = os.path.join('data', 'MLvectors')
pca_vector_train_path = os.path.join(vectorRootPath, 'PCA_train_162classes')
pca_vector_test_path = os.path.join(vectorRootPath, 'PCA_test_162classes')


################################## PCA on full dataset (Granular IDs) #############################
RANDOMSEED = 1099
CLASS_TYPE = 'Granular_PCA_162'
VECTOR_TRANSFORMER='w2v'

##### Get train/test sets to pass to ML model
data = getDataset(pca_vector_train_path, RANDOMSEED=RANDOMSEED)
x_train = data[0]
y_train = data[-2]
assert len(x_train[0]) == len(x_train[-1]), f'vector lengths dont match in x_train. {len(x_train[0])} != {len(x_train[-1])}'

data = getDataset(pca_vector_test_path, RANDOMSEED=RANDOMSEED)
x_test = data[0]
y_test = data[-2]
assert len(x_test[0]) == len(x_test[-1]), f'vector lengths dont match in x_test. {len(x_test[0])} != {len(x_test[-1])}'

del data
gc.collect()

print(f'Length of x_train: {len(x_train)}\nLength of columns: {len(x_train[0])}')
print(f'\nLength of x_test: {len(x_test)}\nLength of columns: {len(x_test[0])}')
print(f'y_test[:3]:\n{y_test[:3]}\nNumber of labels: {len(y_test)}')
assert len(x_train[0]) == len(x_test[0]), f'Feature length of x_train {len(x_train[0])} should match that of x_test {len(x_test[0])}'


##### Linear Support Vector Classifier
print('\nCommencing LinearSVC')
MODEL_TYPE = 'linearSVC'
metrics_path = os.path.join(f'{VECTOR_TRANSFORMER}Model', 'metrics', MODEL_TYPE)
model_name = '%s_%s_seed=%s_%s' % (MODEL_TYPE.upper(), VECTOR_TRANSFORMER.upper(), RANDOMSEED, CLASS_TYPE)
linearSVC = LinearSVC(C=5, dual=False, class_weight='balanced', verbose=1).fit(x_train, y_train)
y_pred = predict_and_score(linearSVC, 'Linear Support Vector Classifier', x_test, y_test, 'test')

# Performance Metrics
getConfusionMatrix_Multiclass(y_pred, y_test, path=metrics_path, modelName=model_name)

