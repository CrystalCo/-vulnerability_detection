#!/usr/bin/env python
# coding: utf-8

# # Vulnerability Type Classification using ML
# The following models will be used to see which one performs best when attempting to classify a vulnerability type in a program:
# - K-Nearest Neighbors (KNN)
# - Random Forest Classifier (RFC)
# - Support Vector Classifer (SVC)

# ## Setting Variables

import os, sys


VUL_PATH = os.environ.get('VUL_PATH')
sys.path.insert(1, VUL_PATH)

from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier

from SYSE_1_isVulnerable.ConfusionMatrix import getConfusionMatrix_Multiclass
from utils.Doc2VecModel import Doc2VecModel
from utils.utils import flatten_categories, getDataset,  save_data_to_file
from utils.MLMethods import measure_performance, predict_and_score

vType = "ALL"
randomSeed = 1099
tokenPath = os.path.join('data', 'tokens')
vectorTypePath = os.path.join('data','MLvectors')
vectorTrainPath = os.path.join(vectorTypePath,'train')
vectorTestPath = os.path.join(vectorTypePath,'test')
d2vmodelPath = os.path.join('d2vModel','model','d2vModel_ALL')
d2vMetricsPath = os.path.join('d2vModel', 'metrics')


# Fit on all the data & transform to vectors
data = getDataset(tokenPath, False)
X = data[0]
d2v = Doc2VecModel(alpha=0.05, epochs=10, negative=15, vector_size=100, window=2, workers=-1)
d2v.fit(X)
print(f'Transformer fit complete. Transforming tokens to vectors next...')
d2v.save_model(d2vmodelPath)
X = d2v.transform(X)
data[0] = X

# Flatten labels
Y = flatten_categories(data[-2])
data[-2] = Y
print(f'Tokens to vectors complete.  Saving to {vectorTypePath} as ALL_vectors.pkl')
save_data_to_file(vectorTypePath, 'ALL_vectors.pkl', data)


# Split train test
X_train, X_test, y_train, y_test = train_test_split(X, Y, 
                                                test_size=0.2, random_state=randomSeed,
                                                stratify=Y)
print(f'Size of training set: {len(X_train)}')
print(f'Size of test set: {len(X_test)}')



#### K-Nearest Neighbors
print('Commencing KNN')
knn = KNeighborsClassifier(n_neighbors=4, 
                            weights='distance', 
                            p=2,
                            n_jobs=-1).fit(X_train, y_train)
y_pred = predict_and_score(knn, 'KNN', X_test, y_test, 'test')

# Performance Metrics
metricsPath = os.path.join(d2vMetricsPath, 'knn')
getConfusionMatrix_Multiclass(y_pred, y_test, path=metricsPath)
measure_performance(X_test, y_test, 
                    knn, show_accuracy=False, 
                    show_classification_report=True, 
                    show_confusion_matrix=False,
                    plot_cm=False)



##### Random Forest Classifier
print('Commencing RF')
from sklearn.ensemble import RandomForestClassifier
rfc = RandomForestClassifier(max_features=50, n_estimators=300, criterion='entropy', 
                            max_depth=15, max_samples=0.8, min_samples_leaf=2, 
                            min_samples_split=3, n_jobs=-1, random_state=randomSeed,
                            class_weight='balanced').fit(X_train, y_train)
y_pred = predict_and_score(rfc, 'Random Forest Classifier', X_test, y_test, 'test')

# Performance Metrics
metricsPath = os.path.join(d2vMetricsPath, 'rf')
getConfusionMatrix_Multiclass(y_pred, y_test, path=metricsPath)
measure_performance(X_test, y_test, 
                    rfc, show_accuracy=False, 
                    show_classification_report=True, 
                    show_confusion_matrix=False,
                    plot_cm=False)


##### Support Vector Classifier
print('Commencing SVC')
from sklearn.svm import SVC
svc = SVC(class_weight='balanced', C=5, gamma=6).fit(X_train, y_train)
y_pred = predict_and_score(svc, 'Support Vector Classifier', X_test, y_test, 'test')

# Performance Metrics
metricsPath = os.path.join(d2vMetricsPath, 'svc')
getConfusionMatrix_Multiclass(y_pred, y_test, path=metricsPath)
measure_performance(X_test, y_test, 
                    svc, show_accuracy=False, 
                    show_classification_report=True, 
                    show_confusion_matrix=False,
                    plot_cm=False)



