import os, sys

VUL_PATH = os.environ.get('VUL_PATH')
sys.path.insert(1, VUL_PATH)

from SYSE_2_vulnerabilityType.DetectVulType import DetectVulType
from utils.DLCustomModels import create_bgru_model, create_blstm_model
from utils.Doc2VecModel import Doc2VecModel

###################################################################################################
# Creating 2 separate D2V files for now so that the stable version remains 
# constant on the server, while the other version gets tested locally.

# When ready to merge together, all that qill be required to toggle 
# between the 2 is to update the classes like so:
    # Flatten ALL_tokens.py classes to intended ID (index=0 for group id; index=1 for original cwe id),
    # then save it to ALL_vectors.py, 
    # and run commands to update the classes on the remaining files.
###################################################################################################


TOKENS_PATH = os.path.join('data', 'tokens') # Contains ALL_tokens.pkl
METRICS = ['CategoricalAccuracy', 'Recall']
RANDOMSEED = 1099
BATCHSIZE = 64
DL_EPOCHS = 20
VECTOR_TRANSFORMER = 'd2v'

D2Vectors = os.path.join('data','D2Vectors')
vectorsALLPath = os.path.join(D2Vectors, 'ALL_vectors')
vectorTrainPath = os.path.join(D2Vectors,'train')
vectorTestPath = os.path.join(D2Vectors,'test')
d2InputsTrainPath = os.path.join('data','D2inputs','train')
d2InputsTestPath  = os.path.join('data','D2inputs','test')
d2vmodelPath = os.path.join('d2vModel','model','d2vModel_ALL')

CLASS_TYPE = 'Granular'

############# BGRU on Granular Samples #############
MODEL_TYPE = 'bgru'
checkpoint = './ckpt_%s_%s_%s_%s' % (VECTOR_TRANSFORMER, MODEL_TYPE, str(BATCHSIZE), CLASS_TYPE)
model_name = '%s_%s_batch=%s_seed=%s_%s' % (MODEL_TYPE.upper(), VECTOR_TRANSFORMER.upper(), BATCHSIZE, RANDOMSEED, CLASS_TYPE)
d2vmetricPath = os.path.join('d2vModel','metrics', MODEL_TYPE)

print(f'BUILDING MODEL {model_name}')

dvt = DetectVulType(build_model=create_bgru_model, useGenerator=True, 
                    transformer_model=Doc2VecModel, transformerPath=d2vmodelPath, 
                    metricsPath=d2vmetricPath, vector_size=256, randomSeed=RANDOMSEED, 
                    alpha=0.05, t_epochs=15, sample=0.001, workers=-1, negative=10, 
                    window=3, m_epochs=DL_EPOCHS, batch_size=BATCHSIZE, modelName=model_name, 
                    mask=False, metrics=METRICS, tokensPath=TOKENS_PATH, 
                    vectorsALLPath=vectorsALLPath, vectorRootPath=D2Vectors, 
                    vectorTrainPath=vectorTrainPath, vectorTestPath=vectorTestPath, 
                    inputsTrainPath=d2InputsTrainPath, inputsTestPath=d2InputsTestPath, 
                    checkpoint_dir=checkpoint)
dvt.run_all() # don't we need to specify index = 1?

"""
Where the logs left off:

BUILDING MODEL BGRU_D2V_batch=64_seed=1099_Granular
Backend Qt5Agg is interactive backend. Turning interactive mode on.
Slice Files To be Processed:  API function call.txt
Total Corpus Files:  64403
Slice Files To be Processed:  Arithmetic expression.txt
Total Corpus Files:  22154
Slice Files To be Processed:  Array usage.txt
Total Corpus Files:  42229
Slice Files To be Processed:  Pointer usage.txt
Total Corpus Files:  291841
Fitting transformer with paramaters: Seed: 1099, Alpha: 0.05, Epochs: 15, Sample: 0.001, Negative: 10, Window: 3, Vector length: 256.
Getting dataset...
ALL_tokens.pkl
Transformer fit complete. Transforming tokens to vectors next...
Model created and saved in: d2vModel\model\d2vModel_ALL
Tokens to vectors complete.  Saving to data\D2Vectors\ALL_vectors as ALL_vectors.pkl
All vectors saved in <_io.BufferedWriter name='data\\D2Vectors\\ALL_vectors\\ALL_vectors.pkl'>

Getting dataset...
ALL_vectors.pkl
All vectors saved in <_io.BufferedWriter name='data\\D2Vectors\\ALL_vectors\\ALL_vectors.pkl'>

Total number of classes: 68
Commencing split for training and testing sets...


Traceback (most recent call last):
  File "C:\Users\cryst\anaconda3\envs\env_vul\lib\runpy.py", line 194, in _run_module_as_main
    return _run_code(code, main_globals, None,
  File "C:\Users\cryst\anaconda3\envs\env_vul\lib\runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "c:\Users\cryst\.vscode\extensions\ms-python.python-2021.11.1422169775\pythonFiles\lib\python\debugpy\__main__.py", line 45, in <module>
    cli.main()
  File "c:\Users\cryst\.vscode\extensions\ms-python.python-2021.11.1422169775\pythonFiles\lib\python\debugpy/..\debugpy\server\cli.py", line 444, in main
    run()
  File "c:\Users\cryst\.vscode\extensions\ms-python.python-2021.11.1422169775\pythonFiles\lib\python\debugpy/..\debugpy\server\cli.py", line 285, in run_file
    runpy.run_path(target_as_str, run_name=compat.force_str("__main__"))
  File "C:\Users\cryst\anaconda3\envs\env_vul\lib\runpy.py", line 265, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "C:\Users\cryst\anaconda3\envs\env_vul\lib\runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "C:\Users\cryst\anaconda3\envs\env_vul\lib\runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "c:\Users\cryst\Documents\vulnerability_detection\SYSE_2_vulnerabilityType\3C_D2V_DL_Granular.py", line 57, in <module>
    dvt.run_all()
  File "C:\Users\cryst\Documents\vulnerability_detection\SYSE_2_vulnerabilityType\DetectVulType.py", line 260, in run_all
    self.run_starting_from_transformer(datapath=self.tokensPath, vectorTransformedPath=self.vectorsALLPath, getBalanced=False, adjustVectors=True, minSamples=minSamples)
  File "C:\Users\cryst\Documents\vulnerability_detection\SYSE_2_vulnerabilityType\DetectVulType.py", line 270, in run_starting_from_transformer
    self.splitTrainTest(vectorTransformedPath, minSamples)
  File "C:\Users\cryst\Documents\vulnerability_detection\SYSE_2_vulnerabilityType\DetectVulType.py", line 134, in splitTrainTest
    splitTrainTestCategorical('balanced', vectorTransformedPath, self.vectorTrainPath, self.vectorTestPath, randomSeed=self.randomSeed, dropClasses=dropClasses)
  File "C:\Users\cryst\Documents\vulnerability_detection\SYSE_1_isVulnerable\splitTrainTest.py", line 98, in splitTrainTestCategorical
    raise ValueError("The least populated class in y has only 1 member, which is too few. The minimum number of groups for any class cannot be less than 2.")
ValueError: The least populated class in y has only 1 member, which is too few. The minimum number of groups for any class cannot be less than 2.

"""