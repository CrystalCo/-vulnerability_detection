import os, sys

VUL_PATH = os.environ.get('VUL_PATH')
sys.path.insert(1, VUL_PATH)

from SYSE_2_vulnerabilityType.DetectVulType import DetectVulType
from utils.DLCustomModels import create_bgru_model, create_blstm_model
from utils.Doc2VecModel import Doc2VecModel

###################################################################################################
# Creating 2 separate D2V files for now so that the stable version remains 
# constant on the server, while the other version gets tested locally.

# When ready to merge together, all that qill be required to toggle 
# between the 2 is to update the classes like so:
    # Flatten ALL_tokens.py classes to intended ID (index=0 for group id; index=1 for original cwe id),
    # then save it to ALL_vectors.py, 
    # and run commands to update the classes on the remaining files.
###################################################################################################


TOKENS_PATH = os.path.join('data', 'tokens') # Contains ALL_tokens.pkl
METRICS = ['CategoricalAccuracy', 'Recall']
RANDOMSEED = 1099
BATCHSIZE = 64
DL_EPOCHS = 20
VECTOR_TRANSFORMER = 'd2v'

D2Vectors = os.path.join('data','D2Vectors')
vectorsALLPath = os.path.join(D2Vectors, 'ALL_vectors')
vectorTrainPath = os.path.join(D2Vectors,'train')
vectorTestPath = os.path.join(D2Vectors,'test')
d2InputsTrainPath = os.path.join('data','D2inputs','train')
d2InputsTestPath  = os.path.join('data','D2inputs','test')
d2vmodelPath = os.path.join('d2vModel','model','d2vModel_ALL')

CLASS_TYPE = 'Granular'

############# BGRU on Granular Samples #############
MODEL_TYPE = 'bgru'
checkpoint = './ckpt_%s_%s_%s_%s' % (VECTOR_TRANSFORMER, MODEL_TYPE, str(BATCHSIZE), CLASS_TYPE)
model_name = '%s_%s_batch=%s_seed=%s_%s' % (MODEL_TYPE.upper(), VECTOR_TRANSFORMER.upper(), BATCHSIZE, RANDOMSEED, CLASS_TYPE)
d2vmetricPath = os.path.join('d2vModel','metrics', MODEL_TYPE)

print(f'BUILDING MODEL {model_name}')

dvt = DetectVulType(build_model=create_bgru_model, useGenerator=True, 
                    transformer_model=Doc2VecModel, transformerPath=d2vmodelPath, 
                    metricsPath=d2vmetricPath, vector_size=256, randomSeed=RANDOMSEED, 
                    alpha=0.05, t_epochs=15, sample=0.001, workers=-1, negative=10, 
                    window=3, m_epochs=DL_EPOCHS, batch_size=BATCHSIZE, modelName=model_name, 
                    mask=False, metrics=METRICS, tokensPath=TOKENS_PATH, 
                    vectorsALLPath=vectorsALLPath, vectorRootPath=D2Vectors, 
                    vectorTrainPath=vectorTrainPath, vectorTestPath=vectorTestPath, 
                    inputsTrainPath=d2InputsTrainPath, inputsTestPath=d2InputsTestPath, 
                    checkpoint_dir=checkpoint)
# dvt.reset_checkpoint()
dvt.splitTrainTest(dvt.vectorsALLPath, minSamples=900)
dvt.avg = 1
dvt.vector_size = 256
dvt.run_starting_from_saveKeyData(dvt.vectorTrainPath, dvt.vectorTestPath, dvt.inputsTrainPath, dvt.inputsTestPath)

"""
############# BLSTM on Granular Samples #############
MODEL_TYPE = 'blstm'
checkpoint = './ckpt_%s_%s_%s_%s' % (VECTOR_TRANSFORMER, MODEL_TYPE, str(BATCHSIZE), CLASS_TYPE)
model_name = '%s_%s_batch=%s_seed=%s_%s' % (MODEL_TYPE.upper(), VECTOR_TRANSFORMER.upper(), BATCHSIZE, RANDOMSEED, CLASS_TYPE)
d2vmetricPath = os.path.join('d2vModel','metrics', MODEL_TYPE)

print(f'BUILDING MODEL {model_name}')

dvt = DetectVulType(build_model=create_blstm_model, useGenerator=True, 
                    transformer_model=Doc2VecModel, transformerPath=d2vmodelPath, 
                    metricsPath=d2vmetricPath, vector_size=256, randomSeed=RANDOMSEED, 
                    alpha=0.05, t_epochs=15, sample=0.001, workers=-1, negative=10, 
                    window=3, m_epochs=DL_EPOCHS, batch_size=BATCHSIZE, modelName=model_name, 
                    mask=False, metrics=METRICS, tokensPath=TOKENS_PATH, 
                    vectorsALLPath=vectorsALLPath, vectorRootPath=D2Vectors, 
                    vectorTrainPath=vectorTrainPath, vectorTestPath=vectorTestPath, 
                    inputsTrainPath=d2InputsTrainPath, inputsTestPath=d2InputsTestPath, 
                    checkpoint_dir=checkpoint)
dvt.splitTrainTest(dvt.vectorsALLPath, minSamples=900)
dvt.avg = 1
dvt.vector_size = 256
dvt.run_starting_from_saveKeyData(dvt.vectorTrainPath, dvt.vectorTestPath, dvt.inputsTrainPath, dvt.inputsTestPath)
"""

