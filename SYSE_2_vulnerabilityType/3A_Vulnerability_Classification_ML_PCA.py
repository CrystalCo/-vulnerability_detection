#!/usr/bin/env python
# coding: utf-8

# # Vulnerability Type Classification using ML
# The following models will be used to see which one performs best when attempting to classify a vulnerability type in a program:
# - K-Nearest Neighbors (KNN)
# - Random Forest Classifier (RFC)
# - Support Vector Classifer (SVC)

# ## Setting Variables

import os, sys

import numpy as np
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC

VUL_PATH = os.environ.get('VUL_PATH')
sys.path.insert(1, VUL_PATH)

from SYSE_1_isVulnerable.ConfusionMatrix import getConfusionMatrix_Multiclass
from utils.utils import getDataset
from utils.MLMethods import measure_performance, predict_and_score

RANDOMSEED = 1099
CLASS_TYPE = 'Granular_PCA'
VECTOR_TRANSFORMER='w2v'
MODEL_TYPE = 'knn'

dlInputs = os.path.join('data', 'DLinputs')
dlInputsTrainPath = os.path.join(dlInputs,'PCA_train_granular')
dlInputsTestPath  = os.path.join(dlInputs,'PCA_test_granular')
metrics_path = os.path.join(f'{VECTOR_TRANSFORMER}Model', 'metrics', MODEL_TYPE)
model_name = '%s_%s_seed=%s_%s' % (MODEL_TYPE.upper(), VECTOR_TRANSFORMER.upper(), RANDOMSEED, CLASS_TYPE)


# Get train/test sets
# We already have the flattened W2V vectors from 3D_Granular.py
data = getDataset(dlInputsTrainPath, RANDOMSEED=RANDOMSEED)
x_train = data[0]
print(f'Length of x_train: {len(x_train)}.\nx_train[:5]:\n{x_train[:5]}')
print(f'Length of columns: ', len(x_train[0]))
y_train = data[-2]
print(f'Labels: {np.unique(y_train)}')

data = getDataset(dlInputsTestPath, RANDOMSEED=RANDOMSEED)
x_test = data[0]
print(f'Length of vectors in x_test: {len(x_test)}.\nx_test[:5]:\n{x_test[:5]}')
print(f'Length of columns: ', len(x_test[0]))
y_test = data[-2]
print(f'Labels: {np.unique(y_test)}')


#### K-Nearest Neighbors
print('Commencing KNN')
knn = KNeighborsClassifier(n_neighbors=4, 
                            weights='distance', 
                            p=2,
                            n_jobs=-1).fit(x_train, y_train)
y_pred = predict_and_score(knn, 'KNN', x_test, y_test, 'test')

# Performance Metrics
getConfusionMatrix_Multiclass(y_pred, y_test, path=metrics_path, modelName=model_name)
measure_performance(x_test, y_test, 
                    knn, show_accuracy=False, 
                    show_classification_report=True, 
                    show_confusion_matrix=False,
                    plot_cm=False)



##### Random Forest Classifier
print('Commencing RF')
MODEL_TYPE = 'rfc'
metrics_path = os.path.join(f'{VECTOR_TRANSFORMER}Model', 'metrics', MODEL_TYPE)
model_name = '%s_%s_seed=%s_%s' % (MODEL_TYPE.upper(), VECTOR_TRANSFORMER.upper(), RANDOMSEED, CLASS_TYPE)
rfc = RandomForestClassifier(max_features=None, n_estimators=300, criterion='entropy', 
                            max_depth=15, max_samples=0.8, min_samples_leaf=2, 
                            min_samples_split=3, n_jobs=-1, random_state=RANDOMSEED,
                            class_weight='balanced').fit(x_train, y_train)
y_pred = predict_and_score(rfc, 'Random Forest Classifier', x_test, y_test, 'test')

# Performance Metrics
getConfusionMatrix_Multiclass(y_pred, y_test, path=metrics_path, modelName=model_name)
measure_performance(x_test, y_test, 
                    rfc, show_accuracy=False, 
                    show_classification_report=True, 
                    show_confusion_matrix=False,
                    plot_cm=False)



##### Support Vector Classifier
print('Commencing SVC')
MODEL_TYPE = 'svc'
metrics_path = os.path.join(f'{VECTOR_TRANSFORMER}Model', 'metrics', MODEL_TYPE)
model_name = '%s_%s_seed=%s_%s' % (MODEL_TYPE.upper(), VECTOR_TRANSFORMER.upper(), RANDOMSEED, CLASS_TYPE)
svc = SVC(class_weight='balanced', C=5, gamma=6).fit(x_train, y_train)
y_pred = predict_and_score(svc, 'Support Vector Classifier', x_test, y_test, 'test')

# Performance Metrics
getConfusionMatrix_Multiclass(y_pred, y_test,  path=metrics_path, modelName=model_name)
measure_performance(x_test, y_test, 
                    svc, show_accuracy=False, 
                    show_classification_report=True, 
                    show_confusion_matrix=False,
                    plot_cm=False)

