import os, sys

VUL_PATH = os.environ.get('VUL_PATH')
sys.path.insert(1, VUL_PATH)

from SYSE_2_vulnerabilityType.DetectVulType import DetectVulType
from utils.DLCustomModels import create_bgru_model, create_blstm_model
from utils.Doc2VecModel import Doc2VecModel

###################################################################################################
# Creating 2 separate D2V files for now so that the stable version remains 
# constant on the server, while the other version gets tested locally.

# When ready to merge together, all that qill be required to toggle 
# between the 2 is to update the classes like so:
    # Flatten ALL_tokens.py classes to intended ID (index=0 for group id; index=1 for original cwe id), 
    # then save it to ALL_vectors.py, 
    # and run commands to update the classes on the remaining files.
###################################################################################################

TOKENS_PATH = os.path.join('data', 'tokens') # Contains ALL_tokens.pkl
METRICS = ['CategoricalAccuracy', 'Recall'] # ['CategoricalAccuracy', 'Recall', 'TruePositives', 'TrueNegatives', 'FalsePositives', 'FalseNegatives']
RANDOMSEED = 1099
BATCHSIZE = 64
DL_EPOCHS = 20
VECTOR_TRANSFORMER = 'd2v'

d2vmodelPath = os.path.join('d2vModel','model','d2vModel_ALL')
D2Vectors = os.path.join('data','D2Vectors')
vectorsALLPath = os.path.join(D2Vectors, 'ALL_vectors')
vectorTrainPath = os.path.join(D2Vectors,'train')
vectorTestPath = os.path.join(D2Vectors,'test')
d2InputsTrainPath = os.path.join('data','D2inputs','train')
d2InputsTestPath  = os.path.join('data','D2inputs','test')

class_type = 'Group'

def d2v_dl(avg, vector_size, model_type, model_fn, reshapeX=False):
    shape = str(avg) + 'x' + str(vector_size)
    d2vmetricPath = os.path.join('d2vModel','metrics', model_type)
    checkpoint = './ckpt_%s_%s_%s_%s_%s' % (VECTOR_TRANSFORMER, model_type, str(BATCHSIZE), shape, class_type)
    model_name = '%s_%s_batch=%s_seed=%s_%s_%s' % (model_type.upper(), VECTOR_TRANSFORMER.upper(), BATCHSIZE, RANDOMSEED, shape, class_type)

    print(f'\n\n\nBUILDING MODEL {model_name}')

    dvt = DetectVulType(build_model=model_fn, useGenerator=True, 
                        transformer_model=Doc2VecModel, transformerPath=d2vmodelPath, 
                        metricsPath=d2vmetricPath, vector_size=256, randomSeed=RANDOMSEED, 
                        alpha=0.05, t_epochs=15, sample=0.001, workers=-1, negative=10, 
                        window=3, m_epochs=DL_EPOCHS, batch_size=BATCHSIZE, modelName=model_name, 
                        mask=False, metrics=METRICS, tokensPath=TOKENS_PATH, 
                        vectorsALLPath=vectorsALLPath, vectorRootPath=D2Vectors, 
                        vectorTrainPath=vectorTrainPath, vectorTestPath=vectorTestPath, 
                        inputsTrainPath=d2InputsTrainPath, inputsTestPath=d2InputsTestPath, 
                        checkpoint_dir=checkpoint)
    # dvt.reset_checkpoint()
    dvt.init_transformer()
    if reshapeX: 
        # May remove.  Just testing for now if reshaping would have an effect on scores.
        dvt.fit_transpose_transform(dvt.transformerPath, TOKENS_PATH, dvt.vectorsALLPath, False)
    else:
        # index=0 for group id
        dvt.fit_transform(dvt.transformerPath, TOKENS_PATH, dvt.vectorsALLPath, False, index=0)
    dvt.splitTrainTest(dvt.vectorsALLPath, minSamples=None)
    dvt.encodeLabels()
    dvt.saveKeyData(dvt.vectorTrainPath, dvt.inputsTrainPath)
    dvt.saveKeyData(dvt.vectorTestPath, dvt.inputsTestPath)
    dvt.avg = avg
    dvt.vector_size = vector_size
    dvt.run_starting_from_model()



############# BGRU #############
model_type = 'bgru'

try:
    d2v_dl(16, 16, model_type, create_bgru_model)
except Exception as e:
    print(f'ERROR!! {e}\n\n\n')

try:
    d2v_dl(1, 256, model_type, create_bgru_model)
except Exception as e:
    print(f'ERROR!! {e}\n\n\n')

try:
    d2v_dl(256, 1, model_type, create_bgru_model, reshapeX=True)
except Exception as e:
    print(f'ERROR!! {e}\n\n\n')



############# BLSTM #############
model_type = 'bgru'

try:
    d2v_dl(16, 16, model_type, create_blstm_model)
except Exception as e:
    print(f'ERROR!! {e}\n\n\n')

try:
    d2v_dl(1, 256, model_type, create_blstm_model)
except Exception as e:
    print(f'ERROR!! {e}\n\n\n')

try:
    d2v_dl(256, 1, model_type, create_blstm_model, reshapeX=True)
except Exception as e:
    print(f'ERROR!! {e}\n\n\n')



