#!/usr/bin/env python
# coding: utf-8

import os, sys
vType = "ALL"
randomSeed = 1099
vectorDim = 30 #num of vector cols
vectorPath = os.path.join('data','vector')
vectorTypePath = os.path.join('data','DLvectors')
vectorTrainPath = os.path.join(vectorTypePath,'train')
vectorTestPath = os.path.join(vectorTypePath,'test')
dlInputsTrainPath = os.path.join('data','DLinputs','train')
dlInputsTestPath  = os.path.join('data','DLinputs','test')

VUL_PATH = os.environ.get('VUL_PATH')
sys.path.insert(1, VUL_PATH)

import numpy as np
import tensorflow as tf
from sklearn.model_selection import GridSearchCV
from utils.KerasClassifier import KerasClassifier

from SYSE_1_isVulnerable.adjustVectorLen import meanLen
from utils.utils import getDataset
from utils.DLCustomModels import create_bgru_model, create_blstm_model

print("\n\n=============================== GRID SEARCH - BGRU ===============================\n\n")

# ### Get number of unique classes for density value
train_data = getDataset(vectorTrainPath, getBalanced=True)
x_train = train_data[0]
y_train = train_data[-2]
density_units = np.unique(y_train).shape[0]
avg = meanLen(vectorTrainPath)

param_grid = {
    'maxlen': [avg],
    'density': [density_units],
    'dropout': [0.2],
    'epochs': [10, 20], 
    'batch_size':[16, 32],
    'vector_size':[30],
    'activation': ['sigmoid', 'softmax'],
    'optimizer': ['SGD', 'adam']
}

# Create MirroredStrategy for Single-host, multi-device (GPU) synchronous training
strategy = tf.distribute.MirroredStrategy()
print('Number of devices: {}'.format(strategy.num_replicas_in_sync))
with strategy.scope():
    #Build BLSTMModel with parameters 
    bgru_estimator = KerasClassifier(build_fn=create_bgru_model, verbose=1)

grid = GridSearchCV(estimator=bgru_estimator,
                    param_grid=param_grid,
                    cv=3,
                    error_score=0,
                    n_jobs=1, # change to -1 to use all processors on server
                    verbose=1)

grid.fit(x_train, y_train)

print('\nGRID SEARCH ON BGRU TRAINING DATASET COMPLETE. RESULTS:\n')
print("Best Parameters: {}\n".format(grid.best_params_))
print("Best accuracy: {}\n".format(grid.best_score_))
print("Finished.")


print("\n\n=============================== GRID SEARCH - BLSTM ===============================\n\n")
# Create MirroredStrategy for Single-host, multi-device (GPU) synchronous training
strategy = tf.distribute.MirroredStrategy()
print('Number of devices: {}'.format(strategy.num_replicas_in_sync))
with strategy.scope():
    blstm_estimator = KerasClassifier(build_fn=create_blstm_model, verbose=1)

param_grid = {
    'maxlen': [avg],
    'density': [density_units],
    'dropout': [0.2],
    'epochs': [10, 20], 
    'batch_size':[16, 32],
    'vector_size':[30],
    'activation': ['sigmoid', 'softmax'],
    'optimizer': ['SGD', 'adam']
}

grid = GridSearchCV(estimator=blstm_estimator,
                    param_grid=param_grid,
                    cv=3,
                    error_score=0,
                    n_jobs=1,
                    verbose=1)

grid.fit(x_train, y_train)

print('\nGRID SEARCH ON BGRU TRAINING DATASET COMPLETE. RESULTS:\n')
print("Best Parameters: {}\n".format(grid.best_params_))
print("Best accuracy: {}\n".format(grid.best_score_))
print("Finished.")

