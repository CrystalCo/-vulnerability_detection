"""
    Trains our models with only vulnerable samples (not upsampled). 
    Since it only contains vulnerable samples, the full dataset size 
    is 56,385 which is < the original dataset of 413,854.
"""

import gc, os, sys

VUL_PATH = os.environ.get('VUL_PATH')
sys.path.insert(1, VUL_PATH)

from SYSE_2_vulnerabilityType.VulnerabilityClassification import VulnerabilityClassification
from utils.Word2VecModel import Word2VecModel
from utils.DLCustomModels import create_bgru_model, create_blstm_model
from utils.utils import getDataset


def run_all(VUL_TYPE, vectorsALLdir='ALL_vectors_granular_vulnerable_only', MODEL_TYPE='bgru', model_fn=create_bgru_model, min_num=None):
    RANDOMSEED = 1099
    CLASS_TYPE = '%s_vulnerable_min_%s' % (VUL_TYPE, min_number)
    VECTOR_TRANSFORMER='w2v'
    LAYERS = 2
    DROPOUT = 0.2
    BATCHSIZE = 64
    EPOCHS = 60

    inputsRootPath = os.path.join('data', 'DLinputs')
    vectorRootPath = os.path.join('data','DLvectors')
    vectorsALLPath = os.path.join(vectorRootPath, vectorsALLdir)
    # Rather than taking up memory by creating separate folders for each type, 
    # we can overwrite each one since the upsampled collection is < the fullset.
    vectorTrainPath = os.path.join(vectorRootPath, f'train')
    vectorTestPath = os.path.join(vectorRootPath, f'test')
    dlInputsTrainPath = os.path.join(inputsRootPath, f'train')
    dlInputsTestPath = os.path.join(inputsRootPath, f'test')

    checkpoint_dir = './ckpt_%s_%s_%s_%s' % (VECTOR_TRANSFORMER, MODEL_TYPE, str(BATCHSIZE), CLASS_TYPE)
    model_name = '%s_%s_batch=%s_seed=%s_epochs=%s_%s' % (MODEL_TYPE.upper(), VECTOR_TRANSFORMER.upper(), BATCHSIZE, RANDOMSEED, EPOCHS, CLASS_TYPE)
    metrics_path = os.path.join(f'metrics', MODEL_TYPE)
    weights_path = os.path.join('model', model_name + 'weights')
    w2vmodelPath = os.path.join('w2vModel','model', f'w2vModel_{VUL_TYPE}')
    tokens_path = os.path.join('data', 'token', VUL_TYPE)

    dvt = VulnerabilityClassification(build_model=model_fn, useGenerator=True,
        transformer_model=Word2VecModel, transformerPath=w2vmodelPath,
        metricsPath=metrics_path, randomSeed=RANDOMSEED, window=3, m_epochs=EPOCHS,
        modelName=model_name, batch_size=BATCHSIZE, mask=True, dropout=DROPOUT, layers=LAYERS,
        tokensPath=tokens_path, vectorsALLPath=vectorsALLPath,
        vectorTrainPath=vectorTrainPath, vectorTestPath=vectorTestPath,
        inputsTrainPath=dlInputsTrainPath, inputsTestPath=dlInputsTestPath,
        checkpoint_dir=checkpoint_dir, weightpath=weights_path)

    print('Starting %s & %s' % (CLASS_TYPE, MODEL_TYPE))

    # Reset if need be
    print('Resetting checkpoint and weights...')
    # dvt.reset_checkpoint_and_weights(dvt.weightpath)

    # Split data into training and test set
    print('\nSplitting train/test...')
    dvt.splitTrainTest(dvt.vectorsALLPath, min_num=min_num, vType=VUL_TYPE, dropOtherVtypes=False)

    # Don't adjust the row length since they're already flattened. Manually set the new vector length & avg.
    data = getDataset(dvt.vectorTestPath, True)
    dvt.vector_size = len(data[0][0])
    dvt.avg = 1
    print(f'Avg: {dvt.avg}\tVector length: {dvt.vector_size}\n')
    del data
    gc.collect()

    # Build dl model & predict results
    dvt.hotEncodeLabels()
    dvt.saveKeyData(dvt.vectorTrainPath, dvt.inputsTrainPath)
    dvt.saveKeyData(dvt.vectorTestPath, dvt.inputsTestPath)
    print('\nBuilding/fitting DL model...')
    dvt.build_and_fit()
    print('\nPredicting & Scoring...')
    dvt.predict_and_score()
    print('\n\n\n\n\n\n')


# for testing: 
# vectorsALLdir='SubSample_ALL_vulnerable'
vectorsALLdir='ALL_vectors_granular_vulnerable_only'
min_number = 100

VUL_TYPE = 'ALL' # make sure splitTrainTest(..., dropOtherVtypes=False)
run_all(VUL_TYPE, vectorsALLdir=vectorsALLdir, min_num=min_number)

# VUL_TYPE = 'ARR' # make sure splitTrainTest(..., dropOtherVtypes=True)
# run_all(VUL_TYPE, min_num=min_number)

# VUL_TYPE = 'AE'
# run_all(VUL_TYPE, min_num=min_number)

# VUL_TYPE = 'PTR'
# run_all(VUL_TYPE, min_num=min_number)


# ### BLSTM ###
# VUL_TYPE = 'AE'
# run_all(VUL_TYPE, MODEL_TYPE='blstm', model_fn=create_blstm_model, min_num=min_number)

# VUL_TYPE = 'ARR'
# run_all(VUL_TYPE, MODEL_TYPE='blstm', model_fn=create_blstm_model, min_num=min_number)

# VUL_TYPE = 'API'
# run_all(VUL_TYPE, MODEL_TYPE='blstm', model_fn=create_blstm_model, min_num=min_number)

# VUL_TYPE = 'PTR'
# run_all(VUL_TYPE, MODEL_TYPE='blstm', model_fn=create_blstm_model, min_num=min_number)