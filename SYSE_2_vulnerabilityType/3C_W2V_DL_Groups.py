import os, sys

VUL_PATH = os.environ.get('VUL_PATH')
sys.path.insert(1, VUL_PATH)

from SYSE_2_vulnerabilityType.DetectVulType import DetectVulType
from utils.DLCustomModels import create_bgru_model, create_blstm_model
from utils.Word2VecModel import Word2VecModel

###################################################################################################
# Creating 2 separate W2V files for now so that the stable version remains 
# constant on the server, while the other version gets tested locally.

# When ready to merge together, all that qill be required to toggle 
# between the 2 is to update the classes like so:
    # Flatten ALL_tokens.py classes to intended ID (index=0 for group id; index=1 for original cwe id), 
    # then save it to ALL_vectors.py, 
    # and run commands to update the classes on the remaining files.
###################################################################################################

TOKENS_PATH = os.path.join('data', 'tokens') # Contains ALL_tokens.pkl
METRICS = ['CategoricalAccuracy', 'Recall'] # ['CategoricalAccuracy', 'Recall', 'TruePositives', 'TrueNegatives', 'FalsePositives', 'FalseNegatives']
RANDOMSEED = 1099
BATCHSIZE = 64
DL_EPOCHS = 20
VECTOR_TRANSFORMER = 'w2v'

DLVectors = os.path.join('data','DLvectors')
vectorsALLPath = os.path.join(DLVectors, 'ALL_vectors')
vectorTrainPath = os.path.join(DLVectors,'train')
vectorTestPath = os.path.join(DLVectors,'test')
dlInputsTrainPath = os.path.join('data','DLinputs','train')
dlInputsTestPath  = os.path.join('data','DLinputs','test')
w2vmodelPath = os.path.join('w2vModel','model','w2vModel_ALL')

CLASS_TYPE = 'Group'


############# BGRU #############
MODEL_TYPE = 'bgru'
checkpoint = './ckpt_%s_%s_%s_%s' % (VECTOR_TRANSFORMER, MODEL_TYPE, str(BATCHSIZE), CLASS_TYPE)
model_name = '%s_%s_batch=%s_seed=%s_%s' % (MODEL_TYPE.upper(), VECTOR_TRANSFORMER.upper(), BATCHSIZE, RANDOMSEED, CLASS_TYPE)
w2vmetricPath = os.path.join('w2vModel','metrics', MODEL_TYPE)

print(f'\n\n\nBUILDING MODEL {model_name}')

dvt = DetectVulType(build_model=create_bgru_model, transformer_model=Word2VecModel, 
                    transformerPath=w2vmodelPath, metricsPath=w2vmetricPath, vector_size=30,
                    randomSeed=RANDOMSEED, alpha=0.05, t_epochs=15, sample=0.001, workers=-1,
                    negative=10, window=3, batch_size=BATCHSIZE, m_epochs=DL_EPOCHS, modelName=model_name, 
                    metrics=METRICS, tokensPath=TOKENS_PATH, vectorsALLPath=vectorsALLPath,
                    vectorRootPath=DLVectors, vectorTrainPath=vectorTrainPath,
                    vectorTestPath=vectorTestPath, inputsTrainPath=dlInputsTrainPath,
                    inputsTestPath=dlInputsTestPath, checkpoint_dir=checkpoint)
# If process on server did not finish, uncomment to continue from checkpoint.
dvt.get_avg_length()
dvt.modelName = model_name + str(dvt.avg) + 'x' + str(dvt.vector_size)
dvt.run_starting_from_model()



############# BLSTM #############
MODEL_TYPE = 'blstm'
checkpoint = './ckpt_%s_%s_%s_%s' % (VECTOR_TRANSFORMER, MODEL_TYPE, str(BATCHSIZE), CLASS_TYPE)
model_name = '%s_%s_batch=%s_seed=%s_%s' % (MODEL_TYPE.upper(), VECTOR_TRANSFORMER.upper(), BATCHSIZE, RANDOMSEED, CLASS_TYPE)
w2vmetricPath = os.path.join('w2vModel','metrics', MODEL_TYPE)

print(f'BUILDING MODEL {model_name}')

dvt = DetectVulType(build_model=create_blstm_model, transformer_model=Word2VecModel,
                    metricsPath=w2vmetricPath, vector_size=30, randomSeed=RANDOMSEED, 
                    m_epochs=DL_EPOCHS, modelName=model_name, batch_size=BATCHSIZE, metrics=METRICS, 
                    vectorsALLPath=vectorsALLPath, vectorRootPath=DLVectors, 
                    vectorTrainPath=vectorTrainPath, vectorTestPath=vectorTestPath, 
                    inputsTrainPath=dlInputsTrainPath, inputsTestPath=dlInputsTestPath,
                    checkpoint_dir=checkpoint)
dvt.get_avg_length()
dvt.modelName = model_name + str(dvt.avg) + 'x' + str(dvt.vector_size)
dvt.run_starting_from_model()
