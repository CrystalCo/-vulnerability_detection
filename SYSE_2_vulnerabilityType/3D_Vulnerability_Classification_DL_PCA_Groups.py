# # PCA on full dataset (Group IDs)
# ## D2V + BLSTM Group 
print('Starting PCA script...')
# Reset vector train & test files to contain Group IDs
data = getDataset(TOKENS_PATH, False, RANDOMSEED)
data[-2] = flatten_categories(data[-2], 0)
TOKENS_GROUP_PATH = os.path.join('data', 'tokens_groups')
save_data_to_file(TOKENS_GROUP_PATH, 'ALL_tokens_groups.pkl', data)

CLASS_TYPE = 'Group_PCA'
MODEL_TYPE = 'blstm'
VECTOR_TRANSFORMER = 'd2v'
VECTOR_SIZE = 256
checkpoint_dir = './ckpt_%s_%s_%s_%s' % (VECTOR_TRANSFORMER, MODEL_TYPE, str(BATCHSIZE), CLASS_TYPE)
model_name = '%s_%s_batch=%s_seed=%s_%s' % (MODEL_TYPE.upper(), VECTOR_TRANSFORMER.upper(), BATCHSIZE, RANDOMSEED, CLASS_TYPE)
metrics_path = os.path.join(f'{VECTOR_TRANSFORMER}Model','metrics', MODEL_TYPE)
transformer_model_path = os.path.join(f'{VECTOR_TRANSFORMER}Model','model', MODEL_TYPE)
vectorsALLPath = os.path.join(vectorRootPath, 'ALL_vectors_groups')

dvt = DetectVulType(build_model=create_blstm_model, useGenerator=True, layers=LAYERS,
                    transformer_model=Doc2VecModel, transformerPath=transformer_model_path, 
                    metricsPath=metrics_path, vector_size=256, randomSeed=RANDOMSEED, 
                    alpha=0.05, t_epochs=15, sample=0.001, workers=-1, negative=10, 
                    window=3, vector_size=VECTOR_SIZE, randomSeed=RANDOMSEED, 
                    m_epochs=EPOCHS, batch_size=BATCHSIZE, modelName=model_name, 
                    mask=False, tokensPath=TOKENS_GROUP_PATH, dropout=DROPOUT, optimizer=OPTIMIZER,
                    vectorsALLPath=vectorsALLPath, vectorRootPath=vectorRootPath, 
                    vectorTrainPath=pca_vectors_train, vectorTestPath=pca_vectors_test, 
                    inputsTrainPath=pca_inputs_train_path, inputsTestPath=pca_inputs_test_path, 
                    checkpoint_dir=checkpoint_dir)

dvt.init_transformer()
dvt.fit_transform(dvt.transformerPath, dvt.tokensPath, dvt.vectorsALLPath, False, index=0)
# PCA transformation
data = getDataset(dvt.vectorsALLPath, False, RANDOMSEED)
original_labels = data[-2]
categories = np.unique(original_labels)
_, labelEncoder = encode_target(categories)
DENSITY_UNITS = categories.shape[0]

data = getDataset(pca_vectors, True, RANDOMSEED)
data[-2] = labels
save_data_to_file(pca_vectors, 'PCA_vectors_balanced.pkl', data)

categories = np.unique(labels)
_, labelEncoder = encode_target(categories)
DENSITY_UNITS = categories.shape[0]

print(f'BUILDING MODEL {model_name}')
dvt.avg = 1
dvt.vector_size = VECTOR_SIZE
dvt.labelEncoder = labelEncoder
dvt.density_units = DENSITY_UNITS
dvt.splitTrainTest(pca_vectors, minSamples=900)
dvt.saveKeyData(pca_vectors_train, pca_inputs_train_path)
dvt.saveKeyData(pca_vectors_test, pca_inputs_test_path)
dvt.build_and_fit()
dvt.predict_and_score()



# ## D2V + BGRU Group 
CLASS_TYPE = 'Group_PCA'
MODEL_TYPE = 'bgru'
VECTOR_TRANSFORMER='d2v'
checkpoint_dir = './ckpt_%s_%s_%s_%s' % (VECTOR_TRANSFORMER, MODEL_TYPE, str(BATCHSIZE), CLASS_TYPE)
model_name = '%s_%s_batch=%s_seed=%s_%s' % (MODEL_TYPE.upper(), VECTOR_TRANSFORMER.upper(), BATCHSIZE, RANDOMSEED, CLASS_TYPE)
metrics_path = os.path.join(f'{VECTOR_TRANSFORMER}Model','metrics', MODEL_TYPE)

dvt = DetectVulType(build_model=create_bgru_model, useGenerator=True, layers=LAYERS,
                    metricsPath=metrics_path, vector_size=VECTOR_SIZE, randomSeed=RANDOMSEED, 
                    m_epochs=EPOCHS, batch_size=BATCHSIZE, modelName=model_name, 
                    mask=False, tokensPath=TOKENS_PATH, dropout=DROPOUT, optimizer=OPTIMIZER,
                    vectorsALLPath=vectorsALLPath, vectorRootPath=vectorRootPath, 
                    vectorTrainPath=pca_vectors_train, vectorTestPath=pca_vectors_test, 
                    inputsTrainPath=pca_inputs_train_path, inputsTestPath=pca_inputs_test_path, 
                    checkpoint_dir=checkpoint_dir)

print(f'BUILDING MODEL {model_name}')
dvt.avg = 1
dvt.vector_size = VECTOR_SIZE
dvt.labelEncoder = labelEncoder
dvt.density_units = DENSITY_UNITS
dvt.build_and_fit()
dvt.predict_and_score()




# ## W2V + BGRU Group 
CLASS_TYPE = 'Group_PCA'
MODEL_TYPE = 'bgru'
VECTOR_TRANSFORMER='w2v'

vectorRootPath = os.path.join('data','DLvectors')
vectorsALLPath = os.path.join(vectorRootPath, 'ALL_vectors')
vectorTrainPath = os.path.join(vectorRootPath,'train')
vectorTestPath = os.path.join(vectorRootPath,'test')
dlInputsTrainPath = os.path.join('data','DLinputs','train')
dlInputsTestPath  = os.path.join('data','DLinputs','test')
pca_vectors = os.path.join(vectorRootPath, 'PCA_vectors')
pca_vectors_train = os.path.join(vectorRootPath, 'PCA_train')
pca_vectors_test = os.path.join(vectorRootPath, 'PCA_test')
pca_inputs_train_path = os.path.join('data', 'DLinputs', 'PCA_train')
pca_inputs_test_path = os.path.join('data', 'DLinputs', 'PCA_test')

checkpoint_dir = './ckpt_%s_%s_%s_%s' % (VECTOR_TRANSFORMER, MODEL_TYPE, str(BATCHSIZE), CLASS_TYPE)
model_name = '%s_%s_batch=%s_seed=%s_%s' % (MODEL_TYPE.upper(), VECTOR_TRANSFORMER.upper(), BATCHSIZE, RANDOMSEED, CLASS_TYPE)
metrics_path = os.path.join(f'{VECTOR_TRANSFORMER}Model','metrics', MODEL_TYPE)

dvt = DetectVulType(build_model=create_bgru_model, useGenerator=True, layers=LAYERS,
                    metricsPath=metrics_path, vector_size=VECTOR_SIZE, randomSeed=RANDOMSEED, 
                    m_epochs=EPOCHS, batch_size=BATCHSIZE, modelName=model_name, 
                    mask=False, tokensPath=TOKENS_PATH, dropout=DROPOUT, optimizer=OPTIMIZER,
                    vectorsALLPath=vectorsALLPath, vectorRootPath=vectorRootPath, 
                    vectorTrainPath=pca_vectors_train, vectorTestPath=pca_vectors_test, 
                    inputsTrainPath=pca_inputs_train_path, inputsTestPath=pca_inputs_test_path, 
                    checkpoint_dir=checkpoint_dir)

print(f'BUILDING MODEL {model_name}')
dvt.avg = 1
dvt.vector_size = VECTOR_SIZE
dvt.labelEncoder = labelEncoder
dvt.density_units = DENSITY_UNITS
dvt.build_and_fit()
dvt.predict_and_score()


# ## W2V + BLSTM Group 
CLASS_TYPE = 'Group_PCA'
MODEL_TYPE = 'blstm'
VECTOR_TRANSFORMER='w2v'

checkpoint_dir = './ckpt_%s_%s_%s_%s' % (VECTOR_TRANSFORMER, MODEL_TYPE, str(BATCHSIZE), CLASS_TYPE)
model_name = '%s_%s_batch=%s_seed=%s_%s' % (MODEL_TYPE.upper(), VECTOR_TRANSFORMER.upper(), BATCHSIZE, RANDOMSEED, CLASS_TYPE)
metrics_path = os.path.join(f'{VECTOR_TRANSFORMER}Model','metrics', MODEL_TYPE)

dvt = DetectVulType(build_model=create_blstm_model, useGenerator=True, layers=LAYERS,
                    metricsPath=metrics_path, vector_size=VECTOR_SIZE, randomSeed=RANDOMSEED, 
                    m_epochs=EPOCHS, batch_size=BATCHSIZE, modelName=model_name, 
                    mask=False, tokensPath=TOKENS_PATH, dropout=DROPOUT, optimizer=OPTIMIZER,
                    vectorsALLPath=vectorsALLPath, vectorRootPath=vectorRootPath, 
                    vectorTrainPath=pca_vectors_train, vectorTestPath=pca_vectors_test, 
                    inputsTrainPath=pca_inputs_train_path, inputsTestPath=pca_inputs_test_path, 
                    checkpoint_dir=checkpoint_dir)

print(f'BUILDING MODEL {model_name}')
dvt.avg = 1
dvt.vector_size = VECTOR_SIZE
dvt.labelEncoder = labelEncoder
dvt.density_units = DENSITY_UNITS
dvt.build_and_fit()
dvt.predict_and_score()

