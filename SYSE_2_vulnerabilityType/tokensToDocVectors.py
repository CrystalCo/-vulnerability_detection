import gc, os, pickle

from gensim.models.doc2vec import Doc2Vec, TaggedDocument

class DirofCorpus(object):
    def __init__(self, dirname):
        self.dirname = dirname
    
    def __iter__(self):
        d = self.dirname
        for fn in os.listdir(d): 
            if not fn.endswith('DS_Store'):
                fnn = fn
                for filename in os.listdir(os.path.join(d, fnn)):
                    if not filename.endswith('DS_Store'):
                        pklname = filename
                        with open(os.path.join(d, fnn, pklname), 'rb') as f:
                            data = pickle.load(f)
                            words = data[0][0] # array of tokens in unicode string
                            tag1 = data[4][0] # vtype (API, AE, ARR, or PTR), so we know which source file contains the test case ID
                            tag2 = fn # unique doc id, which is the test case ID of the slice
                            tags = [tag1, int(tag2)]
                            document = TaggedDocument(words, tags) # where words must be a list of unicode string tokens
                            yield document
                            del data, words, tag1, tags, document
                            gc.collect()


def createD2VModel(d2vmodelPath, tokenPath, vdim):
    print('Fitting D2V model from corpus...')
    mymodel = Doc2Vec(documents=DirofCorpus(tokenPath), alpha=0.01,  min_count=0, max_vocab_size=None, hs=0, negative=10, workers=4, vector_size=vdim)
    mymodel.save(d2vmodelPath)
    print("Model created and saved in: " + d2vmodelPath)
    words = sorted(mymodel.wv.vocab.keys())
    print("Number of words in model:", len(words))
    fp = open("wordsD2Vmodel.txt", "w", encoding="utf-8")
    for word in words:
        fp.write(word + '\n')
    fp.close()
    return mymodel


def fitD2VModel(d2vmodelPath, tokenPath, vectorPath):
    mymodel = Doc2Vec.load(d2vmodelPath)
    setDataVector(tokenPath, vectorPath, mymodel)

def setDataVector(tokenPath, vectorPath, mymodel):
    X = []
    Y = []
    for corpusfiles in os.listdir(tokenPath):
        #print(corpusfiles)
        if not corpusfiles.endswith('DS_Store'):
            cfs = corpusfiles
            if cfs not in os.listdir(vectorPath): 
                folder_path = os.path.join(vectorPath, cfs)
                os.mkdir(folder_path)
            for corpusfile in os.listdir(tokenPath + cfs):
                if not corpusfile.endswith('DS_Store'):
                    cf = corpusfile
                    corpus_path = os.path.join(tokenPath, corpusfiles, cf)
                    f_corpus = open(corpus_path, 'rb')
                    data = pickle.load(f_corpus)
                    f_corpus.close()
                    data[0] = [mymodel[int(cfs)]]
                    X.append(data[0])
                    Y.append(str(data[-2][0]))
                    vector_path = os.path.join(vectorPath, corpusfiles, corpusfile)
                    f_vector = open(vector_path, 'wb')
                    pickle.dump(data, f_vector, protocol=pickle.HIGHEST_PROTOCOL)
                    f_vector.close()
    print("D2V Completed: The vector file is in vector folder")

