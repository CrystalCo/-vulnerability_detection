import gc, os, sys

import numpy as np

VUL_PATH = os.environ.get('VUL_PATH')
sys.path.insert(1, VUL_PATH)

from SYSE_2_vulnerabilityType.DetectVulType import DetectVulType
from utils.DLCustomModels import create_bgru_model
from utils.MLMethods import convert_nested_lists_to_numpy_arrays
from utils.utils import getDataset, save_data_to_file

RANDOMSEED = 1099
CLASS_TYPE = 'Granular_162'
MODEL_TYPE = 'bgru'
VECTOR_TRANSFORMER='w2v'
LAYERS = 2
DROPOUT = 0.2
BATCHSIZE = 64
EPOCHS = 60

vectorRootPath = os.path.join('data', 'DLvectors')
vectorTrainPath_flat = os.path.join(vectorRootPath,'train_162classes_flattened')
vectorTestPath_flat = os.path.join(vectorRootPath,'test_162classes_flattened')
inputRootPath = os.path.join('data', 'DLinputs')
dlInputsTrainPath_flat = os.path.join(inputRootPath,'train_162classes_flattened')
dlInputsTestPath_flat = os.path.join(inputRootPath,'test_162classes_flattened')


checkpoint_dir = './ckpt_%s_%s_%s_%s' % (VECTOR_TRANSFORMER, MODEL_TYPE, str(BATCHSIZE), CLASS_TYPE)
model_name = '%s_%s_batch=%s_seed=%s_epochs=%s_%s' % (MODEL_TYPE.upper(), VECTOR_TRANSFORMER.upper(), BATCHSIZE, RANDOMSEED, EPOCHS, CLASS_TYPE)
metrics_path = os.path.join(f'{VECTOR_TRANSFORMER}Model', 'metrics', MODEL_TYPE)
weights_path = os.path.join('model', model_name + 'weights')

dvt = DetectVulType(build_model=create_bgru_model, metricsPath=metrics_path,
                    randomSeed=RANDOMSEED, layers=LAYERS, weightpath=weights_path,
                    batch_size=BATCHSIZE, m_epochs=EPOCHS, modelName=model_name, 
                    vectorTrainPath=vectorTrainPath_flat, vectorTestPath=vectorTestPath_flat,
                    inputsTrainPath=dlInputsTrainPath_flat, inputsTestPath=dlInputsTestPath_flat,
                    checkpoint_dir=checkpoint_dir)

data = getDataset(dvt.vectorTrainPath)
VECTOR_SIZE = len(data[0][0])
del data
gc.collect()

dvt.vector_size = VECTOR_SIZE
dvt.avg = 1
print(f'Avg: {dvt.avg} Vector: {VECTOR_SIZE}')
dvt.encodeLabels()
print(f'Density units: {dvt.density_units}. Vector size: {dvt.vector_size}')
dvt.build_and_fit()
dvt.predict_and_score()


