CWE_ID	Name	Abstraction	Description	Relationships	URL
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
319	Cleartext Transmission of Sensitive Information	Base	The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors. 	5	https://cwe.mitre.org/data/definitions/319.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
427	Uncontrolled Search Path Element	Base	The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors. 	426	https://cwe.mitre.org/data/definitions/427.html
114	Process Control	Class	Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker. 	73	https://cwe.mitre.org/data/definitions/114.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
617	Reachable Assertion	Base	The product contains an assert() or similar statement that can be triggered by an attacker, which leads to an application exit or other behavior that is more severe than necessary. 	193	https://cwe.mitre.org/data/definitions/617.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
119	Improper Restriction of Operations within the Bounds of a Memory Buffer	Class	The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer. 	120,125,466,786,787,788,805,822,823,824,825,128,129,131,190,193,195,839,843,1257,1260,1339,120,125,787,824,120,123,125,130,786,787,788,805,822,823,824,825,120,123,125,130,786,787,788,805,822,823,824,825	https://cwe.mitre.org/data/definitions/119.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
690	Unchecked Return Value to NULL Pointer Dereference	Compound	The product does not check for an error after calling a function that can return with a NULL pointer if the function fails, which leads to a resultant NULL pointer dereference. 	252,476,476	https://cwe.mitre.org/data/definitions/690.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
369	Divide By Zero	Base	The product divides a value by zero. 		https://cwe.mitre.org/data/definitions/369.html
194	Unexpected Sign Extension	Variant	The software performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses. 	681,681,681	https://cwe.mitre.org/data/definitions/194.html
666	Operation on Resource in Wrong Phase of Lifetime	Class	The software performs an operation on a resource at the wrong phase of the resource's lifecycle, which can lead to unexpected behaviors. 	415,593,605,826	https://cwe.mitre.org/data/definitions/666.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
196	Unsigned to Signed Conversion Error	Variant	The software uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value if the value of the unsigned primitive can not be represented using a signed primitive. 	681,120,124,681,681	https://cwe.mitre.org/data/definitions/196.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
415	Double Free	Variant	The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations. 	825,123,416,364	https://cwe.mitre.org/data/definitions/415.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
690	Unchecked Return Value to NULL Pointer Dereference	Compound	The product does not check for an error after calling a function that can return with a NULL pointer if the function fails, which leads to a resultant NULL pointer dereference. 	252,476,476	https://cwe.mitre.org/data/definitions/690.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
119	Improper Restriction of Operations within the Bounds of a Memory Buffer	Class	The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer. 	120,125,466,786,787,788,805,822,823,824,825,128,129,131,190,193,195,839,843,1257,1260,1339,120,125,787,824,120,123,125,130,786,787,788,805,822,823,824,825,120,123,125,130,786,787,788,805,822,823,824,825	https://cwe.mitre.org/data/definitions/119.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
114	Process Control	Class	Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker. 	73	https://cwe.mitre.org/data/definitions/114.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
319	Cleartext Transmission of Sensitive Information	Base	The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors. 	5	https://cwe.mitre.org/data/definitions/319.html
690	Unchecked Return Value to NULL Pointer Dereference	Compound	The product does not check for an error after calling a function that can return with a NULL pointer if the function fails, which leads to a resultant NULL pointer dereference. 	252,476,476	https://cwe.mitre.org/data/definitions/690.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
400	Uncontrolled Resource Consumption	Class	The software does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources. 	770,771,779,920,1235,410,770,920	https://cwe.mitre.org/data/definitions/400.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
327	Use of a Broken or Risky Cryptographic Algorithm	Class	The use of a broken or risky cryptographic algorithm is an unnecessary risk that may result in the exposure of sensitive information. 	328,780,916,1240,301,208,916	https://cwe.mitre.org/data/definitions/327.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
400	Uncontrolled Resource Consumption	Class	The software does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources. 	770,771,779,920,1235,410,770,920	https://cwe.mitre.org/data/definitions/400.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
195	Signed to Unsigned Conversion Error	Variant	The software uses a signed primitive and performs a cast to an unsigned primitive, which can produce an unexpected value if the value of the signed primitive can not be represented using an unsigned primitive. 	681,839,681,681	https://cwe.mitre.org/data/definitions/195.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
195	Signed to Unsigned Conversion Error	Variant	The software uses a signed primitive and performs a cast to an unsigned primitive, which can produce an unexpected value if the value of the signed primitive can not be represented using an unsigned primitive. 	681,839,681,681	https://cwe.mitre.org/data/definitions/195.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
401	Missing Release of Memory after Effective Lifetime	Variant	The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. 	772,390	https://cwe.mitre.org/data/definitions/401.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
126	Buffer Over-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer. 	125,788,170	https://cwe.mitre.org/data/definitions/126.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
476	NULL Pointer Dereference	Base	A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit. 	252,789,1325	https://cwe.mitre.org/data/definitions/476.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
90	Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')	Base	The software constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended LDAP query when it is sent to a downstream component. 		https://cwe.mitre.org/data/definitions/90.html
415	Double Free	Variant	The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations. 	825,123,416,364	https://cwe.mitre.org/data/definitions/415.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
284	Improper Access Control	Pillar	The software does not restrict or incorrectly restricts access to a resource from an unauthorized actor. 	346,942,1220,1224,1231,1242,1252,1256,1257,1259,1260,1262,1267,1268,1270,1274,1275,1276,1280,1283,1290,1292,1296,1304,1311,1312,1313,1315,1316,1317,1320,1323,1334,288,639	https://cwe.mitre.org/data/definitions/284.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
476	NULL Pointer Dereference	Base	A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit. 	252,789,1325	https://cwe.mitre.org/data/definitions/476.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
401	Missing Release of Memory after Effective Lifetime	Variant	The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. 	772,390	https://cwe.mitre.org/data/definitions/401.html
369	Divide By Zero	Base	The product divides a value by zero. 		https://cwe.mitre.org/data/definitions/369.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
415	Double Free	Variant	The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations. 	825,123,416,364	https://cwe.mitre.org/data/definitions/415.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
774	Allocation of File Descriptors or Handles Without Limits or Throttling	Variant	The software allocates file descriptors or handles on behalf of an actor without imposing any restrictions on how many descriptors can be allocated, in violation of the intended security policy for that actor. 	770	https://cwe.mitre.org/data/definitions/774.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
663	Use of a Non-reentrant Function in a Concurrent Context	Base	The software calls a non-reentrant function in a concurrent context in which a competing code sequence (e.g. thread or signal handler) may have an opportunity to call the same function or otherwise influence its state. 	479,558,1265	https://cwe.mitre.org/data/definitions/663.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
415	Double Free	Variant	The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations. 	825,123,416,364	https://cwe.mitre.org/data/definitions/415.html
191	Integer Underflow (Wrap or Wraparound)	Base	The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result. 		https://cwe.mitre.org/data/definitions/191.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
126	Buffer Over-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer. 	125,788,170	https://cwe.mitre.org/data/definitions/126.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
758	Reliance on Undefined, Unspecified, or Implementation-Defined Behavior	Class	The software uses an API function, data structure, or other entity in a way that relies on properties that are not always guaranteed to hold for that entity. 	474,562,587,588,1102,1103,1105	https://cwe.mitre.org/data/definitions/758.html
401	Missing Release of Memory after Effective Lifetime	Variant	The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. 	772,390	https://cwe.mitre.org/data/definitions/401.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
197	Numeric Truncation Error	Base	Truncation errors occur when a primitive is cast to a primitive of a smaller size and data is lost in the conversion. 	681,192,194,195,196,681,681	https://cwe.mitre.org/data/definitions/197.html
476	NULL Pointer Dereference	Base	A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit. 	252,789,1325	https://cwe.mitre.org/data/definitions/476.html
400	Uncontrolled Resource Consumption	Class	The software does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources. 	770,771,779,920,1235,410,770,920	https://cwe.mitre.org/data/definitions/400.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
194	Unexpected Sign Extension	Variant	The software performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses. 	681,681,681	https://cwe.mitre.org/data/definitions/194.html
690	Unchecked Return Value to NULL Pointer Dereference	Compound	The product does not check for an error after calling a function that can return with a NULL pointer if the function fails, which leads to a resultant NULL pointer dereference. 	252,476,476	https://cwe.mitre.org/data/definitions/690.html
415	Double Free	Variant	The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations. 	825,123,416,364	https://cwe.mitre.org/data/definitions/415.html
761	Free of Pointer not at Start of Buffer	Variant	The application calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer. 	763	https://cwe.mitre.org/data/definitions/761.html
195	Signed to Unsigned Conversion Error	Variant	The software uses a signed primitive and performs a cast to an unsigned primitive, which can produce an unexpected value if the value of the signed primitive can not be represented using an unsigned primitive. 	681,839,681,681	https://cwe.mitre.org/data/definitions/195.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
401	Missing Release of Memory after Effective Lifetime	Variant	The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. 	772,390	https://cwe.mitre.org/data/definitions/401.html
426	Untrusted Search Path	Base	The application searches for critical resources using an externally-supplied search path that can point to resources that are not under the application's direct control. 	427,428	https://cwe.mitre.org/data/definitions/426.html
195	Signed to Unsigned Conversion Error	Variant	The software uses a signed primitive and performs a cast to an unsigned primitive, which can produce an unexpected value if the value of the signed primitive can not be represented using an unsigned primitive. 	681,839,681,681	https://cwe.mitre.org/data/definitions/195.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
591	Sensitive Data Storage in Improperly Locked Memory	Variant	The application stores sensitive data in memory that is not locked, or that has been incorrectly locked, which might cause the memory to be written to swap files on disk by the virtual memory manager. This can make the data more accessible to external actors. 	413	https://cwe.mitre.org/data/definitions/591.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
119	Improper Restriction of Operations within the Bounds of a Memory Buffer	Class	The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer. 	120,125,466,786,787,788,805,822,823,824,825,128,129,131,190,193,195,839,843,1257,1260,1339,120,125,787,824,120,123,125,130,786,787,788,805,822,823,824,825,120,123,125,130,786,787,788,805,822,823,824,825	https://cwe.mitre.org/data/definitions/119.html
690	Unchecked Return Value to NULL Pointer Dereference	Compound	The product does not check for an error after calling a function that can return with a NULL pointer if the function fails, which leads to a resultant NULL pointer dereference. 	252,476,476	https://cwe.mitre.org/data/definitions/690.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
758	Reliance on Undefined, Unspecified, or Implementation-Defined Behavior	Class	The software uses an API function, data structure, or other entity in a way that relies on properties that are not always guaranteed to hold for that entity. 	474,562,587,588,1102,1103,1105	https://cwe.mitre.org/data/definitions/758.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
805	Buffer Access with Incorrect Length Value	Base	The software uses a sequential operation to read or write a buffer, but it uses an incorrect length value that causes it to access memory that is outside of the bounds of the buffer. 	806,130	https://cwe.mitre.org/data/definitions/805.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
606	Unchecked Input for Loop Condition	Base	The product does not properly check inputs that are used for loop conditions, potentially leading to a denial of service or other consequences because of excessive looping. 	1284	https://cwe.mitre.org/data/definitions/606.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
252	Unchecked Return Value	Base	The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions. 	273,476	https://cwe.mitre.org/data/definitions/252.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
194	Unexpected Sign Extension	Variant	The software performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses. 	681,681,681	https://cwe.mitre.org/data/definitions/194.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
319	Cleartext Transmission of Sensitive Information	Base	The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors. 	5	https://cwe.mitre.org/data/definitions/319.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
197	Numeric Truncation Error	Base	Truncation errors occur when a primitive is cast to a primitive of a smaller size and data is lost in the conversion. 	681,192,194,195,196,681,681	https://cwe.mitre.org/data/definitions/197.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
665	Improper Initialization	Class	The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used. 	454,455,770,908,909,1051,1052,1188,1221,1271,1279,908,909,1188,456,457,456,457	https://cwe.mitre.org/data/definitions/665.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
457	Use of Uninitialized Variable	Variant	The code uses a variable that has not been initialized, leading to unpredictable or unintended results. 	908,456	https://cwe.mitre.org/data/definitions/457.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
415	Double Free	Variant	The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations. 	825,123,416,364	https://cwe.mitre.org/data/definitions/415.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
758	Reliance on Undefined, Unspecified, or Implementation-Defined Behavior	Class	The software uses an API function, data structure, or other entity in a way that relies on properties that are not always guaranteed to hold for that entity. 	474,562,587,588,1102,1103,1105	https://cwe.mitre.org/data/definitions/758.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
401	Missing Release of Memory after Effective Lifetime	Variant	The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. 	772,390	https://cwe.mitre.org/data/definitions/401.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
119	Improper Restriction of Operations within the Bounds of a Memory Buffer	Class	The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer. 	120,125,466,786,787,788,805,822,823,824,825,128,129,131,190,193,195,839,843,1257,1260,1339,120,125,787,824,120,123,125,130,786,787,788,805,822,823,824,825,120,123,125,130,786,787,788,805,822,823,824,825	https://cwe.mitre.org/data/definitions/119.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
690	Unchecked Return Value to NULL Pointer Dereference	Compound	The product does not check for an error after calling a function that can return with a NULL pointer if the function fails, which leads to a resultant NULL pointer dereference. 	252,476,476	https://cwe.mitre.org/data/definitions/690.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
401	Missing Release of Memory after Effective Lifetime	Variant	The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. 	772,390	https://cwe.mitre.org/data/definitions/401.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
457	Use of Uninitialized Variable	Variant	The code uses a variable that has not been initialized, leading to unpredictable or unintended results. 	908,456	https://cwe.mitre.org/data/definitions/457.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
194	Unexpected Sign Extension	Variant	The software performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses. 	681,681,681	https://cwe.mitre.org/data/definitions/194.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
119	Improper Restriction of Operations within the Bounds of a Memory Buffer	Class	The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer. 	120,125,466,786,787,788,805,822,823,824,825,128,129,131,190,193,195,839,843,1257,1260,1339,120,125,787,824,120,123,125,130,786,787,788,805,822,823,824,825,120,123,125,130,786,787,788,805,822,823,824,825	https://cwe.mitre.org/data/definitions/119.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
761	Free of Pointer not at Start of Buffer	Variant	The application calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer. 	763	https://cwe.mitre.org/data/definitions/761.html
114	Process Control	Class	Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker. 	73	https://cwe.mitre.org/data/definitions/114.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
690	Unchecked Return Value to NULL Pointer Dereference	Compound	The product does not check for an error after calling a function that can return with a NULL pointer if the function fails, which leads to a resultant NULL pointer dereference. 	252,476,476	https://cwe.mitre.org/data/definitions/690.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
369	Divide By Zero	Base	The product divides a value by zero. 		https://cwe.mitre.org/data/definitions/369.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
195	Signed to Unsigned Conversion Error	Variant	The software uses a signed primitive and performs a cast to an unsigned primitive, which can produce an unexpected value if the value of the signed primitive can not be represented using an unsigned primitive. 	681,839,681,681	https://cwe.mitre.org/data/definitions/195.html
369	Divide By Zero	Base	The product divides a value by zero. 		https://cwe.mitre.org/data/definitions/369.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
426	Untrusted Search Path	Base	The application searches for critical resources using an externally-supplied search path that can point to resources that are not under the application's direct control. 	427,428	https://cwe.mitre.org/data/definitions/426.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
416	Use After Free	Variant	Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code. 	825,415,364,1265,120,123	https://cwe.mitre.org/data/definitions/416.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
119	Improper Restriction of Operations within the Bounds of a Memory Buffer	Class	The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer. 	120,125,466,786,787,788,805,822,823,824,825,128,129,131,190,193,195,839,843,1257,1260,1339,120,125,787,824,120,123,125,130,786,787,788,805,822,823,824,825,120,123,125,130,786,787,788,805,822,823,824,825	https://cwe.mitre.org/data/definitions/119.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
666	Operation on Resource in Wrong Phase of Lifetime	Class	The software performs an operation on a resource at the wrong phase of the resource's lifecycle, which can lead to unexpected behaviors. 	415,593,605,826	https://cwe.mitre.org/data/definitions/666.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
119	Improper Restriction of Operations within the Bounds of a Memory Buffer	Class	The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer. 	120,125,466,786,787,788,805,822,823,824,825,128,129,131,190,193,195,839,843,1257,1260,1339,120,125,787,824,120,123,125,130,786,787,788,805,822,823,824,825,120,123,125,130,786,787,788,805,822,823,824,825	https://cwe.mitre.org/data/definitions/119.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
114	Process Control	Class	Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker. 	73	https://cwe.mitre.org/data/definitions/114.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
176	Improper Handling of Unicode Encoding	Variant	The software does not properly handle when an input contains Unicode encoding. 		https://cwe.mitre.org/data/definitions/176.html
761	Free of Pointer not at Start of Buffer	Variant	The application calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer. 	763	https://cwe.mitre.org/data/definitions/761.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
758	Reliance on Undefined, Unspecified, or Implementation-Defined Behavior	Class	The software uses an API function, data structure, or other entity in a way that relies on properties that are not always guaranteed to hold for that entity. 	474,562,587,588,1102,1103,1105	https://cwe.mitre.org/data/definitions/758.html
114	Process Control	Class	Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker. 	73	https://cwe.mitre.org/data/definitions/114.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
252	Unchecked Return Value	Base	The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions. 	273,476	https://cwe.mitre.org/data/definitions/252.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
367	Time-of-check Time-of-use (TOCTOU) Race Condition	Base	The software checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the software to perform invalid actions when the resource is in an unexpected state. 	363,365,386,609	https://cwe.mitre.org/data/definitions/367.html
606	Unchecked Input for Loop Condition	Base	The product does not properly check inputs that are used for loop conditions, potentially leading to a denial of service or other consequences because of excessive looping. 	1284	https://cwe.mitre.org/data/definitions/606.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
119	Improper Restriction of Operations within the Bounds of a Memory Buffer	Class	The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer. 	120,125,466,786,787,788,805,822,823,824,825,128,129,131,190,193,195,839,843,1257,1260,1339,120,125,787,824,120,123,125,130,786,787,788,805,822,823,824,825,120,123,125,130,786,787,788,805,822,823,824,825	https://cwe.mitre.org/data/definitions/119.html
119	Improper Restriction of Operations within the Bounds of a Memory Buffer	Class	The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer. 	120,125,466,786,787,788,805,822,823,824,825,128,129,131,190,193,195,839,843,1257,1260,1339,120,125,787,824,120,123,125,130,786,787,788,805,822,823,824,825,120,123,125,130,786,787,788,805,822,823,824,825	https://cwe.mitre.org/data/definitions/119.html
415	Double Free	Variant	The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations. 	825,123,416,364	https://cwe.mitre.org/data/definitions/415.html
606	Unchecked Input for Loop Condition	Base	The product does not properly check inputs that are used for loop conditions, potentially leading to a denial of service or other consequences because of excessive looping. 	1284	https://cwe.mitre.org/data/definitions/606.html
194	Unexpected Sign Extension	Variant	The software performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses. 	681,681,681	https://cwe.mitre.org/data/definitions/194.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
414	Missing Lock Check	Base	A product does not check to see if a lock is present before performing sensitive operations on a resource. 		https://cwe.mitre.org/data/definitions/414.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
606	Unchecked Input for Loop Condition	Base	The product does not properly check inputs that are used for loop conditions, potentially leading to a denial of service or other consequences because of excessive looping. 	1284	https://cwe.mitre.org/data/definitions/606.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
119	Improper Restriction of Operations within the Bounds of a Memory Buffer	Class	The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer. 	120,125,466,786,787,788,805,822,823,824,825,128,129,131,190,193,195,839,843,1257,1260,1339,120,125,787,824,120,123,125,130,786,787,788,805,822,823,824,825,120,123,125,130,786,787,788,805,822,823,824,825	https://cwe.mitre.org/data/definitions/119.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
369	Divide By Zero	Base	The product divides a value by zero. 		https://cwe.mitre.org/data/definitions/369.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
427	Uncontrolled Search Path Element	Base	The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors. 	426	https://cwe.mitre.org/data/definitions/427.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
457	Use of Uninitialized Variable	Variant	The code uses a variable that has not been initialized, leading to unpredictable or unintended results. 	908,456	https://cwe.mitre.org/data/definitions/457.html
591	Sensitive Data Storage in Improperly Locked Memory	Variant	The application stores sensitive data in memory that is not locked, or that has been incorrectly locked, which might cause the memory to be written to swap files on disk by the virtual memory manager. This can make the data more accessible to external actors. 	413	https://cwe.mitre.org/data/definitions/591.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
476	NULL Pointer Dereference	Base	A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit. 	252,789,1325	https://cwe.mitre.org/data/definitions/476.html
427	Uncontrolled Search Path Element	Base	The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors. 	426	https://cwe.mitre.org/data/definitions/427.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
685	Function Call With Incorrect Number of Arguments	Variant	The software calls a function, procedure, or routine, but the caller specifies too many arguments, or too few arguments, which may lead to undefined behavior and resultant weaknesses. 	628	https://cwe.mitre.org/data/definitions/685.html
197	Numeric Truncation Error	Base	Truncation errors occur when a primitive is cast to a primitive of a smaller size and data is lost in the conversion. 	681,192,194,195,196,681,681	https://cwe.mitre.org/data/definitions/197.html
197	Numeric Truncation Error	Base	Truncation errors occur when a primitive is cast to a primitive of a smaller size and data is lost in the conversion. 	681,192,194,195,196,681,681	https://cwe.mitre.org/data/definitions/197.html
88	Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')	Base	The software constructs a string for a command to executed by a separate component in another control sphere, but it does not properly delimit the intended arguments, options, or switches within that command string. 		https://cwe.mitre.org/data/definitions/88.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
506	Embedded Malicious Code	Class	The application contains code that appears to be malicious in nature. 	507,510,511,512	https://cwe.mitre.org/data/definitions/506.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
114	Process Control	Class	Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker. 	73	https://cwe.mitre.org/data/definitions/114.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
369	Divide By Zero	Base	The product divides a value by zero. 		https://cwe.mitre.org/data/definitions/369.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
761	Free of Pointer not at Start of Buffer	Variant	The application calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer. 	763	https://cwe.mitre.org/data/definitions/761.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
197	Numeric Truncation Error	Base	Truncation errors occur when a primitive is cast to a primitive of a smaller size and data is lost in the conversion. 	681,192,194,195,196,681,681	https://cwe.mitre.org/data/definitions/197.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
401	Missing Release of Memory after Effective Lifetime	Variant	The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. 	772,390	https://cwe.mitre.org/data/definitions/401.html
775	Missing Release of File Descriptor or Handle after Effective Lifetime	Variant	The software does not release a file descriptor or handle after its effective lifetime has ended, i.e., after the file descriptor/handle is no longer needed. 	772	https://cwe.mitre.org/data/definitions/775.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
327	Use of a Broken or Risky Cryptographic Algorithm	Class	The use of a broken or risky cryptographic algorithm is an unnecessary risk that may result in the exposure of sensitive information. 	328,780,916,1240,301,208,916	https://cwe.mitre.org/data/definitions/327.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
369	Divide By Zero	Base	The product divides a value by zero. 		https://cwe.mitre.org/data/definitions/369.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
761	Free of Pointer not at Start of Buffer	Variant	The application calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer. 	763	https://cwe.mitre.org/data/definitions/761.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
114	Process Control	Class	Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker. 	73	https://cwe.mitre.org/data/definitions/114.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
416	Use After Free	Variant	Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code. 	825,415,364,1265,120,123	https://cwe.mitre.org/data/definitions/416.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
771	Missing Reference to Active Allocated Resource	Base	The software does not properly maintain a reference to a resource that has been allocated, which prevents the resource from being reclaimed. 	773	https://cwe.mitre.org/data/definitions/771.html
690	Unchecked Return Value to NULL Pointer Dereference	Compound	The product does not check for an error after calling a function that can return with a NULL pointer if the function fails, which leads to a resultant NULL pointer dereference. 	252,476,476	https://cwe.mitre.org/data/definitions/690.html
761	Free of Pointer not at Start of Buffer	Variant	The application calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer. 	763	https://cwe.mitre.org/data/definitions/761.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
194	Unexpected Sign Extension	Variant	The software performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses. 	681,681,681	https://cwe.mitre.org/data/definitions/194.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
369	Divide By Zero	Base	The product divides a value by zero. 		https://cwe.mitre.org/data/definitions/369.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
457	Use of Uninitialized Variable	Variant	The code uses a variable that has not been initialized, leading to unpredictable or unintended results. 	908,456	https://cwe.mitre.org/data/definitions/457.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
195	Signed to Unsigned Conversion Error	Variant	The software uses a signed primitive and performs a cast to an unsigned primitive, which can produce an unexpected value if the value of the signed primitive can not be represented using an unsigned primitive. 	681,839,681,681	https://cwe.mitre.org/data/definitions/195.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
119	Improper Restriction of Operations within the Bounds of a Memory Buffer	Class	The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer. 	120,125,466,786,787,788,805,822,823,824,825,128,129,131,190,193,195,839,843,1257,1260,1339,120,125,787,824,120,123,125,130,786,787,788,805,822,823,824,825,120,123,125,130,786,787,788,805,822,823,824,825	https://cwe.mitre.org/data/definitions/119.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
761	Free of Pointer not at Start of Buffer	Variant	The application calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer. 	763	https://cwe.mitre.org/data/definitions/761.html
123	Write-what-where Condition	Base	Any condition where the attacker has the ability to write an arbitrary value to an arbitrary location, often as the result of a buffer overflow. 	787,415,120,134,364,416,479,590	https://cwe.mitre.org/data/definitions/123.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
761	Free of Pointer not at Start of Buffer	Variant	The application calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer. 	763	https://cwe.mitre.org/data/definitions/761.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
119	Improper Restriction of Operations within the Bounds of a Memory Buffer	Class	The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer. 	120,125,466,786,787,788,805,822,823,824,825,128,129,131,190,193,195,839,843,1257,1260,1339,120,125,787,824,120,123,125,130,786,787,788,805,822,823,824,825,120,123,125,130,786,787,788,805,822,823,824,825	https://cwe.mitre.org/data/definitions/119.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
401	Missing Release of Memory after Effective Lifetime	Variant	The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. 	772,390	https://cwe.mitre.org/data/definitions/401.html
126	Buffer Over-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer. 	125,788,170	https://cwe.mitre.org/data/definitions/126.html
253	Incorrect Check of Function Return Value	Base	The software incorrectly checks a return value from a function, which prevents the software from detecting errors or exceptional conditions. 		https://cwe.mitre.org/data/definitions/253.html
114	Process Control	Class	Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker. 	73	https://cwe.mitre.org/data/definitions/114.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
244	Improper Clearing of Heap Memory Before Release ('Heap Inspection')	Variant	Using realloc() to resize buffers that store sensitive information can leave the sensitive information exposed to attack, because it is not removed from memory. 	226	https://cwe.mitre.org/data/definitions/244.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
195	Signed to Unsigned Conversion Error	Variant	The software uses a signed primitive and performs a cast to an unsigned primitive, which can produce an unexpected value if the value of the signed primitive can not be represented using an unsigned primitive. 	681,839,681,681	https://cwe.mitre.org/data/definitions/195.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
457	Use of Uninitialized Variable	Variant	The code uses a variable that has not been initialized, leading to unpredictable or unintended results. 	908,456	https://cwe.mitre.org/data/definitions/457.html
191	Integer Underflow (Wrap or Wraparound)	Base	The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result. 		https://cwe.mitre.org/data/definitions/191.html
606	Unchecked Input for Loop Condition	Base	The product does not properly check inputs that are used for loop conditions, potentially leading to a denial of service or other consequences because of excessive looping. 	1284	https://cwe.mitre.org/data/definitions/606.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
126	Buffer Over-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer. 	125,788,170	https://cwe.mitre.org/data/definitions/126.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
401	Missing Release of Memory after Effective Lifetime	Variant	The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. 	772,390	https://cwe.mitre.org/data/definitions/401.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
401	Missing Release of Memory after Effective Lifetime	Variant	The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. 	772,390	https://cwe.mitre.org/data/definitions/401.html
606	Unchecked Input for Loop Condition	Base	The product does not properly check inputs that are used for loop conditions, potentially leading to a denial of service or other consequences because of excessive looping. 	1284	https://cwe.mitre.org/data/definitions/606.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
119	Improper Restriction of Operations within the Bounds of a Memory Buffer	Class	The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer. 	120,125,466,786,787,788,805,822,823,824,825,128,129,131,190,193,195,839,843,1257,1260,1339,120,125,787,824,120,123,125,130,786,787,788,805,822,823,824,825,120,123,125,130,786,787,788,805,822,823,824,825	https://cwe.mitre.org/data/definitions/119.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
834	Excessive Iteration	Class	The software performs an iteration or loop without sufficiently limiting the number of times that the loop is executed. 	835,1322,606,1339,835	https://cwe.mitre.org/data/definitions/834.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
195	Signed to Unsigned Conversion Error	Variant	The software uses a signed primitive and performs a cast to an unsigned primitive, which can produce an unexpected value if the value of the signed primitive can not be represented using an unsigned primitive. 	681,839,681,681	https://cwe.mitre.org/data/definitions/195.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
400	Uncontrolled Resource Consumption	Class	The software does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources. 	770,771,779,920,1235,410,770,920	https://cwe.mitre.org/data/definitions/400.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
426	Untrusted Search Path	Base	The application searches for critical resources using an externally-supplied search path that can point to resources that are not under the application's direct control. 	427,428	https://cwe.mitre.org/data/definitions/426.html
476	NULL Pointer Dereference	Base	A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit. 	252,789,1325	https://cwe.mitre.org/data/definitions/476.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
191	Integer Underflow (Wrap or Wraparound)	Base	The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result. 		https://cwe.mitre.org/data/definitions/191.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
415	Double Free	Variant	The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations. 	825,123,416,364	https://cwe.mitre.org/data/definitions/415.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
761	Free of Pointer not at Start of Buffer	Variant	The application calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer. 	763	https://cwe.mitre.org/data/definitions/761.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
119	Improper Restriction of Operations within the Bounds of a Memory Buffer	Class	The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer. 	120,125,466,786,787,788,805,822,823,824,825,128,129,131,190,193,195,839,843,1257,1260,1339,120,125,787,824,120,123,125,130,786,787,788,805,822,823,824,825,120,123,125,130,786,787,788,805,822,823,824,825	https://cwe.mitre.org/data/definitions/119.html
126	Buffer Over-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer. 	125,788,170	https://cwe.mitre.org/data/definitions/126.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
400	Uncontrolled Resource Consumption	Class	The software does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources. 	770,771,779,920,1235,410,770,920	https://cwe.mitre.org/data/definitions/400.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
427	Uncontrolled Search Path Element	Base	The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors. 	426	https://cwe.mitre.org/data/definitions/427.html
126	Buffer Over-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer. 	125,788,170	https://cwe.mitre.org/data/definitions/126.html
126	Buffer Over-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer. 	125,788,170	https://cwe.mitre.org/data/definitions/126.html
369	Divide By Zero	Base	The product divides a value by zero. 		https://cwe.mitre.org/data/definitions/369.html
588	Attempt to Access Child of a Non-structure Pointer	Variant	Casting a non-structure type to a structure type and accessing a field can lead to memory access errors or data corruption. 		https://cwe.mitre.org/data/definitions/588.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
367	Time-of-check Time-of-use (TOCTOU) Race Condition	Base	The software checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the software to perform invalid actions when the resource is in an unexpected state. 	363,365,386,609	https://cwe.mitre.org/data/definitions/367.html
427	Uncontrolled Search Path Element	Base	The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors. 	426	https://cwe.mitre.org/data/definitions/427.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
252	Unchecked Return Value	Base	The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions. 	273,476	https://cwe.mitre.org/data/definitions/252.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
123	Write-what-where Condition	Base	Any condition where the attacker has the ability to write an arbitrary value to an arbitrary location, often as the result of a buffer overflow. 	787,415,120,134,364,416,479,590	https://cwe.mitre.org/data/definitions/123.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
369	Divide By Zero	Base	The product divides a value by zero. 		https://cwe.mitre.org/data/definitions/369.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
197	Numeric Truncation Error	Base	Truncation errors occur when a primitive is cast to a primitive of a smaller size and data is lost in the conversion. 	681,192,194,195,196,681,681	https://cwe.mitre.org/data/definitions/197.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
194	Unexpected Sign Extension	Variant	The software performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses. 	681,681,681	https://cwe.mitre.org/data/definitions/194.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
606	Unchecked Input for Loop Condition	Base	The product does not properly check inputs that are used for loop conditions, potentially leading to a denial of service or other consequences because of excessive looping. 	1284	https://cwe.mitre.org/data/definitions/606.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
272	Least Privilege Violation	Base	The elevated privilege level required to perform operations such as chroot() should be dropped immediately after the operation is performed. 		https://cwe.mitre.org/data/definitions/272.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
690	Unchecked Return Value to NULL Pointer Dereference	Compound	The product does not check for an error after calling a function that can return with a NULL pointer if the function fails, which leads to a resultant NULL pointer dereference. 	252,476,476	https://cwe.mitre.org/data/definitions/690.html
400	Uncontrolled Resource Consumption	Class	The software does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources. 	770,771,779,920,1235,410,770,920	https://cwe.mitre.org/data/definitions/400.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
401	Missing Release of Memory after Effective Lifetime	Variant	The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. 	772,390	https://cwe.mitre.org/data/definitions/401.html
401	Missing Release of Memory after Effective Lifetime	Variant	The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. 	772,390	https://cwe.mitre.org/data/definitions/401.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
416	Use After Free	Variant	Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code. 	825,415,364,1265,120,123	https://cwe.mitre.org/data/definitions/416.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
666	Operation on Resource in Wrong Phase of Lifetime	Class	The software performs an operation on a resource at the wrong phase of the resource's lifecycle, which can lead to unexpected behaviors. 	415,593,605,826	https://cwe.mitre.org/data/definitions/666.html
327	Use of a Broken or Risky Cryptographic Algorithm	Class	The use of a broken or risky cryptographic algorithm is an unnecessary risk that may result in the exposure of sensitive information. 	328,780,916,1240,301,208,916	https://cwe.mitre.org/data/definitions/327.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
476	NULL Pointer Dereference	Base	A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit. 	252,789,1325	https://cwe.mitre.org/data/definitions/476.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
666	Operation on Resource in Wrong Phase of Lifetime	Class	The software performs an operation on a resource at the wrong phase of the resource's lifecycle, which can lead to unexpected behaviors. 	415,593,605,826	https://cwe.mitre.org/data/definitions/666.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
665	Improper Initialization	Class	The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used. 	454,455,770,908,909,1051,1052,1188,1221,1271,1279,908,909,1188,456,457,456,457	https://cwe.mitre.org/data/definitions/665.html
114	Process Control	Class	Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker. 	73	https://cwe.mitre.org/data/definitions/114.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
415	Double Free	Variant	The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations. 	825,123,416,364	https://cwe.mitre.org/data/definitions/415.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
401	Missing Release of Memory after Effective Lifetime	Variant	The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. 	772,390	https://cwe.mitre.org/data/definitions/401.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
404	Improper Resource Shutdown or Release	Class	The program does not release or incorrectly releases a resource before it is made available for re-use. 	262,263,299,459,763,772,1266,239,619,401,459,763,772,401,772,775,761,762,763,772,775	https://cwe.mitre.org/data/definitions/404.html
416	Use After Free	Variant	Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code. 	825,415,364,1265,120,123	https://cwe.mitre.org/data/definitions/416.html
197	Numeric Truncation Error	Base	Truncation errors occur when a primitive is cast to a primitive of a smaller size and data is lost in the conversion. 	681,192,194,195,196,681,681	https://cwe.mitre.org/data/definitions/197.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
114	Process Control	Class	Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker. 	73	https://cwe.mitre.org/data/definitions/114.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
119	Improper Restriction of Operations within the Bounds of a Memory Buffer	Class	The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer. 	120,125,466,786,787,788,805,822,823,824,825,128,129,131,190,193,195,839,843,1257,1260,1339,120,125,787,824,120,123,125,130,786,787,788,805,822,823,824,825,120,123,125,130,786,787,788,805,822,823,824,825	https://cwe.mitre.org/data/definitions/119.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
416	Use After Free	Variant	Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code. 	825,415,364,1265,120,123	https://cwe.mitre.org/data/definitions/416.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
319	Cleartext Transmission of Sensitive Information	Base	The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors. 	5	https://cwe.mitre.org/data/definitions/319.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
321	Use of Hard-coded Cryptographic Key	Variant	The use of a hard-coded cryptographic key significantly increases the possibility that encrypted data may be recovered. 	798,259,1291,656,798,798	https://cwe.mitre.org/data/definitions/321.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
666	Operation on Resource in Wrong Phase of Lifetime	Class	The software performs an operation on a resource at the wrong phase of the resource's lifecycle, which can lead to unexpected behaviors. 	415,593,605,826	https://cwe.mitre.org/data/definitions/666.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
690	Unchecked Return Value to NULL Pointer Dereference	Compound	The product does not check for an error after calling a function that can return with a NULL pointer if the function fails, which leads to a resultant NULL pointer dereference. 	252,476,476	https://cwe.mitre.org/data/definitions/690.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
563	Assignment to Variable without Use	Variant	The variable's value is assigned but never used, making it a dead store. 		https://cwe.mitre.org/data/definitions/563.html
666	Operation on Resource in Wrong Phase of Lifetime	Class	The software performs an operation on a resource at the wrong phase of the resource's lifecycle, which can lead to unexpected behaviors. 	415,593,605,826	https://cwe.mitre.org/data/definitions/666.html
415	Double Free	Variant	The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations. 	825,123,416,364	https://cwe.mitre.org/data/definitions/415.html
416	Use After Free	Variant	Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code. 	825,415,364,1265,120,123	https://cwe.mitre.org/data/definitions/416.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
191	Integer Underflow (Wrap or Wraparound)	Base	The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result. 		https://cwe.mitre.org/data/definitions/191.html
401	Missing Release of Memory after Effective Lifetime	Variant	The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. 	772,390	https://cwe.mitre.org/data/definitions/401.html
588	Attempt to Access Child of a Non-structure Pointer	Variant	Casting a non-structure type to a structure type and accessing a field can lead to memory access errors or data corruption. 		https://cwe.mitre.org/data/definitions/588.html
681	Incorrect Conversion between Numeric Types	Base	When converting from one data type to another, such as long to integer, data can be omitted or translated in a way that produces unexpected values. If the resulting values are used in a sensitive context, then dangerous behaviors may occur. 	192,194,195,196,197,194,195,196,197,194,195,196,197	https://cwe.mitre.org/data/definitions/681.html
416	Use After Free	Variant	Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code. 	825,415,364,1265,120,123	https://cwe.mitre.org/data/definitions/416.html
197	Numeric Truncation Error	Base	Truncation errors occur when a primitive is cast to a primitive of a smaller size and data is lost in the conversion. 	681,192,194,195,196,681,681	https://cwe.mitre.org/data/definitions/197.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
535	Exposure of Information Through Shell Error Message	Variant	A command shell error message indicates that there exists an unhandled exception in the web application code. In many cases, an attacker can leverage the conditions that cause these errors in order to gain unauthorized access to the system. 	211	https://cwe.mitre.org/data/definitions/535.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
114	Process Control	Class	Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker. 	73	https://cwe.mitre.org/data/definitions/114.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
785	Use of Path Manipulation Function without Maximum-sized Buffer	Variant	The software invokes a function for normalizing paths or file names, but it provides an output buffer that is smaller than the maximum possible size, such as PATH_MAX. 	120,676	https://cwe.mitre.org/data/definitions/785.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
401	Missing Release of Memory after Effective Lifetime	Variant	The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. 	772,390	https://cwe.mitre.org/data/definitions/401.html
194	Unexpected Sign Extension	Variant	The software performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses. 	681,681,681	https://cwe.mitre.org/data/definitions/194.html
476	NULL Pointer Dereference	Base	A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit. 	252,789,1325	https://cwe.mitre.org/data/definitions/476.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
476	NULL Pointer Dereference	Base	A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit. 	252,789,1325	https://cwe.mitre.org/data/definitions/476.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
457	Use of Uninitialized Variable	Variant	The code uses a variable that has not been initialized, leading to unpredictable or unintended results. 	908,456	https://cwe.mitre.org/data/definitions/457.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
400	Uncontrolled Resource Consumption	Class	The software does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources. 	770,771,779,920,1235,410,770,920	https://cwe.mitre.org/data/definitions/400.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
369	Divide By Zero	Base	The product divides a value by zero. 		https://cwe.mitre.org/data/definitions/369.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
476	NULL Pointer Dereference	Base	A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit. 	252,789,1325	https://cwe.mitre.org/data/definitions/476.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
457	Use of Uninitialized Variable	Variant	The code uses a variable that has not been initialized, leading to unpredictable or unintended results. 	908,456	https://cwe.mitre.org/data/definitions/457.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
119	Improper Restriction of Operations within the Bounds of a Memory Buffer	Class	The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer. 	120,125,466,786,787,788,805,822,823,824,825,128,129,131,190,193,195,839,843,1257,1260,1339,120,125,787,824,120,123,125,130,786,787,788,805,822,823,824,825,120,123,125,130,786,787,788,805,822,823,824,825	https://cwe.mitre.org/data/definitions/119.html
457	Use of Uninitialized Variable	Variant	The code uses a variable that has not been initialized, leading to unpredictable or unintended results. 	908,456	https://cwe.mitre.org/data/definitions/457.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
369	Divide By Zero	Base	The product divides a value by zero. 		https://cwe.mitre.org/data/definitions/369.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
369	Divide By Zero	Base	The product divides a value by zero. 		https://cwe.mitre.org/data/definitions/369.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
761	Free of Pointer not at Start of Buffer	Variant	The application calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer. 	763	https://cwe.mitre.org/data/definitions/761.html
426	Untrusted Search Path	Base	The application searches for critical resources using an externally-supplied search path that can point to resources that are not under the application's direct control. 	427,428	https://cwe.mitre.org/data/definitions/426.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
489	Active Debug Code	Base	The application is deployed to unauthorized actors with debugging code still enabled or active, which can create unintended entry points or expose sensitive information. 	11,215	https://cwe.mitre.org/data/definitions/489.html
119	Improper Restriction of Operations within the Bounds of a Memory Buffer	Class	The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer. 	120,125,466,786,787,788,805,822,823,824,825,128,129,131,190,193,195,839,843,1257,1260,1339,120,125,787,824,120,123,125,130,786,787,788,805,822,823,824,825,120,123,125,130,786,787,788,805,822,823,824,825	https://cwe.mitre.org/data/definitions/119.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
457	Use of Uninitialized Variable	Variant	The code uses a variable that has not been initialized, leading to unpredictable or unintended results. 	908,456	https://cwe.mitre.org/data/definitions/457.html
114	Process Control	Class	Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker. 	73	https://cwe.mitre.org/data/definitions/114.html
223	Omission of Security-relevant Information	Base	The application does not record or display information that would be important for identifying the source or nature of an attack, or determining if an action is safe. 	778	https://cwe.mitre.org/data/definitions/223.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
506	Embedded Malicious Code	Class	The application contains code that appears to be malicious in nature. 	507,510,511,512	https://cwe.mitre.org/data/definitions/506.html
401	Missing Release of Memory after Effective Lifetime	Variant	The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. 	772,390	https://cwe.mitre.org/data/definitions/401.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
688	Function Call With Incorrect Variable or Reference as Argument	Variant	The software calls a function, procedure, or routine, but the caller specifies the wrong variable or reference as one of the arguments, which may lead to undefined behavior and resultant weaknesses. 	628	https://cwe.mitre.org/data/definitions/688.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
415	Double Free	Variant	The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations. 	825,123,416,364	https://cwe.mitre.org/data/definitions/415.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
90	Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')	Base	The software constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended LDAP query when it is sent to a downstream component. 		https://cwe.mitre.org/data/definitions/90.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
775	Missing Release of File Descriptor or Handle after Effective Lifetime	Variant	The software does not release a file descriptor or handle after its effective lifetime has ended, i.e., after the file descriptor/handle is no longer needed. 	772	https://cwe.mitre.org/data/definitions/775.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
606	Unchecked Input for Loop Condition	Base	The product does not properly check inputs that are used for loop conditions, potentially leading to a denial of service or other consequences because of excessive looping. 	1284	https://cwe.mitre.org/data/definitions/606.html
690	Unchecked Return Value to NULL Pointer Dereference	Compound	The product does not check for an error after calling a function that can return with a NULL pointer if the function fails, which leads to a resultant NULL pointer dereference. 	252,476,476	https://cwe.mitre.org/data/definitions/690.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
761	Free of Pointer not at Start of Buffer	Variant	The application calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer. 	763	https://cwe.mitre.org/data/definitions/761.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
367	Time-of-check Time-of-use (TOCTOU) Race Condition	Base	The software checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the software to perform invalid actions when the resource is in an unexpected state. 	363,365,386,609	https://cwe.mitre.org/data/definitions/367.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
758	Reliance on Undefined, Unspecified, or Implementation-Defined Behavior	Class	The software uses an API function, data structure, or other entity in a way that relies on properties that are not always guaranteed to hold for that entity. 	474,562,587,588,1102,1103,1105	https://cwe.mitre.org/data/definitions/758.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
364	Signal Handler Race Condition	Base	The software uses a signal handler that introduces a race condition. 	432,828,831,365,123,415,416	https://cwe.mitre.org/data/definitions/364.html
119	Improper Restriction of Operations within the Bounds of a Memory Buffer	Class	The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer. 	120,125,466,786,787,788,805,822,823,824,825,128,129,131,190,193,195,839,843,1257,1260,1339,120,125,787,824,120,123,125,130,786,787,788,805,822,823,824,825,120,123,125,130,786,787,788,805,822,823,824,825	https://cwe.mitre.org/data/definitions/119.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
761	Free of Pointer not at Start of Buffer	Variant	The application calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer. 	763	https://cwe.mitre.org/data/definitions/761.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
563	Assignment to Variable without Use	Variant	The variable's value is assigned but never used, making it a dead store. 		https://cwe.mitre.org/data/definitions/563.html
194	Unexpected Sign Extension	Variant	The software performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses. 	681,681,681	https://cwe.mitre.org/data/definitions/194.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
119	Improper Restriction of Operations within the Bounds of a Memory Buffer	Class	The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer. 	120,125,466,786,787,788,805,822,823,824,825,128,129,131,190,193,195,839,843,1257,1260,1339,120,125,787,824,120,123,125,130,786,787,788,805,822,823,824,825,120,123,125,130,786,787,788,805,822,823,824,825	https://cwe.mitre.org/data/definitions/119.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
758	Reliance on Undefined, Unspecified, or Implementation-Defined Behavior	Class	The software uses an API function, data structure, or other entity in a way that relies on properties that are not always guaranteed to hold for that entity. 	474,562,587,588,1102,1103,1105	https://cwe.mitre.org/data/definitions/758.html
761	Free of Pointer not at Start of Buffer	Variant	The application calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer. 	763	https://cwe.mitre.org/data/definitions/761.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
119	Improper Restriction of Operations within the Bounds of a Memory Buffer	Class	The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer. 	120,125,466,786,787,788,805,822,823,824,825,128,129,131,190,193,195,839,843,1257,1260,1339,120,125,787,824,120,123,125,130,786,787,788,805,822,823,824,825,120,123,125,130,786,787,788,805,822,823,824,825	https://cwe.mitre.org/data/definitions/119.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
398				401,415,416,457,474,475,476,477	https://cwe.mitre.org/data/definitions/398.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
194	Unexpected Sign Extension	Variant	The software performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses. 	681,681,681	https://cwe.mitre.org/data/definitions/194.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
427	Uncontrolled Search Path Element	Base	The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors. 	426	https://cwe.mitre.org/data/definitions/427.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
400	Uncontrolled Resource Consumption	Class	The software does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources. 	770,771,779,920,1235,410,770,920	https://cwe.mitre.org/data/definitions/400.html
672	Operation on a Resource after Expiration or Release	Class	The software uses, accesses, or otherwise operates on a resource after that resource has been expired, released, or revoked. 	298,324,613,825,910,562,826,911,415,416,613,415,416,415,416	https://cwe.mitre.org/data/definitions/672.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
401	Missing Release of Memory after Effective Lifetime	Variant	The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. 	772,390	https://cwe.mitre.org/data/definitions/401.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
427	Uncontrolled Search Path Element	Base	The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors. 	426	https://cwe.mitre.org/data/definitions/427.html
401	Missing Release of Memory after Effective Lifetime	Variant	The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. 	772,390	https://cwe.mitre.org/data/definitions/401.html
126	Buffer Over-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer. 	125,788,170	https://cwe.mitre.org/data/definitions/126.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
114	Process Control	Class	Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker. 	73	https://cwe.mitre.org/data/definitions/114.html
427	Uncontrolled Search Path Element	Base	The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors. 	426	https://cwe.mitre.org/data/definitions/427.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
194	Unexpected Sign Extension	Variant	The software performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses. 	681,681,681	https://cwe.mitre.org/data/definitions/194.html
194	Unexpected Sign Extension	Variant	The software performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses. 	681,681,681	https://cwe.mitre.org/data/definitions/194.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
666	Operation on Resource in Wrong Phase of Lifetime	Class	The software performs an operation on a resource at the wrong phase of the resource's lifecycle, which can lead to unexpected behaviors. 	415,593,605,826	https://cwe.mitre.org/data/definitions/666.html
457	Use of Uninitialized Variable	Variant	The code uses a variable that has not been initialized, leading to unpredictable or unintended results. 	908,456	https://cwe.mitre.org/data/definitions/457.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
427	Uncontrolled Search Path Element	Base	The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors. 	426	https://cwe.mitre.org/data/definitions/427.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
256	Plaintext Storage of a Password	Base	Storing a password in plaintext may result in a system compromise. 		https://cwe.mitre.org/data/definitions/256.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
416	Use After Free	Variant	Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code. 	825,415,364,1265,120,123	https://cwe.mitre.org/data/definitions/416.html
119	Improper Restriction of Operations within the Bounds of a Memory Buffer	Class	The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer. 	120,125,466,786,787,788,805,822,823,824,825,128,129,131,190,193,195,839,843,1257,1260,1339,120,125,787,824,120,123,125,130,786,787,788,805,822,823,824,825,120,123,125,130,786,787,788,805,822,823,824,825	https://cwe.mitre.org/data/definitions/119.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
785	Use of Path Manipulation Function without Maximum-sized Buffer	Variant	The software invokes a function for normalizing paths or file names, but it provides an output buffer that is smaller than the maximum possible size, such as PATH_MAX. 	120,676	https://cwe.mitre.org/data/definitions/785.html
126	Buffer Over-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer. 	125,788,170	https://cwe.mitre.org/data/definitions/126.html
415	Double Free	Variant	The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations. 	825,123,416,364	https://cwe.mitre.org/data/definitions/415.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
562	Return of Stack Variable Address	Base	A function returns the address of a stack variable, which will cause unintended program behavior, typically in the form of a crash. 	825	https://cwe.mitre.org/data/definitions/562.html
114	Process Control	Class	Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker. 	73	https://cwe.mitre.org/data/definitions/114.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
256	Plaintext Storage of a Password	Base	Storing a password in plaintext may result in a system compromise. 		https://cwe.mitre.org/data/definitions/256.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
401	Missing Release of Memory after Effective Lifetime	Variant	The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. 	772,390	https://cwe.mitre.org/data/definitions/401.html
126	Buffer Over-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer. 	125,788,170	https://cwe.mitre.org/data/definitions/126.html
761	Free of Pointer not at Start of Buffer	Variant	The application calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer. 	763	https://cwe.mitre.org/data/definitions/761.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
400	Uncontrolled Resource Consumption	Class	The software does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources. 	770,771,779,920,1235,410,770,920	https://cwe.mitre.org/data/definitions/400.html
426	Untrusted Search Path	Base	The application searches for critical resources using an externally-supplied search path that can point to resources that are not under the application's direct control. 	427,428	https://cwe.mitre.org/data/definitions/426.html
416	Use After Free	Variant	Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code. 	825,415,364,1265,120,123	https://cwe.mitre.org/data/definitions/416.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
197	Numeric Truncation Error	Base	Truncation errors occur when a primitive is cast to a primitive of a smaller size and data is lost in the conversion. 	681,192,194,195,196,681,681	https://cwe.mitre.org/data/definitions/197.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
284	Improper Access Control	Pillar	The software does not restrict or incorrectly restricts access to a resource from an unauthorized actor. 	346,942,1220,1224,1231,1242,1252,1256,1257,1259,1260,1262,1267,1268,1270,1274,1275,1276,1280,1283,1290,1292,1296,1304,1311,1312,1313,1315,1316,1317,1320,1323,1334,288,639	https://cwe.mitre.org/data/definitions/284.html
457	Use of Uninitialized Variable	Variant	The code uses a variable that has not been initialized, leading to unpredictable or unintended results. 	908,456	https://cwe.mitre.org/data/definitions/457.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
114	Process Control	Class	Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker. 	73	https://cwe.mitre.org/data/definitions/114.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
401	Missing Release of Memory after Effective Lifetime	Variant	The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. 	772,390	https://cwe.mitre.org/data/definitions/401.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
761	Free of Pointer not at Start of Buffer	Variant	The application calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer. 	763	https://cwe.mitre.org/data/definitions/761.html
194	Unexpected Sign Extension	Variant	The software performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses. 	681,681,681	https://cwe.mitre.org/data/definitions/194.html
126	Buffer Over-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer. 	125,788,170	https://cwe.mitre.org/data/definitions/126.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
606	Unchecked Input for Loop Condition	Base	The product does not properly check inputs that are used for loop conditions, potentially leading to a denial of service or other consequences because of excessive looping. 	1284	https://cwe.mitre.org/data/definitions/606.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
114	Process Control	Class	Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker. 	73	https://cwe.mitre.org/data/definitions/114.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
195	Signed to Unsigned Conversion Error	Variant	The software uses a signed primitive and performs a cast to an unsigned primitive, which can produce an unexpected value if the value of the signed primitive can not be represented using an unsigned primitive. 	681,839,681,681	https://cwe.mitre.org/data/definitions/195.html
319	Cleartext Transmission of Sensitive Information	Base	The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors. 	5	https://cwe.mitre.org/data/definitions/319.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
319	Cleartext Transmission of Sensitive Information	Base	The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors. 	5	https://cwe.mitre.org/data/definitions/319.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
416	Use After Free	Variant	Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code. 	825,415,364,1265,120,123	https://cwe.mitre.org/data/definitions/416.html
682	Incorrect Calculation	Pillar	The software performs a calculation that generates incorrect or unintended results that are later used in security-critical decisions or resource management. 	128,131,135,190,191,193,369,467,468,469,1335,1339,681,839,170,131,190,191,193,369,131,369,131,369	https://cwe.mitre.org/data/definitions/682.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
194	Unexpected Sign Extension	Variant	The software performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses. 	681,681,681	https://cwe.mitre.org/data/definitions/194.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
126	Buffer Over-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer. 	125,788,170	https://cwe.mitre.org/data/definitions/126.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
400	Uncontrolled Resource Consumption	Class	The software does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources. 	770,771,779,920,1235,410,770,920	https://cwe.mitre.org/data/definitions/400.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
666	Operation on Resource in Wrong Phase of Lifetime	Class	The software performs an operation on a resource at the wrong phase of the resource's lifecycle, which can lead to unexpected behaviors. 	415,593,605,826	https://cwe.mitre.org/data/definitions/666.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
758	Reliance on Undefined, Unspecified, or Implementation-Defined Behavior	Class	The software uses an API function, data structure, or other entity in a way that relies on properties that are not always guaranteed to hold for that entity. 	474,562,587,588,1102,1103,1105	https://cwe.mitre.org/data/definitions/758.html
401	Missing Release of Memory after Effective Lifetime	Variant	The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. 	772,390	https://cwe.mitre.org/data/definitions/401.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
126	Buffer Over-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer. 	125,788,170	https://cwe.mitre.org/data/definitions/126.html
253	Incorrect Check of Function Return Value	Base	The software incorrectly checks a return value from a function, which prevents the software from detecting errors or exceptional conditions. 		https://cwe.mitre.org/data/definitions/253.html
126	Buffer Over-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer. 	125,788,170	https://cwe.mitre.org/data/definitions/126.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
401	Missing Release of Memory after Effective Lifetime	Variant	The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. 	772,390	https://cwe.mitre.org/data/definitions/401.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
401	Missing Release of Memory after Effective Lifetime	Variant	The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. 	772,390	https://cwe.mitre.org/data/definitions/401.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
114	Process Control	Class	Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker. 	73	https://cwe.mitre.org/data/definitions/114.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
758	Reliance on Undefined, Unspecified, or Implementation-Defined Behavior	Class	The software uses an API function, data structure, or other entity in a way that relies on properties that are not always guaranteed to hold for that entity. 	474,562,587,588,1102,1103,1105	https://cwe.mitre.org/data/definitions/758.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
126	Buffer Over-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer. 	125,788,170	https://cwe.mitre.org/data/definitions/126.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
758	Reliance on Undefined, Unspecified, or Implementation-Defined Behavior	Class	The software uses an API function, data structure, or other entity in a way that relies on properties that are not always guaranteed to hold for that entity. 	474,562,587,588,1102,1103,1105	https://cwe.mitre.org/data/definitions/758.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
416	Use After Free	Variant	Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code. 	825,415,364,1265,120,123	https://cwe.mitre.org/data/definitions/416.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
191	Integer Underflow (Wrap or Wraparound)	Base	The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result. 		https://cwe.mitre.org/data/definitions/191.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
191	Integer Underflow (Wrap or Wraparound)	Base	The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result. 		https://cwe.mitre.org/data/definitions/191.html
197	Numeric Truncation Error	Base	Truncation errors occur when a primitive is cast to a primitive of a smaller size and data is lost in the conversion. 	681,192,194,195,196,681,681	https://cwe.mitre.org/data/definitions/197.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
119	Improper Restriction of Operations within the Bounds of a Memory Buffer	Class	The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer. 	120,125,466,786,787,788,805,822,823,824,825,128,129,131,190,193,195,839,843,1257,1260,1339,120,125,787,824,120,123,125,130,786,787,788,805,822,823,824,825,120,123,125,130,786,787,788,805,822,823,824,825	https://cwe.mitre.org/data/definitions/119.html
617	Reachable Assertion	Base	The product contains an assert() or similar statement that can be triggered by an attacker, which leads to an application exit or other behavior that is more severe than necessary. 	193	https://cwe.mitre.org/data/definitions/617.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
401	Missing Release of Memory after Effective Lifetime	Variant	The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. 	772,390	https://cwe.mitre.org/data/definitions/401.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
90	Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')	Base	The software constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended LDAP query when it is sent to a downstream component. 		https://cwe.mitre.org/data/definitions/90.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
761	Free of Pointer not at Start of Buffer	Variant	The application calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer. 	763	https://cwe.mitre.org/data/definitions/761.html
191	Integer Underflow (Wrap or Wraparound)	Base	The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result. 		https://cwe.mitre.org/data/definitions/191.html
119	Improper Restriction of Operations within the Bounds of a Memory Buffer	Class	The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer. 	120,125,466,786,787,788,805,822,823,824,825,128,129,131,190,193,195,839,843,1257,1260,1339,120,125,787,824,120,123,125,130,786,787,788,805,822,823,824,825,120,123,125,130,786,787,788,805,822,823,824,825	https://cwe.mitre.org/data/definitions/119.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
114	Process Control	Class	Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker. 	73	https://cwe.mitre.org/data/definitions/114.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
126	Buffer Over-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer. 	125,788,170	https://cwe.mitre.org/data/definitions/126.html
427	Uncontrolled Search Path Element	Base	The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors. 	426	https://cwe.mitre.org/data/definitions/427.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
758	Reliance on Undefined, Unspecified, or Implementation-Defined Behavior	Class	The software uses an API function, data structure, or other entity in a way that relies on properties that are not always guaranteed to hold for that entity. 	474,562,587,588,1102,1103,1105	https://cwe.mitre.org/data/definitions/758.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
806	Buffer Access Using Size of Source Buffer	Variant	The software uses the size of a source buffer when reading from or writing to a destination buffer, which may cause it to access memory that is outside of the bounds of the buffer. 	805	https://cwe.mitre.org/data/definitions/806.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
126	Buffer Over-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer. 	125,788,170	https://cwe.mitre.org/data/definitions/126.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
761	Free of Pointer not at Start of Buffer	Variant	The application calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer. 	763	https://cwe.mitre.org/data/definitions/761.html
758	Reliance on Undefined, Unspecified, or Implementation-Defined Behavior	Class	The software uses an API function, data structure, or other entity in a way that relies on properties that are not always guaranteed to hold for that entity. 	474,562,587,588,1102,1103,1105	https://cwe.mitre.org/data/definitions/758.html
415	Double Free	Variant	The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations. 	825,123,416,364	https://cwe.mitre.org/data/definitions/415.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
400	Uncontrolled Resource Consumption	Class	The software does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources. 	770,771,779,920,1235,410,770,920	https://cwe.mitre.org/data/definitions/400.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
401	Missing Release of Memory after Effective Lifetime	Variant	The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. 	772,390	https://cwe.mitre.org/data/definitions/401.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
401	Missing Release of Memory after Effective Lifetime	Variant	The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. 	772,390	https://cwe.mitre.org/data/definitions/401.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
400	Uncontrolled Resource Consumption	Class	The software does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources. 	770,771,779,920,1235,410,770,920	https://cwe.mitre.org/data/definitions/400.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
321	Use of Hard-coded Cryptographic Key	Variant	The use of a hard-coded cryptographic key significantly increases the possibility that encrypted data may be recovered. 	798,259,1291,656,798,798	https://cwe.mitre.org/data/definitions/321.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
415	Double Free	Variant	The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations. 	825,123,416,364	https://cwe.mitre.org/data/definitions/415.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
119	Improper Restriction of Operations within the Bounds of a Memory Buffer	Class	The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer. 	120,125,466,786,787,788,805,822,823,824,825,128,129,131,190,193,195,839,843,1257,1260,1339,120,125,787,824,120,123,125,130,786,787,788,805,822,823,824,825,120,123,125,130,786,787,788,805,822,823,824,825	https://cwe.mitre.org/data/definitions/119.html
272	Least Privilege Violation	Base	The elevated privilege level required to perform operations such as chroot() should be dropped immediately after the operation is performed. 		https://cwe.mitre.org/data/definitions/272.html
327	Use of a Broken or Risky Cryptographic Algorithm	Class	The use of a broken or risky cryptographic algorithm is an unnecessary risk that may result in the exposure of sensitive information. 	328,780,916,1240,301,208,916	https://cwe.mitre.org/data/definitions/327.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
415	Double Free	Variant	The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations. 	825,123,416,364	https://cwe.mitre.org/data/definitions/415.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
606	Unchecked Input for Loop Condition	Base	The product does not properly check inputs that are used for loop conditions, potentially leading to a denial of service or other consequences because of excessive looping. 	1284	https://cwe.mitre.org/data/definitions/606.html
319	Cleartext Transmission of Sensitive Information	Base	The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors. 	5	https://cwe.mitre.org/data/definitions/319.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
415	Double Free	Variant	The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations. 	825,123,416,364	https://cwe.mitre.org/data/definitions/415.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
195	Signed to Unsigned Conversion Error	Variant	The software uses a signed primitive and performs a cast to an unsigned primitive, which can produce an unexpected value if the value of the signed primitive can not be represented using an unsigned primitive. 	681,839,681,681	https://cwe.mitre.org/data/definitions/195.html
821	Incorrect Synchronization	Base	The software utilizes a shared resource in a concurrent manner, but it does not correctly synchronize access to the resource. 	572,574,1088,1264	https://cwe.mitre.org/data/definitions/821.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
457	Use of Uninitialized Variable	Variant	The code uses a variable that has not been initialized, leading to unpredictable or unintended results. 	908,456	https://cwe.mitre.org/data/definitions/457.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
774	Allocation of File Descriptors or Handles Without Limits or Throttling	Variant	The software allocates file descriptors or handles on behalf of an actor without imposing any restrictions on how many descriptors can be allocated, in violation of the intended security policy for that actor. 	770	https://cwe.mitre.org/data/definitions/774.html
401	Missing Release of Memory after Effective Lifetime	Variant	The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. 	772,390	https://cwe.mitre.org/data/definitions/401.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
415	Double Free	Variant	The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations. 	825,123,416,364	https://cwe.mitre.org/data/definitions/415.html
761	Free of Pointer not at Start of Buffer	Variant	The application calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer. 	763	https://cwe.mitre.org/data/definitions/761.html
457	Use of Uninitialized Variable	Variant	The code uses a variable that has not been initialized, leading to unpredictable or unintended results. 	908,456	https://cwe.mitre.org/data/definitions/457.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
427	Uncontrolled Search Path Element	Base	The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors. 	426	https://cwe.mitre.org/data/definitions/427.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
191	Integer Underflow (Wrap or Wraparound)	Base	The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result. 		https://cwe.mitre.org/data/definitions/191.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
805	Buffer Access with Incorrect Length Value	Base	The software uses a sequential operation to read or write a buffer, but it uses an incorrect length value that causes it to access memory that is outside of the bounds of the buffer. 	806,130	https://cwe.mitre.org/data/definitions/805.html
606	Unchecked Input for Loop Condition	Base	The product does not properly check inputs that are used for loop conditions, potentially leading to a denial of service or other consequences because of excessive looping. 	1284	https://cwe.mitre.org/data/definitions/606.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
415	Double Free	Variant	The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations. 	825,123,416,364	https://cwe.mitre.org/data/definitions/415.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
369	Divide By Zero	Base	The product divides a value by zero. 		https://cwe.mitre.org/data/definitions/369.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
690	Unchecked Return Value to NULL Pointer Dereference	Compound	The product does not check for an error after calling a function that can return with a NULL pointer if the function fails, which leads to a resultant NULL pointer dereference. 	252,476,476	https://cwe.mitre.org/data/definitions/690.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
120	Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')	Base	The program copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow. 	785,170,231,416,456,123	https://cwe.mitre.org/data/definitions/120.html
126	Buffer Over-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer. 	125,788,170	https://cwe.mitre.org/data/definitions/126.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
119	Improper Restriction of Operations within the Bounds of a Memory Buffer	Class	The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer. 	120,125,466,786,787,788,805,822,823,824,825,128,129,131,190,193,195,839,843,1257,1260,1339,120,125,787,824,120,123,125,130,786,787,788,805,822,823,824,825,120,123,125,130,786,787,788,805,822,823,824,825	https://cwe.mitre.org/data/definitions/119.html
123	Write-what-where Condition	Base	Any condition where the attacker has the ability to write an arbitrary value to an arbitrary location, often as the result of a buffer overflow. 	787,415,120,134,364,416,479,590	https://cwe.mitre.org/data/definitions/123.html
427	Uncontrolled Search Path Element	Base	The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors. 	426	https://cwe.mitre.org/data/definitions/427.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
690	Unchecked Return Value to NULL Pointer Dereference	Compound	The product does not check for an error after calling a function that can return with a NULL pointer if the function fails, which leads to a resultant NULL pointer dereference. 	252,476,476	https://cwe.mitre.org/data/definitions/690.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
401	Missing Release of Memory after Effective Lifetime	Variant	The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. 	772,390	https://cwe.mitre.org/data/definitions/401.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
427	Uncontrolled Search Path Element	Base	The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors. 	426	https://cwe.mitre.org/data/definitions/427.html
761	Free of Pointer not at Start of Buffer	Variant	The application calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer. 	763	https://cwe.mitre.org/data/definitions/761.html
415	Double Free	Variant	The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations. 	825,123,416,364	https://cwe.mitre.org/data/definitions/415.html
415	Double Free	Variant	The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations. 	825,123,416,364	https://cwe.mitre.org/data/definitions/415.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
194	Unexpected Sign Extension	Variant	The software performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses. 	681,681,681	https://cwe.mitre.org/data/definitions/194.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
369	Divide By Zero	Base	The product divides a value by zero. 		https://cwe.mitre.org/data/definitions/369.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
427	Uncontrolled Search Path Element	Base	The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors. 	426	https://cwe.mitre.org/data/definitions/427.html
195	Signed to Unsigned Conversion Error	Variant	The software uses a signed primitive and performs a cast to an unsigned primitive, which can produce an unexpected value if the value of the signed primitive can not be represented using an unsigned primitive. 	681,839,681,681	https://cwe.mitre.org/data/definitions/195.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
839	Numeric Range Comparison Without Minimum Check	Base	The program checks a value to ensure that it is less than or equal to a maximum, but it does not also verify that the value is greater than or equal to the minimum. 	124,195	https://cwe.mitre.org/data/definitions/839.html
369	Divide By Zero	Base	The product divides a value by zero. 		https://cwe.mitre.org/data/definitions/369.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
761	Free of Pointer not at Start of Buffer	Variant	The application calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer. 	763	https://cwe.mitre.org/data/definitions/761.html
476	NULL Pointer Dereference	Base	A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit. 	252,789,1325	https://cwe.mitre.org/data/definitions/476.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
377	Insecure Temporary File	Class	Creating and using insecure temporary files can leave application and system data vulnerable to attack. 	378,379	https://cwe.mitre.org/data/definitions/377.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
416	Use After Free	Variant	Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code. 	825,415,364,1265,120,123	https://cwe.mitre.org/data/definitions/416.html
758	Reliance on Undefined, Unspecified, or Implementation-Defined Behavior	Class	The software uses an API function, data structure, or other entity in a way that relies on properties that are not always guaranteed to hold for that entity. 	474,562,587,588,1102,1103,1105	https://cwe.mitre.org/data/definitions/758.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
457	Use of Uninitialized Variable	Variant	The code uses a variable that has not been initialized, leading to unpredictable or unintended results. 	908,456	https://cwe.mitre.org/data/definitions/457.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
272	Least Privilege Violation	Base	The elevated privilege level required to perform operations such as chroot() should be dropped immediately after the operation is performed. 		https://cwe.mitre.org/data/definitions/272.html
369	Divide By Zero	Base	The product divides a value by zero. 		https://cwe.mitre.org/data/definitions/369.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
126	Buffer Over-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer. 	125,788,170	https://cwe.mitre.org/data/definitions/126.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
820	Missing Synchronization	Base	The software utilizes a shared resource in a concurrent manner but does not attempt to synchronize access to the resource. 	543,567,1096	https://cwe.mitre.org/data/definitions/820.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
609	Double-Checked Locking	Base	The program uses double-checked locking to access a resource without the overhead of explicit synchronization, but the locking is insufficient. 	367	https://cwe.mitre.org/data/definitions/609.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
197	Numeric Truncation Error	Base	Truncation errors occur when a primitive is cast to a primitive of a smaller size and data is lost in the conversion. 	681,192,194,195,196,681,681	https://cwe.mitre.org/data/definitions/197.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
761	Free of Pointer not at Start of Buffer	Variant	The application calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer. 	763	https://cwe.mitre.org/data/definitions/761.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
690	Unchecked Return Value to NULL Pointer Dereference	Compound	The product does not check for an error after calling a function that can return with a NULL pointer if the function fails, which leads to a resultant NULL pointer dereference. 	252,476,476	https://cwe.mitre.org/data/definitions/690.html
319	Cleartext Transmission of Sensitive Information	Base	The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors. 	5	https://cwe.mitre.org/data/definitions/319.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
758	Reliance on Undefined, Unspecified, or Implementation-Defined Behavior	Class	The software uses an API function, data structure, or other entity in a way that relies on properties that are not always guaranteed to hold for that entity. 	474,562,587,588,1102,1103,1105	https://cwe.mitre.org/data/definitions/758.html
319	Cleartext Transmission of Sensitive Information	Base	The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors. 	5	https://cwe.mitre.org/data/definitions/319.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
476	NULL Pointer Dereference	Base	A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit. 	252,789,1325	https://cwe.mitre.org/data/definitions/476.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
272	Least Privilege Violation	Base	The elevated privilege level required to perform operations such as chroot() should be dropped immediately after the operation is performed. 		https://cwe.mitre.org/data/definitions/272.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
457	Use of Uninitialized Variable	Variant	The code uses a variable that has not been initialized, leading to unpredictable or unintended results. 	908,456	https://cwe.mitre.org/data/definitions/457.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
426	Untrusted Search Path	Base	The application searches for critical resources using an externally-supplied search path that can point to resources that are not under the application's direct control. 	427,428	https://cwe.mitre.org/data/definitions/426.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
319	Cleartext Transmission of Sensitive Information	Base	The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors. 	5	https://cwe.mitre.org/data/definitions/319.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
427	Uncontrolled Search Path Element	Base	The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors. 	426	https://cwe.mitre.org/data/definitions/427.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
506	Embedded Malicious Code	Class	The application contains code that appears to be malicious in nature. 	507,510,511,512	https://cwe.mitre.org/data/definitions/506.html
831	Signal Handler Function Associated with Multiple Signals	Base	The software defines a function that is used as a handler for more than one signal. 	364	https://cwe.mitre.org/data/definitions/831.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
194	Unexpected Sign Extension	Variant	The software performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses. 	681,681,681	https://cwe.mitre.org/data/definitions/194.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
404	Improper Resource Shutdown or Release	Class	The program does not release or incorrectly releases a resource before it is made available for re-use. 	262,263,299,459,763,772,1266,239,619,401,459,763,772,401,772,775,761,762,763,772,775	https://cwe.mitre.org/data/definitions/404.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
126	Buffer Over-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer. 	125,788,170	https://cwe.mitre.org/data/definitions/126.html
319	Cleartext Transmission of Sensitive Information	Base	The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors. 	5	https://cwe.mitre.org/data/definitions/319.html
404	Improper Resource Shutdown or Release	Class	The program does not release or incorrectly releases a resource before it is made available for re-use. 	262,263,299,459,763,772,1266,239,619,401,459,763,772,401,772,775,761,762,763,772,775	https://cwe.mitre.org/data/definitions/404.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
126	Buffer Over-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer. 	125,788,170	https://cwe.mitre.org/data/definitions/126.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
824	Access of Uninitialized Pointer	Base	The program accesses or uses a pointer that has not been initialized. 	125,787	https://cwe.mitre.org/data/definitions/824.html
194	Unexpected Sign Extension	Variant	The software performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses. 	681,681,681	https://cwe.mitre.org/data/definitions/194.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
191	Integer Underflow (Wrap or Wraparound)	Base	The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result. 		https://cwe.mitre.org/data/definitions/191.html
415	Double Free	Variant	The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations. 	825,123,416,364	https://cwe.mitre.org/data/definitions/415.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
476	NULL Pointer Dereference	Base	A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit. 	252,789,1325	https://cwe.mitre.org/data/definitions/476.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
195	Signed to Unsigned Conversion Error	Variant	The software uses a signed primitive and performs a cast to an unsigned primitive, which can produce an unexpected value if the value of the signed primitive can not be represented using an unsigned primitive. 	681,839,681,681	https://cwe.mitre.org/data/definitions/195.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
195	Signed to Unsigned Conversion Error	Variant	The software uses a signed primitive and performs a cast to an unsigned primitive, which can produce an unexpected value if the value of the signed primitive can not be represented using an unsigned primitive. 	681,839,681,681	https://cwe.mitre.org/data/definitions/195.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
401	Missing Release of Memory after Effective Lifetime	Variant	The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. 	772,390	https://cwe.mitre.org/data/definitions/401.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
400	Uncontrolled Resource Consumption	Class	The software does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources. 	770,771,779,920,1235,410,770,920	https://cwe.mitre.org/data/definitions/400.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
617	Reachable Assertion	Base	The product contains an assert() or similar statement that can be triggered by an attacker, which leads to an application exit or other behavior that is more severe than necessary. 	193	https://cwe.mitre.org/data/definitions/617.html
535	Exposure of Information Through Shell Error Message	Variant	A command shell error message indicates that there exists an unhandled exception in the web application code. In many cases, an attacker can leverage the conditions that cause these errors in order to gain unauthorized access to the system. 	211	https://cwe.mitre.org/data/definitions/535.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
197	Numeric Truncation Error	Base	Truncation errors occur when a primitive is cast to a primitive of a smaller size and data is lost in the conversion. 	681,192,194,195,196,681,681	https://cwe.mitre.org/data/definitions/197.html
319	Cleartext Transmission of Sensitive Information	Base	The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors. 	5	https://cwe.mitre.org/data/definitions/319.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
666	Operation on Resource in Wrong Phase of Lifetime	Class	The software performs an operation on a resource at the wrong phase of the resource's lifecycle, which can lead to unexpected behaviors. 	415,593,605,826	https://cwe.mitre.org/data/definitions/666.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
194	Unexpected Sign Extension	Variant	The software performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses. 	681,681,681	https://cwe.mitre.org/data/definitions/194.html
126	Buffer Over-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer. 	125,788,170	https://cwe.mitre.org/data/definitions/126.html
415	Double Free	Variant	The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations. 	825,123,416,364	https://cwe.mitre.org/data/definitions/415.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
191	Integer Underflow (Wrap or Wraparound)	Base	The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result. 		https://cwe.mitre.org/data/definitions/191.html
89	Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')	Base	The software constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. 	564,456,564,564	https://cwe.mitre.org/data/definitions/89.html
398				401,415,416,457,474,475,476,477	https://cwe.mitre.org/data/definitions/398.html
761	Free of Pointer not at Start of Buffer	Variant	The application calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer. 	763	https://cwe.mitre.org/data/definitions/761.html
319	Cleartext Transmission of Sensitive Information	Base	The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors. 	5	https://cwe.mitre.org/data/definitions/319.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
758	Reliance on Undefined, Unspecified, or Implementation-Defined Behavior	Class	The software uses an API function, data structure, or other entity in a way that relies on properties that are not always guaranteed to hold for that entity. 	474,562,587,588,1102,1103,1105	https://cwe.mitre.org/data/definitions/758.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
820	Missing Synchronization	Base	The software utilizes a shared resource in a concurrent manner but does not attempt to synchronize access to the resource. 	543,567,1096	https://cwe.mitre.org/data/definitions/820.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
457	Use of Uninitialized Variable	Variant	The code uses a variable that has not been initialized, leading to unpredictable or unintended results. 	908,456	https://cwe.mitre.org/data/definitions/457.html
761	Free of Pointer not at Start of Buffer	Variant	The application calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer. 	763	https://cwe.mitre.org/data/definitions/761.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
606	Unchecked Input for Loop Condition	Base	The product does not properly check inputs that are used for loop conditions, potentially leading to a denial of service or other consequences because of excessive looping. 	1284	https://cwe.mitre.org/data/definitions/606.html
506	Embedded Malicious Code	Class	The application contains code that appears to be malicious in nature. 	507,510,511,512	https://cwe.mitre.org/data/definitions/506.html
90	Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')	Base	The software constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended LDAP query when it is sent to a downstream component. 		https://cwe.mitre.org/data/definitions/90.html
416	Use After Free	Variant	Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code. 	825,415,364,1265,120,123	https://cwe.mitre.org/data/definitions/416.html
114	Process Control	Class	Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker. 	73	https://cwe.mitre.org/data/definitions/114.html
666	Operation on Resource in Wrong Phase of Lifetime	Class	The software performs an operation on a resource at the wrong phase of the resource's lifecycle, which can lead to unexpected behaviors. 	415,593,605,826	https://cwe.mitre.org/data/definitions/666.html
665	Improper Initialization	Class	The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used. 	454,455,770,908,909,1051,1052,1188,1221,1271,1279,908,909,1188,456,457,456,457	https://cwe.mitre.org/data/definitions/665.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
666	Operation on Resource in Wrong Phase of Lifetime	Class	The software performs an operation on a resource at the wrong phase of the resource's lifecycle, which can lead to unexpected behaviors. 	415,593,605,826	https://cwe.mitre.org/data/definitions/666.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
591	Sensitive Data Storage in Improperly Locked Memory	Variant	The application stores sensitive data in memory that is not locked, or that has been incorrectly locked, which might cause the memory to be written to swap files on disk by the virtual memory manager. This can make the data more accessible to external actors. 	413	https://cwe.mitre.org/data/definitions/591.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
543	Use of Singleton Pattern Without Synchronization in a Multithreaded Context	Variant	The software uses the singleton pattern when creating a resource within a multithreaded environment. 	820	https://cwe.mitre.org/data/definitions/543.html
761	Free of Pointer not at Start of Buffer	Variant	The application calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer. 	763	https://cwe.mitre.org/data/definitions/761.html
415	Double Free	Variant	The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations. 	825,123,416,364	https://cwe.mitre.org/data/definitions/415.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
588	Attempt to Access Child of a Non-structure Pointer	Variant	Casting a non-structure type to a structure type and accessing a field can lead to memory access errors or data corruption. 		https://cwe.mitre.org/data/definitions/588.html
126	Buffer Over-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer. 	125,788,170	https://cwe.mitre.org/data/definitions/126.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
412	Unrestricted Externally Accessible Lock	Base	The software properly checks for the existence of a lock, but the lock can be externally controlled or influenced by an actor that is outside of the intended sphere of control. 	410	https://cwe.mitre.org/data/definitions/412.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
114	Process Control	Class	Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker. 	73	https://cwe.mitre.org/data/definitions/114.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
400	Uncontrolled Resource Consumption	Class	The software does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources. 	770,771,779,920,1235,410,770,920	https://cwe.mitre.org/data/definitions/400.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
369	Divide By Zero	Base	The product divides a value by zero. 		https://cwe.mitre.org/data/definitions/369.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
194	Unexpected Sign Extension	Variant	The software performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses. 	681,681,681	https://cwe.mitre.org/data/definitions/194.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
606	Unchecked Input for Loop Condition	Base	The product does not properly check inputs that are used for loop conditions, potentially leading to a denial of service or other consequences because of excessive looping. 	1284	https://cwe.mitre.org/data/definitions/606.html
369	Divide By Zero	Base	The product divides a value by zero. 		https://cwe.mitre.org/data/definitions/369.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
476	NULL Pointer Dereference	Base	A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit. 	252,789,1325	https://cwe.mitre.org/data/definitions/476.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
114	Process Control	Class	Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker. 	73	https://cwe.mitre.org/data/definitions/114.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
123	Write-what-where Condition	Base	Any condition where the attacker has the ability to write an arbitrary value to an arbitrary location, often as the result of a buffer overflow. 	787,415,120,134,364,416,479,590	https://cwe.mitre.org/data/definitions/123.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
191	Integer Underflow (Wrap or Wraparound)	Base	The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result. 		https://cwe.mitre.org/data/definitions/191.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
401	Missing Release of Memory after Effective Lifetime	Variant	The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. 	772,390	https://cwe.mitre.org/data/definitions/401.html
606	Unchecked Input for Loop Condition	Base	The product does not properly check inputs that are used for loop conditions, potentially leading to a denial of service or other consequences because of excessive looping. 	1284	https://cwe.mitre.org/data/definitions/606.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
197	Numeric Truncation Error	Base	Truncation errors occur when a primitive is cast to a primitive of a smaller size and data is lost in the conversion. 	681,192,194,195,196,681,681	https://cwe.mitre.org/data/definitions/197.html
476	NULL Pointer Dereference	Base	A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit. 	252,789,1325	https://cwe.mitre.org/data/definitions/476.html
363	Race Condition Enabling Link Following	Base	The software checks the status of a file or directory before accessing it, which produces a race condition in which the file can be replaced with a link before the access is performed, causing the software to access the wrong file. 	367,59	https://cwe.mitre.org/data/definitions/363.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
427	Uncontrolled Search Path Element	Base	The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors. 	426	https://cwe.mitre.org/data/definitions/427.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
404	Improper Resource Shutdown or Release	Class	The program does not release or incorrectly releases a resource before it is made available for re-use. 	262,263,299,459,763,772,1266,239,619,401,459,763,772,401,772,775,761,762,763,772,775	https://cwe.mitre.org/data/definitions/404.html
252	Unchecked Return Value	Base	The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions. 	273,476	https://cwe.mitre.org/data/definitions/252.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
197	Numeric Truncation Error	Base	Truncation errors occur when a primitive is cast to a primitive of a smaller size and data is lost in the conversion. 	681,192,194,195,196,681,681	https://cwe.mitre.org/data/definitions/197.html
88	Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')	Base	The software constructs a string for a command to executed by a separate component in another control sphere, but it does not properly delimit the intended arguments, options, or switches within that command string. 		https://cwe.mitre.org/data/definitions/88.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
415	Double Free	Variant	The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations. 	825,123,416,364	https://cwe.mitre.org/data/definitions/415.html
194	Unexpected Sign Extension	Variant	The software performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses. 	681,681,681	https://cwe.mitre.org/data/definitions/194.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
484	Omitted Break Statement in Switch	Base	The program omits a break statement within a switch or similar construct, causing code associated with multiple conditions to execute. This can cause problems when the programmer only intended to execute code associated with one condition. 		https://cwe.mitre.org/data/definitions/484.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
197	Numeric Truncation Error	Base	Truncation errors occur when a primitive is cast to a primitive of a smaller size and data is lost in the conversion. 	681,192,194,195,196,681,681	https://cwe.mitre.org/data/definitions/197.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
369	Divide By Zero	Base	The product divides a value by zero. 		https://cwe.mitre.org/data/definitions/369.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
369	Divide By Zero	Base	The product divides a value by zero. 		https://cwe.mitre.org/data/definitions/369.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
591	Sensitive Data Storage in Improperly Locked Memory	Variant	The application stores sensitive data in memory that is not locked, or that has been incorrectly locked, which might cause the memory to be written to swap files on disk by the virtual memory manager. This can make the data more accessible to external actors. 	413	https://cwe.mitre.org/data/definitions/591.html
321	Use of Hard-coded Cryptographic Key	Variant	The use of a hard-coded cryptographic key significantly increases the possibility that encrypted data may be recovered. 	798,259,1291,656,798,798	https://cwe.mitre.org/data/definitions/321.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
476	NULL Pointer Dereference	Base	A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit. 	252,789,1325	https://cwe.mitre.org/data/definitions/476.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
427	Uncontrolled Search Path Element	Base	The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors. 	426	https://cwe.mitre.org/data/definitions/427.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
506	Embedded Malicious Code	Class	The application contains code that appears to be malicious in nature. 	507,510,511,512	https://cwe.mitre.org/data/definitions/506.html
119	Improper Restriction of Operations within the Bounds of a Memory Buffer	Class	The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer. 	120,125,466,786,787,788,805,822,823,824,825,128,129,131,190,193,195,839,843,1257,1260,1339,120,125,787,824,120,123,125,130,786,787,788,805,822,823,824,825,120,123,125,130,786,787,788,805,822,823,824,825	https://cwe.mitre.org/data/definitions/119.html
457	Use of Uninitialized Variable	Variant	The code uses a variable that has not been initialized, leading to unpredictable or unintended results. 	908,456	https://cwe.mitre.org/data/definitions/457.html
771	Missing Reference to Active Allocated Resource	Base	The software does not properly maintain a reference to a resource that has been allocated, which prevents the resource from being reclaimed. 	773	https://cwe.mitre.org/data/definitions/771.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
126	Buffer Over-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer. 	125,788,170	https://cwe.mitre.org/data/definitions/126.html
390	Detection of Error Condition Without Action	Base	The software detects a specific error, but takes no actions to handle the error. 	600,401	https://cwe.mitre.org/data/definitions/390.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
363	Race Condition Enabling Link Following	Base	The software checks the status of a file or directory before accessing it, which produces a race condition in which the file can be replaced with a link before the access is performed, causing the software to access the wrong file. 	367,59	https://cwe.mitre.org/data/definitions/363.html
401	Missing Release of Memory after Effective Lifetime	Variant	The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. 	772,390	https://cwe.mitre.org/data/definitions/401.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
427	Uncontrolled Search Path Element	Base	The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors. 	426	https://cwe.mitre.org/data/definitions/427.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
195	Signed to Unsigned Conversion Error	Variant	The software uses a signed primitive and performs a cast to an unsigned primitive, which can produce an unexpected value if the value of the signed primitive can not be represented using an unsigned primitive. 	681,839,681,681	https://cwe.mitre.org/data/definitions/195.html
197	Numeric Truncation Error	Base	Truncation errors occur when a primitive is cast to a primitive of a smaller size and data is lost in the conversion. 	681,192,194,195,196,681,681	https://cwe.mitre.org/data/definitions/197.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
259	Use of Hard-coded Password	Variant	The software contains a hard-coded password, which it uses for its own inbound authentication or for outbound communication to external components. 	798,321,257,656,798,798	https://cwe.mitre.org/data/definitions/259.html
617	Reachable Assertion	Base	The product contains an assert() or similar statement that can be triggered by an attacker, which leads to an application exit or other behavior that is more severe than necessary. 	193	https://cwe.mitre.org/data/definitions/617.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
415	Double Free	Variant	The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations. 	825,123,416,364	https://cwe.mitre.org/data/definitions/415.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
195	Signed to Unsigned Conversion Error	Variant	The software uses a signed primitive and performs a cast to an unsigned primitive, which can produce an unexpected value if the value of the signed primitive can not be represented using an unsigned primitive. 	681,839,681,681	https://cwe.mitre.org/data/definitions/195.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
114	Process Control	Class	Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker. 	73	https://cwe.mitre.org/data/definitions/114.html
119	Improper Restriction of Operations within the Bounds of a Memory Buffer	Class	The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer. 	120,125,466,786,787,788,805,822,823,824,825,128,129,131,190,193,195,839,843,1257,1260,1339,120,125,787,824,120,123,125,130,786,787,788,805,822,823,824,825,120,123,125,130,786,787,788,805,822,823,824,825	https://cwe.mitre.org/data/definitions/119.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
252	Unchecked Return Value	Base	The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions. 	273,476	https://cwe.mitre.org/data/definitions/252.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
191	Integer Underflow (Wrap or Wraparound)	Base	The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result. 		https://cwe.mitre.org/data/definitions/191.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
666	Operation on Resource in Wrong Phase of Lifetime	Class	The software performs an operation on a resource at the wrong phase of the resource's lifecycle, which can lead to unexpected behaviors. 	415,593,605,826	https://cwe.mitre.org/data/definitions/666.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
401	Missing Release of Memory after Effective Lifetime	Variant	The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. 	772,390	https://cwe.mitre.org/data/definitions/401.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
617	Reachable Assertion	Base	The product contains an assert() or similar statement that can be triggered by an attacker, which leads to an application exit or other behavior that is more severe than necessary. 	193	https://cwe.mitre.org/data/definitions/617.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
457	Use of Uninitialized Variable	Variant	The code uses a variable that has not been initialized, leading to unpredictable or unintended results. 	908,456	https://cwe.mitre.org/data/definitions/457.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
761	Free of Pointer not at Start of Buffer	Variant	The application calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer. 	763	https://cwe.mitre.org/data/definitions/761.html
195	Signed to Unsigned Conversion Error	Variant	The software uses a signed primitive and performs a cast to an unsigned primitive, which can produce an unexpected value if the value of the signed primitive can not be represented using an unsigned primitive. 	681,839,681,681	https://cwe.mitre.org/data/definitions/195.html
427	Uncontrolled Search Path Element	Base	The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors. 	426	https://cwe.mitre.org/data/definitions/427.html
369	Divide By Zero	Base	The product divides a value by zero. 		https://cwe.mitre.org/data/definitions/369.html
126	Buffer Over-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer. 	125,788,170	https://cwe.mitre.org/data/definitions/126.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
416	Use After Free	Variant	Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code. 	825,415,364,1265,120,123	https://cwe.mitre.org/data/definitions/416.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
765	Multiple Unlocks of a Critical Resource	Base	The software unlocks a critical resource more times than intended, leading to an unexpected state in the system. 		https://cwe.mitre.org/data/definitions/765.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
427	Uncontrolled Search Path Element	Base	The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors. 	426	https://cwe.mitre.org/data/definitions/427.html
427	Uncontrolled Search Path Element	Base	The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors. 	426	https://cwe.mitre.org/data/definitions/427.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
284	Improper Access Control	Pillar	The software does not restrict or incorrectly restricts access to a resource from an unauthorized actor. 	346,942,1220,1224,1231,1242,1252,1256,1257,1259,1260,1262,1267,1268,1270,1274,1275,1276,1280,1283,1290,1292,1296,1304,1311,1312,1313,1315,1316,1317,1320,1323,1334,288,639	https://cwe.mitre.org/data/definitions/284.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
401	Missing Release of Memory after Effective Lifetime	Variant	The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. 	772,390	https://cwe.mitre.org/data/definitions/401.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
253	Incorrect Check of Function Return Value	Base	The software incorrectly checks a return value from a function, which prevents the software from detecting errors or exceptional conditions. 		https://cwe.mitre.org/data/definitions/253.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
195	Signed to Unsigned Conversion Error	Variant	The software uses a signed primitive and performs a cast to an unsigned primitive, which can produce an unexpected value if the value of the signed primitive can not be represented using an unsigned primitive. 	681,839,681,681	https://cwe.mitre.org/data/definitions/195.html
400	Uncontrolled Resource Consumption	Class	The software does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources. 	770,771,779,920,1235,410,770,920	https://cwe.mitre.org/data/definitions/400.html
761	Free of Pointer not at Start of Buffer	Variant	The application calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer. 	763	https://cwe.mitre.org/data/definitions/761.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
194	Unexpected Sign Extension	Variant	The software performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses. 	681,681,681	https://cwe.mitre.org/data/definitions/194.html
119	Improper Restriction of Operations within the Bounds of a Memory Buffer	Class	The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer. 	120,125,466,786,787,788,805,822,823,824,825,128,129,131,190,193,195,839,843,1257,1260,1339,120,125,787,824,120,123,125,130,786,787,788,805,822,823,824,825,120,123,125,130,786,787,788,805,822,823,824,825	https://cwe.mitre.org/data/definitions/119.html
319	Cleartext Transmission of Sensitive Information	Base	The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors. 	5	https://cwe.mitre.org/data/definitions/319.html
476	NULL Pointer Dereference	Base	A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit. 	252,789,1325	https://cwe.mitre.org/data/definitions/476.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
427	Uncontrolled Search Path Element	Base	The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors. 	426	https://cwe.mitre.org/data/definitions/427.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
195	Signed to Unsigned Conversion Error	Variant	The software uses a signed primitive and performs a cast to an unsigned primitive, which can produce an unexpected value if the value of the signed primitive can not be represented using an unsigned primitive. 	681,839,681,681	https://cwe.mitre.org/data/definitions/195.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
690	Unchecked Return Value to NULL Pointer Dereference	Compound	The product does not check for an error after calling a function that can return with a NULL pointer if the function fails, which leads to a resultant NULL pointer dereference. 	252,476,476	https://cwe.mitre.org/data/definitions/690.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
126	Buffer Over-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer. 	125,788,170	https://cwe.mitre.org/data/definitions/126.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
400	Uncontrolled Resource Consumption	Class	The software does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources. 	770,771,779,920,1235,410,770,920	https://cwe.mitre.org/data/definitions/400.html
252	Unchecked Return Value	Base	The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions. 	273,476	https://cwe.mitre.org/data/definitions/252.html
126	Buffer Over-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer. 	125,788,170	https://cwe.mitre.org/data/definitions/126.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
606	Unchecked Input for Loop Condition	Base	The product does not properly check inputs that are used for loop conditions, potentially leading to a denial of service or other consequences because of excessive looping. 	1284	https://cwe.mitre.org/data/definitions/606.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
114	Process Control	Class	Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker. 	73	https://cwe.mitre.org/data/definitions/114.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
195	Signed to Unsigned Conversion Error	Variant	The software uses a signed primitive and performs a cast to an unsigned primitive, which can produce an unexpected value if the value of the signed primitive can not be represented using an unsigned primitive. 	681,839,681,681	https://cwe.mitre.org/data/definitions/195.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
606	Unchecked Input for Loop Condition	Base	The product does not properly check inputs that are used for loop conditions, potentially leading to a denial of service or other consequences because of excessive looping. 	1284	https://cwe.mitre.org/data/definitions/606.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
256	Plaintext Storage of a Password	Base	Storing a password in plaintext may result in a system compromise. 		https://cwe.mitre.org/data/definitions/256.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
194	Unexpected Sign Extension	Variant	The software performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses. 	681,681,681	https://cwe.mitre.org/data/definitions/194.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
400	Uncontrolled Resource Consumption	Class	The software does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources. 	770,771,779,920,1235,410,770,920	https://cwe.mitre.org/data/definitions/400.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
415	Double Free	Variant	The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations. 	825,123,416,364	https://cwe.mitre.org/data/definitions/415.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
469	Use of Pointer Subtraction to Determine Size	Base	The application subtracts one pointer from another in order to determine size, but this calculation can be incorrect if the pointers do not exist in the same memory chunk. 		https://cwe.mitre.org/data/definitions/469.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
690	Unchecked Return Value to NULL Pointer Dereference	Compound	The product does not check for an error after calling a function that can return with a NULL pointer if the function fails, which leads to a resultant NULL pointer dereference. 	252,476,476	https://cwe.mitre.org/data/definitions/690.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
416	Use After Free	Variant	Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code. 	825,415,364,1265,120,123	https://cwe.mitre.org/data/definitions/416.html
195	Signed to Unsigned Conversion Error	Variant	The software uses a signed primitive and performs a cast to an unsigned primitive, which can produce an unexpected value if the value of the signed primitive can not be represented using an unsigned primitive. 	681,839,681,681	https://cwe.mitre.org/data/definitions/195.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
191	Integer Underflow (Wrap or Wraparound)	Base	The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result. 		https://cwe.mitre.org/data/definitions/191.html
666	Operation on Resource in Wrong Phase of Lifetime	Class	The software performs an operation on a resource at the wrong phase of the resource's lifecycle, which can lead to unexpected behaviors. 	415,593,605,826	https://cwe.mitre.org/data/definitions/666.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
401	Missing Release of Memory after Effective Lifetime	Variant	The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. 	772,390	https://cwe.mitre.org/data/definitions/401.html
765	Multiple Unlocks of a Critical Resource	Base	The software unlocks a critical resource more times than intended, leading to an unexpected state in the system. 		https://cwe.mitre.org/data/definitions/765.html
401	Missing Release of Memory after Effective Lifetime	Variant	The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. 	772,390	https://cwe.mitre.org/data/definitions/401.html
253	Incorrect Check of Function Return Value	Base	The software incorrectly checks a return value from a function, which prevents the software from detecting errors or exceptional conditions. 		https://cwe.mitre.org/data/definitions/253.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
606	Unchecked Input for Loop Condition	Base	The product does not properly check inputs that are used for loop conditions, potentially leading to a denial of service or other consequences because of excessive looping. 	1284	https://cwe.mitre.org/data/definitions/606.html
416	Use After Free	Variant	Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code. 	825,415,364,1265,120,123	https://cwe.mitre.org/data/definitions/416.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
369	Divide By Zero	Base	The product divides a value by zero. 		https://cwe.mitre.org/data/definitions/369.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
835	Loop with Unreachable Exit Condition ('Infinite Loop')	Base	The program contains an iteration or loop with an exit condition that cannot be reached, i.e., an infinite loop. 	1322	https://cwe.mitre.org/data/definitions/835.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
319	Cleartext Transmission of Sensitive Information	Base	The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors. 	5	https://cwe.mitre.org/data/definitions/319.html
195	Signed to Unsigned Conversion Error	Variant	The software uses a signed primitive and performs a cast to an unsigned primitive, which can produce an unexpected value if the value of the signed primitive can not be represented using an unsigned primitive. 	681,839,681,681	https://cwe.mitre.org/data/definitions/195.html
824	Access of Uninitialized Pointer	Base	The program accesses or uses a pointer that has not been initialized. 	125,787	https://cwe.mitre.org/data/definitions/824.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
253	Incorrect Check of Function Return Value	Base	The software incorrectly checks a return value from a function, which prevents the software from detecting errors or exceptional conditions. 		https://cwe.mitre.org/data/definitions/253.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
416	Use After Free	Variant	Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code. 	825,415,364,1265,120,123	https://cwe.mitre.org/data/definitions/416.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
369	Divide By Zero	Base	The product divides a value by zero. 		https://cwe.mitre.org/data/definitions/369.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
427	Uncontrolled Search Path Element	Base	The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors. 	426	https://cwe.mitre.org/data/definitions/427.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
194	Unexpected Sign Extension	Variant	The software performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses. 	681,681,681	https://cwe.mitre.org/data/definitions/194.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
253	Incorrect Check of Function Return Value	Base	The software incorrectly checks a return value from a function, which prevents the software from detecting errors or exceptional conditions. 		https://cwe.mitre.org/data/definitions/253.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
416	Use After Free	Variant	Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code. 	825,415,364,1265,120,123	https://cwe.mitre.org/data/definitions/416.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
415	Double Free	Variant	The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations. 	825,123,416,364	https://cwe.mitre.org/data/definitions/415.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
194	Unexpected Sign Extension	Variant	The software performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses. 	681,681,681	https://cwe.mitre.org/data/definitions/194.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
88	Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')	Base	The software constructs a string for a command to executed by a separate component in another control sphere, but it does not properly delimit the intended arguments, options, or switches within that command string. 		https://cwe.mitre.org/data/definitions/88.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
457	Use of Uninitialized Variable	Variant	The code uses a variable that has not been initialized, leading to unpredictable or unintended results. 	908,456	https://cwe.mitre.org/data/definitions/457.html
761	Free of Pointer not at Start of Buffer	Variant	The application calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer. 	763	https://cwe.mitre.org/data/definitions/761.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
195	Signed to Unsigned Conversion Error	Variant	The software uses a signed primitive and performs a cast to an unsigned primitive, which can produce an unexpected value if the value of the signed primitive can not be represented using an unsigned primitive. 	681,839,681,681	https://cwe.mitre.org/data/definitions/195.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
761	Free of Pointer not at Start of Buffer	Variant	The application calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer. 	763	https://cwe.mitre.org/data/definitions/761.html
80	Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)	Variant	The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters such as "&lt;", "&gt;", and "&amp;" that could be interpreted as web-scripting elements when they are sent to a downstream component that processes web pages. 	79	https://cwe.mitre.org/data/definitions/80.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
476	NULL Pointer Dereference	Base	A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit. 	252,789,1325	https://cwe.mitre.org/data/definitions/476.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
761	Free of Pointer not at Start of Buffer	Variant	The application calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer. 	763	https://cwe.mitre.org/data/definitions/761.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
457	Use of Uninitialized Variable	Variant	The code uses a variable that has not been initialized, leading to unpredictable or unintended results. 	908,456	https://cwe.mitre.org/data/definitions/457.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
253	Incorrect Check of Function Return Value	Base	The software incorrectly checks a return value from a function, which prevents the software from detecting errors or exceptional conditions. 		https://cwe.mitre.org/data/definitions/253.html
690	Unchecked Return Value to NULL Pointer Dereference	Compound	The product does not check for an error after calling a function that can return with a NULL pointer if the function fails, which leads to a resultant NULL pointer dereference. 	252,476,476	https://cwe.mitre.org/data/definitions/690.html
773	Missing Reference to Active File Descriptor or Handle	Variant	The software does not properly maintain references to a file descriptor or handle, which prevents that file descriptor/handle from being reclaimed. 	771	https://cwe.mitre.org/data/definitions/773.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
400	Uncontrolled Resource Consumption	Class	The software does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources. 	770,771,779,920,1235,410,770,920	https://cwe.mitre.org/data/definitions/400.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
690	Unchecked Return Value to NULL Pointer Dereference	Compound	The product does not check for an error after calling a function that can return with a NULL pointer if the function fails, which leads to a resultant NULL pointer dereference. 	252,476,476	https://cwe.mitre.org/data/definitions/690.html
369	Divide By Zero	Base	The product divides a value by zero. 		https://cwe.mitre.org/data/definitions/369.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
398				401,415,416,457,474,475,476,477	https://cwe.mitre.org/data/definitions/398.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
476	NULL Pointer Dereference	Base	A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit. 	252,789,1325	https://cwe.mitre.org/data/definitions/476.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
764	Multiple Locks of a Critical Resource	Base	The software locks a critical resource more times than intended, leading to an unexpected state in the system. 		https://cwe.mitre.org/data/definitions/764.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
404	Improper Resource Shutdown or Release	Class	The program does not release or incorrectly releases a resource before it is made available for re-use. 	262,263,299,459,763,772,1266,239,619,401,459,763,772,401,772,775,761,762,763,772,775	https://cwe.mitre.org/data/definitions/404.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
89	Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')	Base	The software constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. 	564,456,564,564	https://cwe.mitre.org/data/definitions/89.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
690	Unchecked Return Value to NULL Pointer Dereference	Compound	The product does not check for an error after calling a function that can return with a NULL pointer if the function fails, which leads to a resultant NULL pointer dereference. 	252,476,476	https://cwe.mitre.org/data/definitions/690.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
244	Improper Clearing of Heap Memory Before Release ('Heap Inspection')	Variant	Using realloc() to resize buffers that store sensitive information can leave the sensitive information exposed to attack, because it is not removed from memory. 	226	https://cwe.mitre.org/data/definitions/244.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
606	Unchecked Input for Loop Condition	Base	The product does not properly check inputs that are used for loop conditions, potentially leading to a denial of service or other consequences because of excessive looping. 	1284	https://cwe.mitre.org/data/definitions/606.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
427	Uncontrolled Search Path Element	Base	The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors. 	426	https://cwe.mitre.org/data/definitions/427.html
401	Missing Release of Memory after Effective Lifetime	Variant	The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. 	772,390	https://cwe.mitre.org/data/definitions/401.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
114	Process Control	Class	Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker. 	73	https://cwe.mitre.org/data/definitions/114.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
404	Improper Resource Shutdown or Release	Class	The program does not release or incorrectly releases a resource before it is made available for re-use. 	262,263,299,459,763,772,1266,239,619,401,459,763,772,401,772,775,761,762,763,772,775	https://cwe.mitre.org/data/definitions/404.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
319	Cleartext Transmission of Sensitive Information	Base	The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors. 	5	https://cwe.mitre.org/data/definitions/319.html
197	Numeric Truncation Error	Base	Truncation errors occur when a primitive is cast to a primitive of a smaller size and data is lost in the conversion. 	681,192,194,195,196,681,681	https://cwe.mitre.org/data/definitions/197.html
690	Unchecked Return Value to NULL Pointer Dereference	Compound	The product does not check for an error after calling a function that can return with a NULL pointer if the function fails, which leads to a resultant NULL pointer dereference. 	252,476,476	https://cwe.mitre.org/data/definitions/690.html
195	Signed to Unsigned Conversion Error	Variant	The software uses a signed primitive and performs a cast to an unsigned primitive, which can produce an unexpected value if the value of the signed primitive can not be represented using an unsigned primitive. 	681,839,681,681	https://cwe.mitre.org/data/definitions/195.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
401	Missing Release of Memory after Effective Lifetime	Variant	The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. 	772,390	https://cwe.mitre.org/data/definitions/401.html
319	Cleartext Transmission of Sensitive Information	Base	The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors. 	5	https://cwe.mitre.org/data/definitions/319.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
253	Incorrect Check of Function Return Value	Base	The software incorrectly checks a return value from a function, which prevents the software from detecting errors or exceptional conditions. 		https://cwe.mitre.org/data/definitions/253.html
191	Integer Underflow (Wrap or Wraparound)	Base	The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result. 		https://cwe.mitre.org/data/definitions/191.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
690	Unchecked Return Value to NULL Pointer Dereference	Compound	The product does not check for an error after calling a function that can return with a NULL pointer if the function fails, which leads to a resultant NULL pointer dereference. 	252,476,476	https://cwe.mitre.org/data/definitions/690.html
758	Reliance on Undefined, Unspecified, or Implementation-Defined Behavior	Class	The software uses an API function, data structure, or other entity in a way that relies on properties that are not always guaranteed to hold for that entity. 	474,562,587,588,1102,1103,1105	https://cwe.mitre.org/data/definitions/758.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
114	Process Control	Class	Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker. 	73	https://cwe.mitre.org/data/definitions/114.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
617	Reachable Assertion	Base	The product contains an assert() or similar statement that can be triggered by an attacker, which leads to an application exit or other behavior that is more severe than necessary. 	193	https://cwe.mitre.org/data/definitions/617.html
690	Unchecked Return Value to NULL Pointer Dereference	Compound	The product does not check for an error after calling a function that can return with a NULL pointer if the function fails, which leads to a resultant NULL pointer dereference. 	252,476,476	https://cwe.mitre.org/data/definitions/690.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
126	Buffer Over-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer. 	125,788,170	https://cwe.mitre.org/data/definitions/126.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
758	Reliance on Undefined, Unspecified, or Implementation-Defined Behavior	Class	The software uses an API function, data structure, or other entity in a way that relies on properties that are not always guaranteed to hold for that entity. 	474,562,587,588,1102,1103,1105	https://cwe.mitre.org/data/definitions/758.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
114	Process Control	Class	Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker. 	73	https://cwe.mitre.org/data/definitions/114.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
400	Uncontrolled Resource Consumption	Class	The software does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources. 	770,771,779,920,1235,410,770,920	https://cwe.mitre.org/data/definitions/400.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
119	Improper Restriction of Operations within the Bounds of a Memory Buffer	Class	The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer. 	120,125,466,786,787,788,805,822,823,824,825,128,129,131,190,193,195,839,843,1257,1260,1339,120,125,787,824,120,123,125,130,786,787,788,805,822,823,824,825,120,123,125,130,786,787,788,805,822,823,824,825	https://cwe.mitre.org/data/definitions/119.html
398				401,415,416,457,474,475,476,477	https://cwe.mitre.org/data/definitions/398.html
195	Signed to Unsigned Conversion Error	Variant	The software uses a signed primitive and performs a cast to an unsigned primitive, which can produce an unexpected value if the value of the signed primitive can not be represented using an unsigned primitive. 	681,839,681,681	https://cwe.mitre.org/data/definitions/195.html
123	Write-what-where Condition	Base	Any condition where the attacker has the ability to write an arbitrary value to an arbitrary location, often as the result of a buffer overflow. 	787,415,120,134,364,416,479,590	https://cwe.mitre.org/data/definitions/123.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
761	Free of Pointer not at Start of Buffer	Variant	The application calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer. 	763	https://cwe.mitre.org/data/definitions/761.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
226	Sensitive Information in Resource Not Removed Before Reuse	Base	When a device releases a resource such as memory or a file for reuse by other entities, information contained in the resource is not fully cleared prior to reuse of the resource. 	212,459,244,1239,1272,1301,201	https://cwe.mitre.org/data/definitions/226.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
114	Process Control	Class	Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker. 	73	https://cwe.mitre.org/data/definitions/114.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
252	Unchecked Return Value	Base	The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions. 	273,476	https://cwe.mitre.org/data/definitions/252.html
690	Unchecked Return Value to NULL Pointer Dereference	Compound	The product does not check for an error after calling a function that can return with a NULL pointer if the function fails, which leads to a resultant NULL pointer dereference. 	252,476,476	https://cwe.mitre.org/data/definitions/690.html
369	Divide By Zero	Base	The product divides a value by zero. 		https://cwe.mitre.org/data/definitions/369.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
666	Operation on Resource in Wrong Phase of Lifetime	Class	The software performs an operation on a resource at the wrong phase of the resource's lifecycle, which can lead to unexpected behaviors. 	415,593,605,826	https://cwe.mitre.org/data/definitions/666.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
606	Unchecked Input for Loop Condition	Base	The product does not properly check inputs that are used for loop conditions, potentially leading to a denial of service or other consequences because of excessive looping. 	1284	https://cwe.mitre.org/data/definitions/606.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
457	Use of Uninitialized Variable	Variant	The code uses a variable that has not been initialized, leading to unpredictable or unintended results. 	908,456	https://cwe.mitre.org/data/definitions/457.html
400	Uncontrolled Resource Consumption	Class	The software does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources. 	770,771,779,920,1235,410,770,920	https://cwe.mitre.org/data/definitions/400.html
126	Buffer Over-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer. 	125,788,170	https://cwe.mitre.org/data/definitions/126.html
194	Unexpected Sign Extension	Variant	The software performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses. 	681,681,681	https://cwe.mitre.org/data/definitions/194.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
89	Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')	Base	The software constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. 	564,456,564,564	https://cwe.mitre.org/data/definitions/89.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
369	Divide By Zero	Base	The product divides a value by zero. 		https://cwe.mitre.org/data/definitions/369.html
197	Numeric Truncation Error	Base	Truncation errors occur when a primitive is cast to a primitive of a smaller size and data is lost in the conversion. 	681,192,194,195,196,681,681	https://cwe.mitre.org/data/definitions/197.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
256	Plaintext Storage of a Password	Base	Storing a password in plaintext may result in a system compromise. 		https://cwe.mitre.org/data/definitions/256.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
194	Unexpected Sign Extension	Variant	The software performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses. 	681,681,681	https://cwe.mitre.org/data/definitions/194.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
89	Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')	Base	The software constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. 	564,456,564,564	https://cwe.mitre.org/data/definitions/89.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
126	Buffer Over-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer. 	125,788,170	https://cwe.mitre.org/data/definitions/126.html
191	Integer Underflow (Wrap or Wraparound)	Base	The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result. 		https://cwe.mitre.org/data/definitions/191.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
620	Unverified Password Change	Base	When setting a new password for a user, the product does not require knowledge of the original password, or using another form of authentication. 		https://cwe.mitre.org/data/definitions/620.html
469	Use of Pointer Subtraction to Determine Size	Base	The application subtracts one pointer from another in order to determine size, but this calculation can be incorrect if the pointers do not exist in the same memory chunk. 		https://cwe.mitre.org/data/definitions/469.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
195	Signed to Unsigned Conversion Error	Variant	The software uses a signed primitive and performs a cast to an unsigned primitive, which can produce an unexpected value if the value of the signed primitive can not be represented using an unsigned primitive. 	681,839,681,681	https://cwe.mitre.org/data/definitions/195.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
126	Buffer Over-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer. 	125,788,170	https://cwe.mitre.org/data/definitions/126.html
114	Process Control	Class	Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker. 	73	https://cwe.mitre.org/data/definitions/114.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
806	Buffer Access Using Size of Source Buffer	Variant	The software uses the size of a source buffer when reading from or writing to a destination buffer, which may cause it to access memory that is outside of the bounds of the buffer. 	805	https://cwe.mitre.org/data/definitions/806.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
253	Incorrect Check of Function Return Value	Base	The software incorrectly checks a return value from a function, which prevents the software from detecting errors or exceptional conditions. 		https://cwe.mitre.org/data/definitions/253.html
475	Undefined Behavior for Input to API	Base	The behavior of this function is undefined unless its control parameter is set to a specific value. 		https://cwe.mitre.org/data/definitions/475.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
191	Integer Underflow (Wrap or Wraparound)	Base	The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result. 		https://cwe.mitre.org/data/definitions/191.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
369	Divide By Zero	Base	The product divides a value by zero. 		https://cwe.mitre.org/data/definitions/369.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
126	Buffer Over-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer. 	125,788,170	https://cwe.mitre.org/data/definitions/126.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
194	Unexpected Sign Extension	Variant	The software performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses. 	681,681,681	https://cwe.mitre.org/data/definitions/194.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
457	Use of Uninitialized Variable	Variant	The code uses a variable that has not been initialized, leading to unpredictable or unintended results. 	908,456	https://cwe.mitre.org/data/definitions/457.html
771	Missing Reference to Active Allocated Resource	Base	The software does not properly maintain a reference to a resource that has been allocated, which prevents the resource from being reclaimed. 	773	https://cwe.mitre.org/data/definitions/771.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
253	Incorrect Check of Function Return Value	Base	The software incorrectly checks a return value from a function, which prevents the software from detecting errors or exceptional conditions. 		https://cwe.mitre.org/data/definitions/253.html
457	Use of Uninitialized Variable	Variant	The code uses a variable that has not been initialized, leading to unpredictable or unintended results. 	908,456	https://cwe.mitre.org/data/definitions/457.html
457	Use of Uninitialized Variable	Variant	The code uses a variable that has not been initialized, leading to unpredictable or unintended results. 	908,456	https://cwe.mitre.org/data/definitions/457.html
197	Numeric Truncation Error	Base	Truncation errors occur when a primitive is cast to a primitive of a smaller size and data is lost in the conversion. 	681,192,194,195,196,681,681	https://cwe.mitre.org/data/definitions/197.html
119	Improper Restriction of Operations within the Bounds of a Memory Buffer	Class	The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer. 	120,125,466,786,787,788,805,822,823,824,825,128,129,131,190,193,195,839,843,1257,1260,1339,120,125,787,824,120,123,125,130,786,787,788,805,822,823,824,825,120,123,125,130,786,787,788,805,822,823,824,825	https://cwe.mitre.org/data/definitions/119.html
197	Numeric Truncation Error	Base	Truncation errors occur when a primitive is cast to a primitive of a smaller size and data is lost in the conversion. 	681,192,194,195,196,681,681	https://cwe.mitre.org/data/definitions/197.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
194	Unexpected Sign Extension	Variant	The software performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses. 	681,681,681	https://cwe.mitre.org/data/definitions/194.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
476	NULL Pointer Dereference	Base	A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit. 	252,789,1325	https://cwe.mitre.org/data/definitions/476.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
476	NULL Pointer Dereference	Base	A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit. 	252,789,1325	https://cwe.mitre.org/data/definitions/476.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
457	Use of Uninitialized Variable	Variant	The code uses a variable that has not been initialized, leading to unpredictable or unintended results. 	908,456	https://cwe.mitre.org/data/definitions/457.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
195	Signed to Unsigned Conversion Error	Variant	The software uses a signed primitive and performs a cast to an unsigned primitive, which can produce an unexpected value if the value of the signed primitive can not be represented using an unsigned primitive. 	681,839,681,681	https://cwe.mitre.org/data/definitions/195.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
761	Free of Pointer not at Start of Buffer	Variant	The application calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer. 	763	https://cwe.mitre.org/data/definitions/761.html
272	Least Privilege Violation	Base	The elevated privilege level required to perform operations such as chroot() should be dropped immediately after the operation is performed. 		https://cwe.mitre.org/data/definitions/272.html
401	Missing Release of Memory after Effective Lifetime	Variant	The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. 	772,390	https://cwe.mitre.org/data/definitions/401.html
114	Process Control	Class	Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker. 	73	https://cwe.mitre.org/data/definitions/114.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
126	Buffer Over-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer. 	125,788,170	https://cwe.mitre.org/data/definitions/126.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
459	Incomplete Cleanup	Base	The software does not properly "clean up" and remove temporary or supporting resources after they have been used. 	226,460,568	https://cwe.mitre.org/data/definitions/459.html
369	Divide By Zero	Base	The product divides a value by zero. 		https://cwe.mitre.org/data/definitions/369.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
415	Double Free	Variant	The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations. 	825,123,416,364	https://cwe.mitre.org/data/definitions/415.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
476	NULL Pointer Dereference	Base	A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit. 	252,789,1325	https://cwe.mitre.org/data/definitions/476.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
457	Use of Uninitialized Variable	Variant	The code uses a variable that has not been initialized, leading to unpredictable or unintended results. 	908,456	https://cwe.mitre.org/data/definitions/457.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
506	Embedded Malicious Code	Class	The application contains code that appears to be malicious in nature. 	507,510,511,512	https://cwe.mitre.org/data/definitions/506.html
476	NULL Pointer Dereference	Base	A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit. 	252,789,1325	https://cwe.mitre.org/data/definitions/476.html
364	Signal Handler Race Condition	Base	The software uses a signal handler that introduces a race condition. 	432,828,831,365,123,415,416	https://cwe.mitre.org/data/definitions/364.html
369	Divide By Zero	Base	The product divides a value by zero. 		https://cwe.mitre.org/data/definitions/369.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
415	Double Free	Variant	The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations. 	825,123,416,364	https://cwe.mitre.org/data/definitions/415.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
119	Improper Restriction of Operations within the Bounds of a Memory Buffer	Class	The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer. 	120,125,466,786,787,788,805,822,823,824,825,128,129,131,190,193,195,839,843,1257,1260,1339,120,125,787,824,120,123,125,130,786,787,788,805,822,823,824,825,120,123,125,130,786,787,788,805,822,823,824,825	https://cwe.mitre.org/data/definitions/119.html
401	Missing Release of Memory after Effective Lifetime	Variant	The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. 	772,390	https://cwe.mitre.org/data/definitions/401.html
758	Reliance on Undefined, Unspecified, or Implementation-Defined Behavior	Class	The software uses an API function, data structure, or other entity in a way that relies on properties that are not always guaranteed to hold for that entity. 	474,562,587,588,1102,1103,1105	https://cwe.mitre.org/data/definitions/758.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
761	Free of Pointer not at Start of Buffer	Variant	The application calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer. 	763	https://cwe.mitre.org/data/definitions/761.html
617	Reachable Assertion	Base	The product contains an assert() or similar statement that can be triggered by an attacker, which leads to an application exit or other behavior that is more severe than necessary. 	193	https://cwe.mitre.org/data/definitions/617.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
415	Double Free	Variant	The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations. 	825,123,416,364	https://cwe.mitre.org/data/definitions/415.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
369	Divide By Zero	Base	The product divides a value by zero. 		https://cwe.mitre.org/data/definitions/369.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
835	Loop with Unreachable Exit Condition ('Infinite Loop')	Base	The program contains an iteration or loop with an exit condition that cannot be reached, i.e., an infinite loop. 	1322	https://cwe.mitre.org/data/definitions/835.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
484	Omitted Break Statement in Switch	Base	The program omits a break statement within a switch or similar construct, causing code associated with multiple conditions to execute. This can cause problems when the programmer only intended to execute code associated with one condition. 		https://cwe.mitre.org/data/definitions/484.html
126	Buffer Over-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer. 	125,788,170	https://cwe.mitre.org/data/definitions/126.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
194	Unexpected Sign Extension	Variant	The software performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses. 	681,681,681	https://cwe.mitre.org/data/definitions/194.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
427	Uncontrolled Search Path Element	Base	The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors. 	426	https://cwe.mitre.org/data/definitions/427.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
401	Missing Release of Memory after Effective Lifetime	Variant	The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. 	772,390	https://cwe.mitre.org/data/definitions/401.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
758	Reliance on Undefined, Unspecified, or Implementation-Defined Behavior	Class	The software uses an API function, data structure, or other entity in a way that relies on properties that are not always guaranteed to hold for that entity. 	474,562,587,588,1102,1103,1105	https://cwe.mitre.org/data/definitions/758.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
833	Deadlock	Base	The software contains multiple threads or executable segments that are waiting for each other to release a necessary lock, resulting in deadlock. 		https://cwe.mitre.org/data/definitions/833.html
427	Uncontrolled Search Path Element	Base	The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors. 	426	https://cwe.mitre.org/data/definitions/427.html
126	Buffer Over-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer. 	125,788,170	https://cwe.mitre.org/data/definitions/126.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
114	Process Control	Class	Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker. 	73	https://cwe.mitre.org/data/definitions/114.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
194	Unexpected Sign Extension	Variant	The software performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses. 	681,681,681	https://cwe.mitre.org/data/definitions/194.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
319	Cleartext Transmission of Sensitive Information	Base	The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors. 	5	https://cwe.mitre.org/data/definitions/319.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
457	Use of Uninitialized Variable	Variant	The code uses a variable that has not been initialized, leading to unpredictable or unintended results. 	908,456	https://cwe.mitre.org/data/definitions/457.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
88	Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')	Base	The software constructs a string for a command to executed by a separate component in another control sphere, but it does not properly delimit the intended arguments, options, or switches within that command string. 		https://cwe.mitre.org/data/definitions/88.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
126	Buffer Over-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer. 	125,788,170	https://cwe.mitre.org/data/definitions/126.html
427	Uncontrolled Search Path Element	Base	The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors. 	426	https://cwe.mitre.org/data/definitions/427.html
191	Integer Underflow (Wrap or Wraparound)	Base	The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result. 		https://cwe.mitre.org/data/definitions/191.html
761	Free of Pointer not at Start of Buffer	Variant	The application calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer. 	763	https://cwe.mitre.org/data/definitions/761.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
191	Integer Underflow (Wrap or Wraparound)	Base	The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result. 		https://cwe.mitre.org/data/definitions/191.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
194	Unexpected Sign Extension	Variant	The software performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses. 	681,681,681	https://cwe.mitre.org/data/definitions/194.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
195	Signed to Unsigned Conversion Error	Variant	The software uses a signed primitive and performs a cast to an unsigned primitive, which can produce an unexpected value if the value of the signed primitive can not be represented using an unsigned primitive. 	681,839,681,681	https://cwe.mitre.org/data/definitions/195.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
194	Unexpected Sign Extension	Variant	The software performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses. 	681,681,681	https://cwe.mitre.org/data/definitions/194.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
195	Signed to Unsigned Conversion Error	Variant	The software uses a signed primitive and performs a cast to an unsigned primitive, which can produce an unexpected value if the value of the signed primitive can not be represented using an unsigned primitive. 	681,839,681,681	https://cwe.mitre.org/data/definitions/195.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
197	Numeric Truncation Error	Base	Truncation errors occur when a primitive is cast to a primitive of a smaller size and data is lost in the conversion. 	681,192,194,195,196,681,681	https://cwe.mitre.org/data/definitions/197.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
195	Signed to Unsigned Conversion Error	Variant	The software uses a signed primitive and performs a cast to an unsigned primitive, which can produce an unexpected value if the value of the signed primitive can not be represented using an unsigned primitive. 	681,839,681,681	https://cwe.mitre.org/data/definitions/195.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
119	Improper Restriction of Operations within the Bounds of a Memory Buffer	Class	The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer. 	120,125,466,786,787,788,805,822,823,824,825,128,129,131,190,193,195,839,843,1257,1260,1339,120,125,787,824,120,123,125,130,786,787,788,805,822,823,824,825,120,123,125,130,786,787,788,805,822,823,824,825	https://cwe.mitre.org/data/definitions/119.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
606	Unchecked Input for Loop Condition	Base	The product does not properly check inputs that are used for loop conditions, potentially leading to a denial of service or other consequences because of excessive looping. 	1284	https://cwe.mitre.org/data/definitions/606.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
194	Unexpected Sign Extension	Variant	The software performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses. 	681,681,681	https://cwe.mitre.org/data/definitions/194.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
195	Signed to Unsigned Conversion Error	Variant	The software uses a signed primitive and performs a cast to an unsigned primitive, which can produce an unexpected value if the value of the signed primitive can not be represented using an unsigned primitive. 	681,839,681,681	https://cwe.mitre.org/data/definitions/195.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
401	Missing Release of Memory after Effective Lifetime	Variant	The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. 	772,390	https://cwe.mitre.org/data/definitions/401.html
690	Unchecked Return Value to NULL Pointer Dereference	Compound	The product does not check for an error after calling a function that can return with a NULL pointer if the function fails, which leads to a resultant NULL pointer dereference. 	252,476,476	https://cwe.mitre.org/data/definitions/690.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
415	Double Free	Variant	The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations. 	825,123,416,364	https://cwe.mitre.org/data/definitions/415.html
119	Improper Restriction of Operations within the Bounds of a Memory Buffer	Class	The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer. 	120,125,466,786,787,788,805,822,823,824,825,128,129,131,190,193,195,839,843,1257,1260,1339,120,125,787,824,120,123,125,130,786,787,788,805,822,823,824,825,120,123,125,130,786,787,788,805,822,823,824,825	https://cwe.mitre.org/data/definitions/119.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
606	Unchecked Input for Loop Condition	Base	The product does not properly check inputs that are used for loop conditions, potentially leading to a denial of service or other consequences because of excessive looping. 	1284	https://cwe.mitre.org/data/definitions/606.html
765	Multiple Unlocks of a Critical Resource	Base	The software unlocks a critical resource more times than intended, leading to an unexpected state in the system. 		https://cwe.mitre.org/data/definitions/765.html
338	Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)	Base	The product uses a Pseudo-Random Number Generator (PRNG) in a security context, but the PRNG's algorithm is not cryptographically strong. 		https://cwe.mitre.org/data/definitions/338.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
427	Uncontrolled Search Path Element	Base	The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors. 	426	https://cwe.mitre.org/data/definitions/427.html
617	Reachable Assertion	Base	The product contains an assert() or similar statement that can be triggered by an attacker, which leads to an application exit or other behavior that is more severe than necessary. 	193	https://cwe.mitre.org/data/definitions/617.html
252	Unchecked Return Value	Base	The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions. 	273,476	https://cwe.mitre.org/data/definitions/252.html
126	Buffer Over-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer. 	125,788,170	https://cwe.mitre.org/data/definitions/126.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
114	Process Control	Class	Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker. 	73	https://cwe.mitre.org/data/definitions/114.html
426	Untrusted Search Path	Base	The application searches for critical resources using an externally-supplied search path that can point to resources that are not under the application's direct control. 	427,428	https://cwe.mitre.org/data/definitions/426.html
89	Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')	Base	The software constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. 	564,456,564,564	https://cwe.mitre.org/data/definitions/89.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
457	Use of Uninitialized Variable	Variant	The code uses a variable that has not been initialized, leading to unpredictable or unintended results. 	908,456	https://cwe.mitre.org/data/definitions/457.html
591	Sensitive Data Storage in Improperly Locked Memory	Variant	The application stores sensitive data in memory that is not locked, or that has been incorrectly locked, which might cause the memory to be written to swap files on disk by the virtual memory manager. This can make the data more accessible to external actors. 	413	https://cwe.mitre.org/data/definitions/591.html
119	Improper Restriction of Operations within the Bounds of a Memory Buffer	Class	The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer. 	120,125,466,786,787,788,805,822,823,824,825,128,129,131,190,193,195,839,843,1257,1260,1339,120,125,787,824,120,123,125,130,786,787,788,805,822,823,824,825,120,123,125,130,786,787,788,805,822,823,824,825	https://cwe.mitre.org/data/definitions/119.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
194	Unexpected Sign Extension	Variant	The software performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses. 	681,681,681	https://cwe.mitre.org/data/definitions/194.html
367	Time-of-check Time-of-use (TOCTOU) Race Condition	Base	The software checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the software to perform invalid actions when the resource is in an unexpected state. 	363,365,386,609	https://cwe.mitre.org/data/definitions/367.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
468	Incorrect Pointer Scaling	Base	In C and C++, one may often accidentally refer to the wrong memory due to the semantics of when math operations are implicitly scaled. 		https://cwe.mitre.org/data/definitions/468.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
194	Unexpected Sign Extension	Variant	The software performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses. 	681,681,681	https://cwe.mitre.org/data/definitions/194.html
88	Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')	Base	The software constructs a string for a command to executed by a separate component in another control sphere, but it does not properly delimit the intended arguments, options, or switches within that command string. 		https://cwe.mitre.org/data/definitions/88.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
414	Missing Lock Check	Base	A product does not check to see if a lock is present before performing sensitive operations on a resource. 		https://cwe.mitre.org/data/definitions/414.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
427	Uncontrolled Search Path Element	Base	The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors. 	426	https://cwe.mitre.org/data/definitions/427.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
194	Unexpected Sign Extension	Variant	The software performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses. 	681,681,681	https://cwe.mitre.org/data/definitions/194.html
114	Process Control	Class	Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker. 	73	https://cwe.mitre.org/data/definitions/114.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
126	Buffer Over-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer. 	125,788,170	https://cwe.mitre.org/data/definitions/126.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
685	Function Call With Incorrect Number of Arguments	Variant	The software calls a function, procedure, or routine, but the caller specifies too many arguments, or too few arguments, which may lead to undefined behavior and resultant weaknesses. 	628	https://cwe.mitre.org/data/definitions/685.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
252	Unchecked Return Value	Base	The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions. 	273,476	https://cwe.mitre.org/data/definitions/252.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
195	Signed to Unsigned Conversion Error	Variant	The software uses a signed primitive and performs a cast to an unsigned primitive, which can produce an unexpected value if the value of the signed primitive can not be represented using an unsigned primitive. 	681,839,681,681	https://cwe.mitre.org/data/definitions/195.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
126	Buffer Over-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer. 	125,788,170	https://cwe.mitre.org/data/definitions/126.html
606	Unchecked Input for Loop Condition	Base	The product does not properly check inputs that are used for loop conditions, potentially leading to a denial of service or other consequences because of excessive looping. 	1284	https://cwe.mitre.org/data/definitions/606.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
126	Buffer Over-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer. 	125,788,170	https://cwe.mitre.org/data/definitions/126.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
690	Unchecked Return Value to NULL Pointer Dereference	Compound	The product does not check for an error after calling a function that can return with a NULL pointer if the function fails, which leads to a resultant NULL pointer dereference. 	252,476,476	https://cwe.mitre.org/data/definitions/690.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
690	Unchecked Return Value to NULL Pointer Dereference	Compound	The product does not check for an error after calling a function that can return with a NULL pointer if the function fails, which leads to a resultant NULL pointer dereference. 	252,476,476	https://cwe.mitre.org/data/definitions/690.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
404	Improper Resource Shutdown or Release	Class	The program does not release or incorrectly releases a resource before it is made available for re-use. 	262,263,299,459,763,772,1266,239,619,401,459,763,772,401,772,775,761,762,763,772,775	https://cwe.mitre.org/data/definitions/404.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
534	DEPRECATED: Information Exposure Through Debug Log Files	Variant	This entry has been deprecated because its abstraction was too low-level. See <a href="/data/definitions/532.html">CWE-532</a>. 		https://cwe.mitre.org/data/definitions/534.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
126	Buffer Over-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer. 	125,788,170	https://cwe.mitre.org/data/definitions/126.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
773	Missing Reference to Active File Descriptor or Handle	Variant	The software does not properly maintain references to a file descriptor or handle, which prevents that file descriptor/handle from being reclaimed. 	771	https://cwe.mitre.org/data/definitions/773.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
415	Double Free	Variant	The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations. 	825,123,416,364	https://cwe.mitre.org/data/definitions/415.html
415	Double Free	Variant	The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations. 	825,123,416,364	https://cwe.mitre.org/data/definitions/415.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
369	Divide By Zero	Base	The product divides a value by zero. 		https://cwe.mitre.org/data/definitions/369.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
401	Missing Release of Memory after Effective Lifetime	Variant	The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. 	772,390	https://cwe.mitre.org/data/definitions/401.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
617	Reachable Assertion	Base	The product contains an assert() or similar statement that can be triggered by an attacker, which leads to an application exit or other behavior that is more severe than necessary. 	193	https://cwe.mitre.org/data/definitions/617.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
606	Unchecked Input for Loop Condition	Base	The product does not properly check inputs that are used for loop conditions, potentially leading to a denial of service or other consequences because of excessive looping. 	1284	https://cwe.mitre.org/data/definitions/606.html
369	Divide By Zero	Base	The product divides a value by zero. 		https://cwe.mitre.org/data/definitions/369.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
457	Use of Uninitialized Variable	Variant	The code uses a variable that has not been initialized, leading to unpredictable or unintended results. 	908,456	https://cwe.mitre.org/data/definitions/457.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
119	Improper Restriction of Operations within the Bounds of a Memory Buffer	Class	The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer. 	120,125,466,786,787,788,805,822,823,824,825,128,129,131,190,193,195,839,843,1257,1260,1339,120,125,787,824,120,123,125,130,786,787,788,805,822,823,824,825,120,123,125,130,786,787,788,805,822,823,824,825	https://cwe.mitre.org/data/definitions/119.html
506	Embedded Malicious Code	Class	The application contains code that appears to be malicious in nature. 	507,510,511,512	https://cwe.mitre.org/data/definitions/506.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
606	Unchecked Input for Loop Condition	Base	The product does not properly check inputs that are used for loop conditions, potentially leading to a denial of service or other consequences because of excessive looping. 	1284	https://cwe.mitre.org/data/definitions/606.html
416	Use After Free	Variant	Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code. 	825,415,364,1265,120,123	https://cwe.mitre.org/data/definitions/416.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
114	Process Control	Class	Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker. 	73	https://cwe.mitre.org/data/definitions/114.html
400	Uncontrolled Resource Consumption	Class	The software does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources. 	770,771,779,920,1235,410,770,920	https://cwe.mitre.org/data/definitions/400.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
119	Improper Restriction of Operations within the Bounds of a Memory Buffer	Class	The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer. 	120,125,466,786,787,788,805,822,823,824,825,128,129,131,190,193,195,839,843,1257,1260,1339,120,125,787,824,120,123,125,130,786,787,788,805,822,823,824,825,120,123,125,130,786,787,788,805,822,823,824,825	https://cwe.mitre.org/data/definitions/119.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
126	Buffer Over-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer. 	125,788,170	https://cwe.mitre.org/data/definitions/126.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
416	Use After Free	Variant	Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code. 	825,415,364,1265,120,123	https://cwe.mitre.org/data/definitions/416.html
253	Incorrect Check of Function Return Value	Base	The software incorrectly checks a return value from a function, which prevents the software from detecting errors or exceptional conditions. 		https://cwe.mitre.org/data/definitions/253.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
126	Buffer Over-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer. 	125,788,170	https://cwe.mitre.org/data/definitions/126.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
88	Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')	Base	The software constructs a string for a command to executed by a separate component in another control sphere, but it does not properly delimit the intended arguments, options, or switches within that command string. 		https://cwe.mitre.org/data/definitions/88.html
761	Free of Pointer not at Start of Buffer	Variant	The application calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer. 	763	https://cwe.mitre.org/data/definitions/761.html
400	Uncontrolled Resource Consumption	Class	The software does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources. 	770,771,779,920,1235,410,770,920	https://cwe.mitre.org/data/definitions/400.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
427	Uncontrolled Search Path Element	Base	The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors. 	426	https://cwe.mitre.org/data/definitions/427.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
191	Integer Underflow (Wrap or Wraparound)	Base	The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result. 		https://cwe.mitre.org/data/definitions/191.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
609	Double-Checked Locking	Base	The program uses double-checked locking to access a resource without the overhead of explicit synchronization, but the locking is insufficient. 	367	https://cwe.mitre.org/data/definitions/609.html
617	Reachable Assertion	Base	The product contains an assert() or similar statement that can be triggered by an attacker, which leads to an application exit or other behavior that is more severe than necessary. 	193	https://cwe.mitre.org/data/definitions/617.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
457	Use of Uninitialized Variable	Variant	The code uses a variable that has not been initialized, leading to unpredictable or unintended results. 	908,456	https://cwe.mitre.org/data/definitions/457.html
194	Unexpected Sign Extension	Variant	The software performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses. 	681,681,681	https://cwe.mitre.org/data/definitions/194.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
126	Buffer Over-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer. 	125,788,170	https://cwe.mitre.org/data/definitions/126.html
401	Missing Release of Memory after Effective Lifetime	Variant	The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. 	772,390	https://cwe.mitre.org/data/definitions/401.html
369	Divide By Zero	Base	The product divides a value by zero. 		https://cwe.mitre.org/data/definitions/369.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
761	Free of Pointer not at Start of Buffer	Variant	The application calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer. 	763	https://cwe.mitre.org/data/definitions/761.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
195	Signed to Unsigned Conversion Error	Variant	The software uses a signed primitive and performs a cast to an unsigned primitive, which can produce an unexpected value if the value of the signed primitive can not be represented using an unsigned primitive. 	681,839,681,681	https://cwe.mitre.org/data/definitions/195.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
369	Divide By Zero	Base	The product divides a value by zero. 		https://cwe.mitre.org/data/definitions/369.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
319	Cleartext Transmission of Sensitive Information	Base	The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors. 	5	https://cwe.mitre.org/data/definitions/319.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
761	Free of Pointer not at Start of Buffer	Variant	The application calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer. 	763	https://cwe.mitre.org/data/definitions/761.html
226	Sensitive Information in Resource Not Removed Before Reuse	Base	When a device releases a resource such as memory or a file for reuse by other entities, information contained in the resource is not fully cleared prior to reuse of the resource. 	212,459,244,1239,1272,1301,201	https://cwe.mitre.org/data/definitions/226.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
617	Reachable Assertion	Base	The product contains an assert() or similar statement that can be triggered by an attacker, which leads to an application exit or other behavior that is more severe than necessary. 	193	https://cwe.mitre.org/data/definitions/617.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
416	Use After Free	Variant	Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code. 	825,415,364,1265,120,123	https://cwe.mitre.org/data/definitions/416.html
457	Use of Uninitialized Variable	Variant	The code uses a variable that has not been initialized, leading to unpredictable or unintended results. 	908,456	https://cwe.mitre.org/data/definitions/457.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
457	Use of Uninitialized Variable	Variant	The code uses a variable that has not been initialized, leading to unpredictable or unintended results. 	908,456	https://cwe.mitre.org/data/definitions/457.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
226	Sensitive Information in Resource Not Removed Before Reuse	Base	When a device releases a resource such as memory or a file for reuse by other entities, information contained in the resource is not fully cleared prior to reuse of the resource. 	212,459,244,1239,1272,1301,201	https://cwe.mitre.org/data/definitions/226.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
123	Write-what-where Condition	Base	Any condition where the attacker has the ability to write an arbitrary value to an arbitrary location, often as the result of a buffer overflow. 	787,415,120,134,364,416,479,590	https://cwe.mitre.org/data/definitions/123.html
427	Uncontrolled Search Path Element	Base	The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors. 	426	https://cwe.mitre.org/data/definitions/427.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
126	Buffer Over-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer. 	125,788,170	https://cwe.mitre.org/data/definitions/126.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
401	Missing Release of Memory after Effective Lifetime	Variant	The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. 	772,390	https://cwe.mitre.org/data/definitions/401.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
606	Unchecked Input for Loop Condition	Base	The product does not properly check inputs that are used for loop conditions, potentially leading to a denial of service or other consequences because of excessive looping. 	1284	https://cwe.mitre.org/data/definitions/606.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
476	NULL Pointer Dereference	Base	A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit. 	252,789,1325	https://cwe.mitre.org/data/definitions/476.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
369	Divide By Zero	Base	The product divides a value by zero. 		https://cwe.mitre.org/data/definitions/369.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
327	Use of a Broken or Risky Cryptographic Algorithm	Class	The use of a broken or risky cryptographic algorithm is an unnecessary risk that may result in the exposure of sensitive information. 	328,780,916,1240,301,208,916	https://cwe.mitre.org/data/definitions/327.html
114	Process Control	Class	Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker. 	73	https://cwe.mitre.org/data/definitions/114.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
617	Reachable Assertion	Base	The product contains an assert() or similar statement that can be triggered by an attacker, which leads to an application exit or other behavior that is more severe than necessary. 	193	https://cwe.mitre.org/data/definitions/617.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
806	Buffer Access Using Size of Source Buffer	Variant	The software uses the size of a source buffer when reading from or writing to a destination buffer, which may cause it to access memory that is outside of the bounds of the buffer. 	805	https://cwe.mitre.org/data/definitions/806.html
401	Missing Release of Memory after Effective Lifetime	Variant	The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. 	772,390	https://cwe.mitre.org/data/definitions/401.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
401	Missing Release of Memory after Effective Lifetime	Variant	The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. 	772,390	https://cwe.mitre.org/data/definitions/401.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
617	Reachable Assertion	Base	The product contains an assert() or similar statement that can be triggered by an attacker, which leads to an application exit or other behavior that is more severe than necessary. 	193	https://cwe.mitre.org/data/definitions/617.html
426	Untrusted Search Path	Base	The application searches for critical resources using an externally-supplied search path that can point to resources that are not under the application's direct control. 	427,428	https://cwe.mitre.org/data/definitions/426.html
457	Use of Uninitialized Variable	Variant	The code uses a variable that has not been initialized, leading to unpredictable or unintended results. 	908,456	https://cwe.mitre.org/data/definitions/457.html
400	Uncontrolled Resource Consumption	Class	The software does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources. 	770,771,779,920,1235,410,770,920	https://cwe.mitre.org/data/definitions/400.html
457	Use of Uninitialized Variable	Variant	The code uses a variable that has not been initialized, leading to unpredictable or unintended results. 	908,456	https://cwe.mitre.org/data/definitions/457.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
126	Buffer Over-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer. 	125,788,170	https://cwe.mitre.org/data/definitions/126.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
400	Uncontrolled Resource Consumption	Class	The software does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources. 	770,771,779,920,1235,410,770,920	https://cwe.mitre.org/data/definitions/400.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
758	Reliance on Undefined, Unspecified, or Implementation-Defined Behavior	Class	The software uses an API function, data structure, or other entity in a way that relies on properties that are not always guaranteed to hold for that entity. 	474,562,587,588,1102,1103,1105	https://cwe.mitre.org/data/definitions/758.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
284	Improper Access Control	Pillar	The software does not restrict or incorrectly restricts access to a resource from an unauthorized actor. 	346,942,1220,1224,1231,1242,1252,1256,1257,1259,1260,1262,1267,1268,1270,1274,1275,1276,1280,1283,1290,1292,1296,1304,1311,1312,1313,1315,1316,1317,1320,1323,1334,288,639	https://cwe.mitre.org/data/definitions/284.html
197	Numeric Truncation Error	Base	Truncation errors occur when a primitive is cast to a primitive of a smaller size and data is lost in the conversion. 	681,192,194,195,196,681,681	https://cwe.mitre.org/data/definitions/197.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
191	Integer Underflow (Wrap or Wraparound)	Base	The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result. 		https://cwe.mitre.org/data/definitions/191.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
119	Improper Restriction of Operations within the Bounds of a Memory Buffer	Class	The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer. 	120,125,466,786,787,788,805,822,823,824,825,128,129,131,190,193,195,839,843,1257,1260,1339,120,125,787,824,120,123,125,130,786,787,788,805,822,823,824,825,120,123,125,130,786,787,788,805,822,823,824,825	https://cwe.mitre.org/data/definitions/119.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
123	Write-what-where Condition	Base	Any condition where the attacker has the ability to write an arbitrary value to an arbitrary location, often as the result of a buffer overflow. 	787,415,120,134,364,416,479,590	https://cwe.mitre.org/data/definitions/123.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
319	Cleartext Transmission of Sensitive Information	Base	The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors. 	5	https://cwe.mitre.org/data/definitions/319.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
427	Uncontrolled Search Path Element	Base	The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors. 	426	https://cwe.mitre.org/data/definitions/427.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
415	Double Free	Variant	The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations. 	825,123,416,364	https://cwe.mitre.org/data/definitions/415.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
510	Trapdoor	Base	A trapdoor is a hidden piece of code that responds to a special input, allowing its user access to resources without passing through the normal security enforcement mechanism. 		https://cwe.mitre.org/data/definitions/510.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
427	Uncontrolled Search Path Element	Base	The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors. 	426	https://cwe.mitre.org/data/definitions/427.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
785	Use of Path Manipulation Function without Maximum-sized Buffer	Variant	The software invokes a function for normalizing paths or file names, but it provides an output buffer that is smaller than the maximum possible size, such as PATH_MAX. 	120,676	https://cwe.mitre.org/data/definitions/785.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
400	Uncontrolled Resource Consumption	Class	The software does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources. 	770,771,779,920,1235,410,770,920	https://cwe.mitre.org/data/definitions/400.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
761	Free of Pointer not at Start of Buffer	Variant	The application calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer. 	763	https://cwe.mitre.org/data/definitions/761.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
427	Uncontrolled Search Path Element	Base	The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors. 	426	https://cwe.mitre.org/data/definitions/427.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
427	Uncontrolled Search Path Element	Base	The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors. 	426	https://cwe.mitre.org/data/definitions/427.html
123	Write-what-where Condition	Base	Any condition where the attacker has the ability to write an arbitrary value to an arbitrary location, often as the result of a buffer overflow. 	787,415,120,134,364,416,479,590	https://cwe.mitre.org/data/definitions/123.html
761	Free of Pointer not at Start of Buffer	Variant	The application calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer. 	763	https://cwe.mitre.org/data/definitions/761.html
369	Divide By Zero	Base	The product divides a value by zero. 		https://cwe.mitre.org/data/definitions/369.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
114	Process Control	Class	Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker. 	73	https://cwe.mitre.org/data/definitions/114.html
197	Numeric Truncation Error	Base	Truncation errors occur when a primitive is cast to a primitive of a smaller size and data is lost in the conversion. 	681,192,194,195,196,681,681	https://cwe.mitre.org/data/definitions/197.html
506	Embedded Malicious Code	Class	The application contains code that appears to be malicious in nature. 	507,510,511,512	https://cwe.mitre.org/data/definitions/506.html
259	Use of Hard-coded Password	Variant	The software contains a hard-coded password, which it uses for its own inbound authentication or for outbound communication to external components. 	798,321,257,656,798,798	https://cwe.mitre.org/data/definitions/259.html
416	Use After Free	Variant	Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code. 	825,415,364,1265,120,123	https://cwe.mitre.org/data/definitions/416.html
377	Insecure Temporary File	Class	Creating and using insecure temporary files can leave application and system data vulnerable to attack. 	378,379	https://cwe.mitre.org/data/definitions/377.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
119	Improper Restriction of Operations within the Bounds of a Memory Buffer	Class	The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer. 	120,125,466,786,787,788,805,822,823,824,825,128,129,131,190,193,195,839,843,1257,1260,1339,120,125,787,824,120,123,125,130,786,787,788,805,822,823,824,825,120,123,125,130,786,787,788,805,822,823,824,825	https://cwe.mitre.org/data/definitions/119.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
191	Integer Underflow (Wrap or Wraparound)	Base	The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result. 		https://cwe.mitre.org/data/definitions/191.html
119	Improper Restriction of Operations within the Bounds of a Memory Buffer	Class	The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer. 	120,125,466,786,787,788,805,822,823,824,825,128,129,131,190,193,195,839,843,1257,1260,1339,120,125,787,824,120,123,125,130,786,787,788,805,822,823,824,825,120,123,125,130,786,787,788,805,822,823,824,825	https://cwe.mitre.org/data/definitions/119.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
415	Double Free	Variant	The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations. 	825,123,416,364	https://cwe.mitre.org/data/definitions/415.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
666	Operation on Resource in Wrong Phase of Lifetime	Class	The software performs an operation on a resource at the wrong phase of the resource's lifecycle, which can lead to unexpected behaviors. 	415,593,605,826	https://cwe.mitre.org/data/definitions/666.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
606	Unchecked Input for Loop Condition	Base	The product does not properly check inputs that are used for loop conditions, potentially leading to a denial of service or other consequences because of excessive looping. 	1284	https://cwe.mitre.org/data/definitions/606.html
606	Unchecked Input for Loop Condition	Base	The product does not properly check inputs that are used for loop conditions, potentially leading to a denial of service or other consequences because of excessive looping. 	1284	https://cwe.mitre.org/data/definitions/606.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
690	Unchecked Return Value to NULL Pointer Dereference	Compound	The product does not check for an error after calling a function that can return with a NULL pointer if the function fails, which leads to a resultant NULL pointer dereference. 	252,476,476	https://cwe.mitre.org/data/definitions/690.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
126	Buffer Over-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer. 	125,788,170	https://cwe.mitre.org/data/definitions/126.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
401	Missing Release of Memory after Effective Lifetime	Variant	The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. 	772,390	https://cwe.mitre.org/data/definitions/401.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
758	Reliance on Undefined, Unspecified, or Implementation-Defined Behavior	Class	The software uses an API function, data structure, or other entity in a way that relies on properties that are not always guaranteed to hold for that entity. 	474,562,587,588,1102,1103,1105	https://cwe.mitre.org/data/definitions/758.html
369	Divide By Zero	Base	The product divides a value by zero. 		https://cwe.mitre.org/data/definitions/369.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
194	Unexpected Sign Extension	Variant	The software performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses. 	681,681,681	https://cwe.mitre.org/data/definitions/194.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
758	Reliance on Undefined, Unspecified, or Implementation-Defined Behavior	Class	The software uses an API function, data structure, or other entity in a way that relies on properties that are not always guaranteed to hold for that entity. 	474,562,587,588,1102,1103,1105	https://cwe.mitre.org/data/definitions/758.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
194	Unexpected Sign Extension	Variant	The software performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses. 	681,681,681	https://cwe.mitre.org/data/definitions/194.html
690	Unchecked Return Value to NULL Pointer Dereference	Compound	The product does not check for an error after calling a function that can return with a NULL pointer if the function fails, which leads to a resultant NULL pointer dereference. 	252,476,476	https://cwe.mitre.org/data/definitions/690.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
476	NULL Pointer Dereference	Base	A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit. 	252,789,1325	https://cwe.mitre.org/data/definitions/476.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
415	Double Free	Variant	The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations. 	825,123,416,364	https://cwe.mitre.org/data/definitions/415.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
690	Unchecked Return Value to NULL Pointer Dereference	Compound	The product does not check for an error after calling a function that can return with a NULL pointer if the function fails, which leads to a resultant NULL pointer dereference. 	252,476,476	https://cwe.mitre.org/data/definitions/690.html
457	Use of Uninitialized Variable	Variant	The code uses a variable that has not been initialized, leading to unpredictable or unintended results. 	908,456	https://cwe.mitre.org/data/definitions/457.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
401	Missing Release of Memory after Effective Lifetime	Variant	The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. 	772,390	https://cwe.mitre.org/data/definitions/401.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
606	Unchecked Input for Loop Condition	Base	The product does not properly check inputs that are used for loop conditions, potentially leading to a denial of service or other consequences because of excessive looping. 	1284	https://cwe.mitre.org/data/definitions/606.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
468	Incorrect Pointer Scaling	Base	In C and C++, one may often accidentally refer to the wrong memory due to the semantics of when math operations are implicitly scaled. 		https://cwe.mitre.org/data/definitions/468.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
119	Improper Restriction of Operations within the Bounds of a Memory Buffer	Class	The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer. 	120,125,466,786,787,788,805,822,823,824,825,128,129,131,190,193,195,839,843,1257,1260,1339,120,125,787,824,120,123,125,130,786,787,788,805,822,823,824,825,120,123,125,130,786,787,788,805,822,823,824,825	https://cwe.mitre.org/data/definitions/119.html
119	Improper Restriction of Operations within the Bounds of a Memory Buffer	Class	The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer. 	120,125,466,786,787,788,805,822,823,824,825,128,129,131,190,193,195,839,843,1257,1260,1339,120,125,787,824,120,123,125,130,786,787,788,805,822,823,824,825,120,123,125,130,786,787,788,805,822,823,824,825	https://cwe.mitre.org/data/definitions/119.html
761	Free of Pointer not at Start of Buffer	Variant	The application calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer. 	763	https://cwe.mitre.org/data/definitions/761.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
377	Insecure Temporary File	Class	Creating and using insecure temporary files can leave application and system data vulnerable to attack. 	378,379	https://cwe.mitre.org/data/definitions/377.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
15	External Control of System or Configuration Setting	Base	One or more system settings or configuration elements can be externally controlled by a user. 		https://cwe.mitre.org/data/definitions/15.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
363	Race Condition Enabling Link Following	Base	The software checks the status of a file or directory before accessing it, which produces a race condition in which the file can be replaced with a link before the access is performed, causing the software to access the wrong file. 	367,59	https://cwe.mitre.org/data/definitions/363.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
761	Free of Pointer not at Start of Buffer	Variant	The application calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer. 	763	https://cwe.mitre.org/data/definitions/761.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
123	Write-what-where Condition	Base	Any condition where the attacker has the ability to write an arbitrary value to an arbitrary location, often as the result of a buffer overflow. 	787,415,120,134,364,416,479,590	https://cwe.mitre.org/data/definitions/123.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
191	Integer Underflow (Wrap or Wraparound)	Base	The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result. 		https://cwe.mitre.org/data/definitions/191.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
195	Signed to Unsigned Conversion Error	Variant	The software uses a signed primitive and performs a cast to an unsigned primitive, which can produce an unexpected value if the value of the signed primitive can not be represented using an unsigned primitive. 	681,839,681,681	https://cwe.mitre.org/data/definitions/195.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
319	Cleartext Transmission of Sensitive Information	Base	The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors. 	5	https://cwe.mitre.org/data/definitions/319.html
464	Addition of Data Structure Sentinel	Base	The accidental addition of a data-structure sentinel can cause serious programming logic problems. 	170,463	https://cwe.mitre.org/data/definitions/464.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
758	Reliance on Undefined, Unspecified, or Implementation-Defined Behavior	Class	The software uses an API function, data structure, or other entity in a way that relies on properties that are not always guaranteed to hold for that entity. 	474,562,587,588,1102,1103,1105	https://cwe.mitre.org/data/definitions/758.html
457	Use of Uninitialized Variable	Variant	The code uses a variable that has not been initialized, leading to unpredictable or unintended results. 	908,456	https://cwe.mitre.org/data/definitions/457.html
119	Improper Restriction of Operations within the Bounds of a Memory Buffer	Class	The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer. 	120,125,466,786,787,788,805,822,823,824,825,128,129,131,190,193,195,839,843,1257,1260,1339,120,125,787,824,120,123,125,130,786,787,788,805,822,823,824,825,120,123,125,130,786,787,788,805,822,823,824,825	https://cwe.mitre.org/data/definitions/119.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
833	Deadlock	Base	The software contains multiple threads or executable segments that are waiting for each other to release a necessary lock, resulting in deadlock. 		https://cwe.mitre.org/data/definitions/833.html
319	Cleartext Transmission of Sensitive Information	Base	The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors. 	5	https://cwe.mitre.org/data/definitions/319.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
476	NULL Pointer Dereference	Base	A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit. 	252,789,1325	https://cwe.mitre.org/data/definitions/476.html
427	Uncontrolled Search Path Element	Base	The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors. 	426	https://cwe.mitre.org/data/definitions/427.html
469	Use of Pointer Subtraction to Determine Size	Base	The application subtracts one pointer from another in order to determine size, but this calculation can be incorrect if the pointers do not exist in the same memory chunk. 		https://cwe.mitre.org/data/definitions/469.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
761	Free of Pointer not at Start of Buffer	Variant	The application calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer. 	763	https://cwe.mitre.org/data/definitions/761.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
681	Incorrect Conversion between Numeric Types	Base	When converting from one data type to another, such as long to integer, data can be omitted or translated in a way that produces unexpected values. If the resulting values are used in a sensitive context, then dangerous behaviors may occur. 	192,194,195,196,197,194,195,196,197,194,195,196,197	https://cwe.mitre.org/data/definitions/681.html
191	Integer Underflow (Wrap or Wraparound)	Base	The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result. 		https://cwe.mitre.org/data/definitions/191.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
761	Free of Pointer not at Start of Buffer	Variant	The application calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer. 	763	https://cwe.mitre.org/data/definitions/761.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
126	Buffer Over-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer. 	125,788,170	https://cwe.mitre.org/data/definitions/126.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
761	Free of Pointer not at Start of Buffer	Variant	The application calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer. 	763	https://cwe.mitre.org/data/definitions/761.html
416	Use After Free	Variant	Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code. 	825,415,364,1265,120,123	https://cwe.mitre.org/data/definitions/416.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
761	Free of Pointer not at Start of Buffer	Variant	The application calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer. 	763	https://cwe.mitre.org/data/definitions/761.html
369	Divide By Zero	Base	The product divides a value by zero. 		https://cwe.mitre.org/data/definitions/369.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
90	Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')	Base	The software constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended LDAP query when it is sent to a downstream component. 		https://cwe.mitre.org/data/definitions/90.html
319	Cleartext Transmission of Sensitive Information	Base	The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors. 	5	https://cwe.mitre.org/data/definitions/319.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
124	Buffer Underwrite ('Buffer Underflow')	Base	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. 	787,786,839	https://cwe.mitre.org/data/definitions/124.html
401	Missing Release of Memory after Effective Lifetime	Variant	The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. 	772,390	https://cwe.mitre.org/data/definitions/401.html
319	Cleartext Transmission of Sensitive Information	Base	The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors. 	5	https://cwe.mitre.org/data/definitions/319.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
194	Unexpected Sign Extension	Variant	The software performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses. 	681,681,681	https://cwe.mitre.org/data/definitions/194.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
690	Unchecked Return Value to NULL Pointer Dereference	Compound	The product does not check for an error after calling a function that can return with a NULL pointer if the function fails, which leads to a resultant NULL pointer dereference. 	252,476,476	https://cwe.mitre.org/data/definitions/690.html
191	Integer Underflow (Wrap or Wraparound)	Base	The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result. 		https://cwe.mitre.org/data/definitions/191.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
761	Free of Pointer not at Start of Buffer	Variant	The application calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer. 	763	https://cwe.mitre.org/data/definitions/761.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
606	Unchecked Input for Loop Condition	Base	The product does not properly check inputs that are used for loop conditions, potentially leading to a denial of service or other consequences because of excessive looping. 	1284	https://cwe.mitre.org/data/definitions/606.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
126	Buffer Over-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer. 	125,788,170	https://cwe.mitre.org/data/definitions/126.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
195	Signed to Unsigned Conversion Error	Variant	The software uses a signed primitive and performs a cast to an unsigned primitive, which can produce an unexpected value if the value of the signed primitive can not be represented using an unsigned primitive. 	681,839,681,681	https://cwe.mitre.org/data/definitions/195.html
134	Use of Externally-Controlled Format String	Base	The software uses a function that accepts a format string as an argument, but the format string originates from an external source. 	123	https://cwe.mitre.org/data/definitions/134.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
127	Buffer Under-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. 	125,786	https://cwe.mitre.org/data/definitions/127.html
401	Missing Release of Memory after Effective Lifetime	Variant	The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. 	772,390	https://cwe.mitre.org/data/definitions/401.html
476	NULL Pointer Dereference	Base	A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit. 	252,789,1325	https://cwe.mitre.org/data/definitions/476.html
789	Memory Allocation with Excessive Size Value	Variant	The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated. 	1284,770,1325,129,476	https://cwe.mitre.org/data/definitions/789.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
590	Free of Memory not on the Heap	Variant	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). 	762,123	https://cwe.mitre.org/data/definitions/590.html
126	Buffer Over-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer. 	125,788,170	https://cwe.mitre.org/data/definitions/126.html
426	Untrusted Search Path	Base	The application searches for critical resources using an externally-supplied search path that can point to resources that are not under the application's direct control. 	427,428	https://cwe.mitre.org/data/definitions/426.html
401	Missing Release of Memory after Effective Lifetime	Variant	The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. 	772,390	https://cwe.mitre.org/data/definitions/401.html
191	Integer Underflow (Wrap or Wraparound)	Base	The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result. 		https://cwe.mitre.org/data/definitions/191.html
126	Buffer Over-read	Variant	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer. 	125,788,170	https://cwe.mitre.org/data/definitions/126.html
761	Free of Pointer not at Start of Buffer	Variant	The application calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer. 	763	https://cwe.mitre.org/data/definitions/761.html
665	Improper Initialization	Class	The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used. 	454,455,770,908,909,1051,1052,1188,1221,1271,1279,908,909,1188,456,457,456,457	https://cwe.mitre.org/data/definitions/665.html
606	Unchecked Input for Loop Condition	Base	The product does not properly check inputs that are used for loop conditions, potentially leading to a denial of service or other consequences because of excessive looping. 	1284	https://cwe.mitre.org/data/definitions/606.html
190	Integer Overflow or Wraparound	Base	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. 	128,1339	https://cwe.mitre.org/data/definitions/190.html
23	Relative Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory. 	22,24,25,26,27,28,29,30,31,32,33,34,35,22,22	https://cwe.mitre.org/data/definitions/23.html
476	NULL Pointer Dereference	Base	A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit. 	252,789,1325	https://cwe.mitre.org/data/definitions/476.html
401	Missing Release of Memory after Effective Lifetime	Variant	The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. 	772,390	https://cwe.mitre.org/data/definitions/401.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
427	Uncontrolled Search Path Element	Base	The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors. 	426	https://cwe.mitre.org/data/definitions/427.html
121	Stack-based Buffer Overflow	Variant	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). 	787,788	https://cwe.mitre.org/data/definitions/121.html
122	Heap-based Buffer Overflow	Variant	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc(). 	787,788	https://cwe.mitre.org/data/definitions/122.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
427	Uncontrolled Search Path Element	Base	The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors. 	426	https://cwe.mitre.org/data/definitions/427.html
252	Unchecked Return Value	Base	The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions. 	273,476	https://cwe.mitre.org/data/definitions/252.html
36	Absolute Path Traversal	Base	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory. 	22,37,38,39,40,22,22	https://cwe.mitre.org/data/definitions/36.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
762	Mismatched Memory Management Routines	Variant	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. 	763,590	https://cwe.mitre.org/data/definitions/762.html
78	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')	Base	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. 	88,184	https://cwe.mitre.org/data/definitions/78.html
197	Numeric Truncation Error	Base	Truncation errors occur when a primitive is cast to a primitive of a smaller size and data is lost in the conversion. 	681,192,194,195,196,681,681	https://cwe.mitre.org/data/definitions/197.html
114	Process Control	Class	Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker. 	73	https://cwe.mitre.org/data/definitions/114.html
680	Integer Overflow to Buffer Overflow	Compound	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow. 	190	https://cwe.mitre.org/data/definitions/680.html
